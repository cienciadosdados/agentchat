module.exports = {

"[project]/node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * A static-key-based credential that supports updating
 * the underlying key value.
 */ __turbopack_context__.s({
    "AzureKeyCredential": (()=>AzureKeyCredential)
});
class AzureKeyCredential {
    /**
     * The value of the key to be used in authentication
     */ get key() {
        return this._key;
    }
    /**
     * Create an instance of an AzureKeyCredential for use
     * with a service client.
     *
     * @param key - The initial value of the key to use in authentication
     */ constructor(key){
        if (!key) {
            throw new Error("key must be a non-empty string");
        }
        this._key = key;
    }
    /**
     * Change the value of the key.
     *
     * Updates will take effect upon the next request after
     * updating the key value.
     *
     * @param newKey - The new key value to be used
     */ update(newKey) {
        this._key = newKey;
    }
} //# sourceMappingURL=azureKeyCredential.js.map
}}),
"[project]/node_modules/@azure/core-auth/dist/esm/keyCredential.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "isKeyCredential": (()=>isKeyCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/typeGuards.js [app-route] (ecmascript)");
;
function isKeyCredential(credential) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectWithProperties"])(credential, [
        "key"
    ]) && typeof credential.key === "string";
} //# sourceMappingURL=keyCredential.js.map
}}),
"[project]/node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzureNamedKeyCredential": (()=>AzureNamedKeyCredential),
    "isNamedKeyCredential": (()=>isNamedKeyCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/typeGuards.js [app-route] (ecmascript)");
;
class AzureNamedKeyCredential {
    /**
     * The value of the key to be used in authentication.
     */ get key() {
        return this._key;
    }
    /**
     * The value of the name to be used in authentication.
     */ get name() {
        return this._name;
    }
    /**
     * Create an instance of an AzureNamedKeyCredential for use
     * with a service client.
     *
     * @param name - The initial value of the name to use in authentication.
     * @param key - The initial value of the key to use in authentication.
     */ constructor(name, key){
        if (!name || !key) {
            throw new TypeError("name and key must be non-empty strings");
        }
        this._name = name;
        this._key = key;
    }
    /**
     * Change the value of the key.
     *
     * Updates will take effect upon the next request after
     * updating the key value.
     *
     * @param newName - The new name value to be used.
     * @param newKey - The new key value to be used.
     */ update(newName, newKey) {
        if (!newName || !newKey) {
            throw new TypeError("newName and newKey must be non-empty strings");
        }
        this._name = newName;
        this._key = newKey;
    }
}
function isNamedKeyCredential(credential) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectWithProperties"])(credential, [
        "name",
        "key"
    ]) && typeof credential.key === "string" && typeof credential.name === "string";
} //# sourceMappingURL=azureNamedKeyCredential.js.map
}}),
"[project]/node_modules/@azure/core-auth/dist/esm/azureSASCredential.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzureSASCredential": (()=>AzureSASCredential),
    "isSASCredential": (()=>isSASCredential)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/typeGuards.js [app-route] (ecmascript)");
;
class AzureSASCredential {
    /**
     * The value of the shared access signature to be used in authentication
     */ get signature() {
        return this._signature;
    }
    /**
     * Create an instance of an AzureSASCredential for use
     * with a service client.
     *
     * @param signature - The initial value of the shared access signature to use in authentication
     */ constructor(signature){
        if (!signature) {
            throw new Error("shared access signature must be a non-empty string");
        }
        this._signature = signature;
    }
    /**
     * Change the value of the signature.
     *
     * Updates will take effect upon the next request after
     * updating the signature value.
     *
     * @param newSignature - The new shared access signature value to be used
     */ update(newSignature) {
        if (!newSignature) {
            throw new Error("shared access signature must be a non-empty string");
        }
        this._signature = newSignature;
    }
}
function isSASCredential(credential) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectWithProperties"])(credential, [
        "signature"
    ]) && typeof credential.signature === "string";
} //# sourceMappingURL=azureSASCredential.js.map
}}),
"[project]/node_modules/@azure/core-auth/dist/esm/tokenCredential.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * @internal
 * @param accessToken - Access token
 * @returns Whether a token is bearer type or not
 */ __turbopack_context__.s({
    "isBearerToken": (()=>isBearerToken),
    "isPopToken": (()=>isPopToken),
    "isTokenCredential": (()=>isTokenCredential)
});
function isBearerToken(accessToken) {
    return !accessToken.tokenType || accessToken.tokenType === "Bearer";
}
function isPopToken(accessToken) {
    return accessToken.tokenType === "pop";
}
function isTokenCredential(credential) {
    // Check for an object with a 'getToken' function and possibly with
    // a 'signRequest' function.  We do this check to make sure that
    // a ServiceClientCredentials implementor (like TokenClientCredentials
    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
    // it doesn't actually implement TokenCredential also.
    const castCredential = credential;
    return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === undefined || castCredential.getToken.length > 0);
} //# sourceMappingURL=tokenCredential.js.map
}}),
"[project]/node_modules/@azure/core-auth/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$azureKeyCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$keyCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/keyCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$azureNamedKeyCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$azureSASCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/azureSASCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$tokenCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/tokenCredential.js [app-route] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
}}),
"[project]/node_modules/@azure/core-auth/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$azureKeyCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$keyCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/keyCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$azureNamedKeyCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$azureSASCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/azureSASCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$tokenCredential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/tokenCredential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$auth$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-auth/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/core-util/dist/esm/aborterUtils.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.
 */ __turbopack_context__.s({
    "cancelablePromiseRace": (()=>cancelablePromiseRace)
});
async function cancelablePromiseRace(abortablePromiseBuilders, options) {
    var _a, _b;
    const aborter = new AbortController();
    function abortHandler() {
        aborter.abort();
    }
    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", abortHandler);
    try {
        return await Promise.race(abortablePromiseBuilders.map((p)=>p({
                abortSignal: aborter.signal
            })));
    } finally{
        aborter.abort();
        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener("abort", abortHandler);
    }
} //# sourceMappingURL=aborterUtils.js.map
}}),
"[project]/node_modules/@azure/core-util/dist/esm/createAbortablePromise.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createAbortablePromise": (()=>createAbortablePromise)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$AbortError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/AbortError.js [app-route] (ecmascript)");
;
function createAbortablePromise(buildPromise, options) {
    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
    return new Promise((resolve, reject)=>{
        function rejectOnAbort() {
            reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$AbortError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AbortError"](abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : "The operation was aborted."));
        }
        function removeListeners() {
            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener("abort", onAbort);
        }
        function onAbort() {
            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
            removeListeners();
            rejectOnAbort();
        }
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            return rejectOnAbort();
        }
        try {
            buildPromise((x)=>{
                removeListeners();
                resolve(x);
            }, (x)=>{
                removeListeners();
                reject(x);
            });
        } catch (err) {
            reject(err);
        }
        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener("abort", onAbort);
    });
} //# sourceMappingURL=createAbortablePromise.js.map
}}),
"[project]/node_modules/@azure/core-util/dist/esm/delay.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "calculateRetryDelay": (()=>calculateRetryDelay),
    "delay": (()=>delay)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$createAbortablePromise$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/createAbortablePromise.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$random$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/random.js [app-route] (ecmascript)");
;
;
const StandardAbortMessage = "The delay was aborted.";
function delay(timeInMs, options) {
    let token;
    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$createAbortablePromise$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createAbortablePromise"])((resolve)=>{
        token = setTimeout(resolve, timeInMs);
    }, {
        cleanupBeforeAbort: ()=>clearTimeout(token),
        abortSignal,
        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage
    });
}
function calculateRetryDelay(retryAttempt, config) {
    // Exponentially increase the delay each time
    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);
    // Don't let the delay exceed the maximum
    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);
    // Allow the final value to have some "jitter" (within 50% of the delay size) so
    // that retries across multiple clients don't occur simultaneously.
    const retryAfterInMs = clampedDelay / 2 + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$random$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getRandomIntegerInclusive"])(0, clampedDelay / 2);
    return {
        retryAfterInMs
    };
} //# sourceMappingURL=delay.js.map
}}),
"[project]/node_modules/@azure/core-util/dist/esm/error.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getErrorMessage": (()=>getErrorMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/error.js [app-route] (ecmascript)");
;
function getErrorMessage(e) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isError"])(e)) {
        return e.message;
    } else {
        let stringified;
        try {
            if (typeof e === "object" && e) {
                stringified = JSON.stringify(e);
            } else {
                stringified = String(e);
            }
        } catch (err) {
            stringified = "[unable to stringify input]";
        }
        return `Unknown error ${stringified}`;
    }
} //# sourceMappingURL=error.js.map
}}),
"[project]/node_modules/@azure/core-util/dist/esm/typeGuards.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Helper TypeGuard that checks if something is defined or not.
 * @param thing - Anything
 */ __turbopack_context__.s({
    "isDefined": (()=>isDefined),
    "isObjectWithProperties": (()=>isObjectWithProperties),
    "objectHasProperty": (()=>objectHasProperty)
});
function isDefined(thing) {
    return typeof thing !== "undefined" && thing !== null;
}
function isObjectWithProperties(thing, properties) {
    if (!isDefined(thing) || typeof thing !== "object") {
        return false;
    }
    for (const property of properties){
        if (!objectHasProperty(thing, property)) {
            return false;
        }
    }
    return true;
}
function objectHasProperty(thing, property) {
    return isDefined(thing) && typeof thing === "object" && property in thing;
} //# sourceMappingURL=typeGuards.js.map
}}),
"[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "calculateRetryDelay": (()=>calculateRetryDelay),
    "computeSha256Hash": (()=>computeSha256Hash),
    "computeSha256Hmac": (()=>computeSha256Hmac),
    "getRandomIntegerInclusive": (()=>getRandomIntegerInclusive),
    "isBrowser": (()=>isBrowser),
    "isBun": (()=>isBun),
    "isDeno": (()=>isDeno),
    "isError": (()=>isError),
    "isNode": (()=>isNode),
    "isNodeLike": (()=>isNodeLike),
    "isNodeRuntime": (()=>isNodeRuntime),
    "isObject": (()=>isObject),
    "isReactNative": (()=>isReactNative),
    "isWebWorker": (()=>isWebWorker),
    "randomUUID": (()=>randomUUID),
    "stringToUint8Array": (()=>stringToUint8Array),
    "uint8ArrayToString": (()=>uint8ArrayToString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$delay$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/delay.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$sha256$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/sha256.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$random$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/random.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/error.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$object$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/object.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$uuidUtils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/uuidUtils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/checkEnvironment.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$bytesEncoding$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/bytesEncoding.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$aborterUtils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/aborterUtils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$createAbortablePromise$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/createAbortablePromise.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$delay$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/delay.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/error.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/typeGuards.js [app-route] (ecmascript)");
;
;
;
;
;
;
function calculateRetryDelay(retryAttempt, config) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$delay$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["calculateRetryDelay"])(retryAttempt, config);
}
function computeSha256Hash(content, encoding) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$sha256$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["computeSha256Hash"])(content, encoding);
}
function computeSha256Hmac(key, stringToSign, encoding) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$sha256$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["computeSha256Hmac"])(key, stringToSign, encoding);
}
function getRandomIntegerInclusive(min, max) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$random$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getRandomIntegerInclusive"])(min, max);
}
function isError(e) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isError"])(e);
}
function isObject(input) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$object$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObject"])(input);
}
function randomUUID() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$uuidUtils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["randomUUID"])();
}
const isBrowser = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isBrowser"];
const isBun = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isBun"];
const isDeno = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isDeno"];
const isNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNodeLike"];
const isNodeLike = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNodeLike"];
const isNodeRuntime = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNodeRuntime"];
const isReactNative = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isReactNative"];
const isWebWorker = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$checkEnvironment$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isWebWorker"];
function uint8ArrayToString(bytes, format) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$bytesEncoding$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uint8ArrayToString"])(bytes, format);
}
function stringToUint8Array(value, format) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$bytesEncoding$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["stringToUint8Array"])(value, format);
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$aborterUtils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/aborterUtils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$createAbortablePromise$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/createAbortablePromise.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$delay$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/delay.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/error.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$typeGuards$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/typeGuards.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/abort-controller/dist/esm/AbortError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * ```ts
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 * ```
 */ __turbopack_context__.s({
    "AbortError": (()=>AbortError)
});
class AbortError extends Error {
    constructor(message){
        super(message);
        this.name = "AbortError";
    }
} //# sourceMappingURL=AbortError.js.map
}}),
"[project]/node_modules/@azure/abort-controller/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$AbortError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/AbortError.js [app-route] (ecmascript)"); //# sourceMappingURL=index.js.map
;
}}),
"[project]/node_modules/@azure/abort-controller/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$AbortError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/AbortError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$abort$2d$controller$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/abort-controller/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createEmptyPipeline": (()=>createEmptyPipeline)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/pipeline.js [app-route] (ecmascript)");
;
function createEmptyPipeline() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createEmptyPipeline"])();
} //# sourceMappingURL=pipeline.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/log.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "logger": (()=>logger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/logger/dist/esm/index.js [app-route] (ecmascript)");
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createClientLogger"])("core-rest-pipeline"); //# sourceMappingURL=log.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "logPolicy": (()=>logPolicy),
    "logPolicyName": (()=>logPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/log.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/logPolicy.js [app-route] (ecmascript)");
;
;
const logPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logPolicyName"];
function logPolicy(options = {}) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logPolicy"])(Object.assign({
        logger: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"].info
    }, options));
} //# sourceMappingURL=logPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "redirectPolicy": (()=>redirectPolicy),
    "redirectPolicyName": (()=>redirectPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/redirectPolicy.js [app-route] (ecmascript)");
;
const redirectPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["redirectPolicyName"];
function redirectPolicy(options = {}) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["redirectPolicy"])(options);
} //# sourceMappingURL=redirectPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getHeaderName": (()=>getHeaderName),
    "setPlatformSpecificData": (()=>setPlatformSpecificData)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:os [external] (node:os, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:process [external] (node:process, cjs)");
;
;
function getHeaderName() {
    return "User-Agent";
}
async function setPlatformSpecificData(map) {
    if (__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__ && __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__.versions) {
        const versions = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$process__$5b$external$5d$__$28$node$3a$process$2c$__cjs$29$__.versions;
        if (versions.bun) {
            map.set("Bun", versions.bun);
        } else if (versions.deno) {
            map.set("Deno", versions.deno);
        } else if (versions.node) {
            map.set("Node", versions.node);
        }
    }
    map.set("OS", `(${(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__["arch"])()}-${(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__["type"])()}-${(0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$os__$5b$external$5d$__$28$node$3a$os$2c$__cjs$29$__["release"])()})`);
} //# sourceMappingURL=userAgentPlatform.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/constants.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "DEFAULT_RETRY_POLICY_COUNT": (()=>DEFAULT_RETRY_POLICY_COUNT),
    "SDK_VERSION": (()=>SDK_VERSION)
});
const SDK_VERSION = "1.20.0";
const DEFAULT_RETRY_POLICY_COUNT = 3; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getUserAgentHeaderName": (()=>getUserAgentHeaderName),
    "getUserAgentValue": (()=>getUserAgentValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgentPlatform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/constants.js [app-route] (ecmascript)");
;
;
function getUserAgentString(telemetryInfo) {
    const parts = [];
    for (const [key, value] of telemetryInfo){
        const token = value ? `${key}/${value}` : key;
        parts.push(token);
    }
    return parts.join(" ");
}
function getUserAgentHeaderName() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgentPlatform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getHeaderName"])();
}
async function getUserAgentValue(prefix) {
    const runtimeInfo = new Map();
    runtimeInfo.set("core-rest-pipeline", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SDK_VERSION"]);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgentPlatform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setPlatformSpecificData"])(runtimeInfo);
    const defaultAgent = getUserAgentString(runtimeInfo);
    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;
    return userAgentValue;
} //# sourceMappingURL=userAgent.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "userAgentPolicy": (()=>userAgentPolicy),
    "userAgentPolicyName": (()=>userAgentPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgent$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js [app-route] (ecmascript)");
;
const UserAgentHeaderName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgent$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getUserAgentHeaderName"])();
const userAgentPolicyName = "userAgentPolicy";
function userAgentPolicy(options = {}) {
    const userAgentValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgent$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getUserAgentValue"])(options.userAgentPrefix);
    return {
        name: userAgentPolicyName,
        async sendRequest (request, next) {
            if (!request.headers.has(UserAgentHeaderName)) {
                request.headers.set(UserAgentHeaderName, await userAgentValue);
            }
            return next(request);
        }
    };
} //# sourceMappingURL=userAgentPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createFile": (()=>createFile),
    "createFileFromStream": (()=>createFileFromStream),
    "getRawContent": (()=>getRawContent),
    "hasRawContent": (()=>hasRawContent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <locals>");
;
function isNodeReadableStream(x) {
    return Boolean(x && typeof x["pipe"] === "function");
}
const unimplementedMethods = {
    arrayBuffer: ()=>{
        throw new Error("Not implemented");
    },
    bytes: ()=>{
        throw new Error("Not implemented");
    },
    slice: ()=>{
        throw new Error("Not implemented");
    },
    text: ()=>{
        throw new Error("Not implemented");
    }
};
/**
 * Private symbol used as key on objects created using createFile containing the
 * original source of the file object.
 *
 * This is used in Node to access the original Node stream without using Blob#stream, which
 * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and
 * Readable#to/fromWeb in Node versions we support:
 * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)
 * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)
 *
 * Once these versions are no longer supported, we may be able to stop doing this.
 *
 * @internal
 */ const rawContent = Symbol("rawContent");
function hasRawContent(x) {
    return typeof x[rawContent] === "function";
}
function getRawContent(blob) {
    if (hasRawContent(blob)) {
        return blob[rawContent]();
    } else {
        return blob;
    }
}
function createFileFromStream(stream, name, options = {}) {
    var _a, _b, _c, _d;
    return Object.assign(Object.assign({}, unimplementedMethods), {
        type: (_a = options.type) !== null && _a !== void 0 ? _a : "",
        lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),
        webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : "",
        size: (_d = options.size) !== null && _d !== void 0 ? _d : -1,
        name,
        stream: ()=>{
            const s = stream();
            if (isNodeReadableStream(s)) {
                throw new Error("Not supported: a Node stream was provided as input to createFileFromStream.");
            }
            return s;
        },
        [rawContent]: stream
    });
}
function createFile(content, name, options = {}) {
    var _a, _b, _c;
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNodeLike"]) {
        return Object.assign(Object.assign({}, unimplementedMethods), {
            type: (_a = options.type) !== null && _a !== void 0 ? _a : "",
            lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),
            webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : "",
            size: content.byteLength,
            name,
            arrayBuffer: async ()=>content.buffer,
            stream: ()=>new Blob([
                    content
                ]).stream(),
            [rawContent]: ()=>content
        });
    } else {
        return new File([
            content
        ], name, options);
    }
} //# sourceMappingURL=file.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "multipartPolicy": (()=>multipartPolicy),
    "multipartPolicyName": (()=>multipartPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/multipartPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$file$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js [app-route] (ecmascript)");
;
;
const multipartPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["multipartPolicyName"];
function multipartPolicy() {
    const tspPolicy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["multipartPolicy"])();
    return {
        name: multipartPolicyName,
        sendRequest: async (request, next)=>{
            if (request.multipartBody) {
                for (const part of request.multipartBody.parts){
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$file$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["hasRawContent"])(part.body)) {
                        part.body = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$file$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getRawContent"])(part.body);
                    }
                }
            }
            return tspPolicy.sendRequest(request, next);
        }
    };
} //# sourceMappingURL=multipartPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "decompressResponsePolicy": (()=>decompressResponsePolicy),
    "decompressResponsePolicyName": (()=>decompressResponsePolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/decompressResponsePolicy.js [app-route] (ecmascript)");
;
const decompressResponsePolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decompressResponsePolicyName"];
function decompressResponsePolicy() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decompressResponsePolicy"])();
} //# sourceMappingURL=decompressResponsePolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "defaultRetryPolicy": (()=>defaultRetryPolicy),
    "defaultRetryPolicyName": (()=>defaultRetryPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/defaultRetryPolicy.js [app-route] (ecmascript)");
;
const defaultRetryPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defaultRetryPolicyName"];
function defaultRetryPolicy(options = {}) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defaultRetryPolicy"])(options);
} //# sourceMappingURL=defaultRetryPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "formDataPolicy": (()=>formDataPolicy),
    "formDataPolicyName": (()=>formDataPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/formDataPolicy.js [app-route] (ecmascript)");
;
const formDataPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["formDataPolicyName"];
function formDataPolicy() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["formDataPolicy"])();
} //# sourceMappingURL=formDataPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getDefaultProxySettings": (()=>getDefaultProxySettings),
    "proxyPolicy": (()=>proxyPolicy),
    "proxyPolicyName": (()=>proxyPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/proxyPolicy.js [app-route] (ecmascript)");
;
const proxyPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["proxyPolicyName"];
function getDefaultProxySettings(proxyUrl) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getDefaultProxySettings"])(proxyUrl);
}
function proxyPolicy(proxySettings, options) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["proxyPolicy"])(proxySettings, options);
} //# sourceMappingURL=proxyPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * The programmatic identifier of the setClientRequestIdPolicy.
 */ __turbopack_context__.s({
    "setClientRequestIdPolicy": (()=>setClientRequestIdPolicy),
    "setClientRequestIdPolicyName": (()=>setClientRequestIdPolicyName)
});
const setClientRequestIdPolicyName = "setClientRequestIdPolicy";
function setClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
    return {
        name: setClientRequestIdPolicyName,
        async sendRequest (request, next) {
            if (!request.headers.has(requestIdHeaderName)) {
                request.headers.set(requestIdHeaderName, request.requestId);
            }
            return next(request);
        }
    };
} //# sourceMappingURL=setClientRequestIdPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "agentPolicy": (()=>agentPolicy),
    "agentPolicyName": (()=>agentPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/agentPolicy.js [app-route] (ecmascript)");
;
const agentPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["agentPolicyName"];
function agentPolicy(agent) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["agentPolicy"])(agent);
} //# sourceMappingURL=agentPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "tlsPolicy": (()=>tlsPolicy),
    "tlsPolicyName": (()=>tlsPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/tlsPolicy.js [app-route] (ecmascript)");
;
const tlsPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["tlsPolicyName"];
function tlsPolicy(tlsSettings) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["tlsPolicy"])(tlsSettings);
} //# sourceMappingURL=tlsPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "RestError": (()=>RestError),
    "isRestError": (()=>isRestError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/restError.js [app-route] (ecmascript)");
;
class RestError extends Error {
    constructor(message, options = {}){
        super(message);
        // what is this??
        // it turns out that you can return from a constructor and it causes
        // calling `new` to return the value you return.
        // this lets us wrap the TypeSpec RestError so that calling this constructor will give you the same type of object as calling the TypeSpec one,
        // even though the constructor signatures (through RestErrorOptions) are slightly different.
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RestError"](message, options);
    }
}
/**
 * Something went wrong when making the request.
 * This means the actual request failed for some reason,
 * such as a DNS issue or the connection being lost.
 */ RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
/**
 * This means that parsing the response from the server failed.
 * It may have been malformed.
 */ RestError.PARSE_ERROR = "PARSE_ERROR";
function isRestError(e) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRestError"])(e);
} //# sourceMappingURL=restError.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "tracingPolicy": (()=>tracingPolicy),
    "tracingPolicyName": (()=>tracingPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/tracingClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/constants.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgent$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/log.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/error.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$sanitizer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/util/sanitizer.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
const tracingPolicyName = "tracingPolicy";
function tracingPolicy(options = {}) {
    const userAgentPromise = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$userAgent$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getUserAgentValue"])(options.userAgentPrefix);
    const sanitizer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$util$2f$sanitizer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Sanitizer"]({
        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
    });
    const tracingClient = tryCreateTracingClient();
    return {
        name: tracingPolicyName,
        async sendRequest (request, next) {
            var _a;
            if (!tracingClient) {
                return next(request);
            }
            const userAgent = await userAgentPromise;
            const spanAttributes = {
                "http.url": sanitizer.sanitizeUrl(request.url),
                "http.method": request.method,
                "http.user_agent": userAgent,
                requestId: request.requestId
            };
            if (userAgent) {
                spanAttributes["http.user_agent"] = userAgent;
            }
            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};
            if (!span || !tracingContext) {
                return next(request);
            }
            try {
                const response = await tracingClient.withContext(tracingContext, next, request);
                tryProcessResponse(span, response);
                return response;
            } catch (err) {
                tryProcessError(span, err);
                throw err;
            }
        }
    };
}
function tryCreateTracingClient() {
    try {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createTracingClient"])({
            namespace: "",
            packageName: "@azure/core-rest-pipeline",
            packageVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SDK_VERSION"]
        });
    } catch (e) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"].warning(`Error when creating the TracingClient: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getErrorMessage"])(e)}`);
        return undefined;
    }
}
function tryCreateSpan(tracingClient, request, spanAttributes) {
    try {
        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.
        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, {
            tracingOptions: request.tracingOptions
        }, {
            spanKind: "client",
            spanAttributes
        });
        // If the span is not recording, don't do any more work.
        if (!span.isRecording()) {
            span.end();
            return undefined;
        }
        // set headers
        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);
        for (const [key, value] of Object.entries(headers)){
            request.headers.set(key, value);
        }
        return {
            span,
            tracingContext: updatedOptions.tracingOptions.tracingContext
        };
    } catch (e) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"].warning(`Skipping creating a tracing span due to an error: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getErrorMessage"])(e)}`);
        return undefined;
    }
}
function tryProcessError(span, error) {
    try {
        span.setStatus({
            status: "error",
            error: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isError"])(error) ? error : undefined
        });
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRestError"])(error) && error.statusCode) {
            span.setAttribute("http.status_code", error.statusCode);
        }
        span.end();
    } catch (e) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"].warning(`Skipping tracing span processing due to an error: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getErrorMessage"])(e)}`);
    }
}
function tryProcessResponse(span, response) {
    try {
        span.setAttribute("http.status_code", response.status);
        const serviceRequestId = response.headers.get("x-ms-request-id");
        if (serviceRequestId) {
            span.setAttribute("serviceRequestId", serviceRequestId);
        }
        // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.
        // Otherwise, the status MUST remain unset.
        // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status
        if (response.status >= 400) {
            span.setStatus({
                status: "error"
            });
        }
        span.end();
    } catch (e) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"].warning(`Skipping tracing span processing due to an error: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$error$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getErrorMessage"])(e)}`);
    }
} //# sourceMappingURL=tracingPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.
 * If the AbortSignalLike is already a native AbortSignal, it is returned as is.
 * @param abortSignalLike - The AbortSignalLike to wrap.
 * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.
 */ __turbopack_context__.s({
    "wrapAbortSignalLike": (()=>wrapAbortSignalLike)
});
function wrapAbortSignalLike(abortSignalLike) {
    if (abortSignalLike instanceof AbortSignal) {
        return {
            abortSignal: abortSignalLike
        };
    }
    if (abortSignalLike.aborted) {
        return {
            abortSignal: AbortSignal.abort(abortSignalLike.reason)
        };
    }
    const controller = new AbortController();
    let needsCleanup = true;
    function cleanup() {
        if (needsCleanup) {
            abortSignalLike.removeEventListener("abort", listener);
            needsCleanup = false;
        }
    }
    function listener() {
        controller.abort(abortSignalLike.reason);
        cleanup();
    }
    abortSignalLike.addEventListener("abort", listener);
    return {
        abortSignal: controller.signal,
        cleanup
    };
} //# sourceMappingURL=wrapAbortSignal.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/wrapAbortSignalLikePolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "wrapAbortSignalLikePolicy": (()=>wrapAbortSignalLikePolicy),
    "wrapAbortSignalLikePolicyName": (()=>wrapAbortSignalLikePolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$wrapAbortSignal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js [app-route] (ecmascript)");
;
const wrapAbortSignalLikePolicyName = "wrapAbortSignalLikePolicy";
function wrapAbortSignalLikePolicy() {
    return {
        name: wrapAbortSignalLikePolicyName,
        sendRequest: async (request, next)=>{
            if (!request.abortSignal) {
                return next(request);
            }
            const { abortSignal, cleanup } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$wrapAbortSignal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["wrapAbortSignalLike"])(request.abortSignal);
            // eslint-disable-next-line no-param-reassign
            request.abortSignal = abortSignal;
            try {
                return await next(request);
            } finally{
                cleanup === null || cleanup === void 0 ? void 0 : cleanup();
            }
        }
    };
} //# sourceMappingURL=wrapAbortSignalLikePolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createPipelineFromOptions": (()=>createPipelineFromOptions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$userAgentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$setClientRequestIdPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tracingPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$wrapAbortSignalLikePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/wrapAbortSignalLikePolicy.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function createPipelineFromOptions(options) {
    var _a;
    const pipeline = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createEmptyPipeline"])();
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNodeLike"]) {
        if (options.agent) {
            pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["agentPolicy"])(options.agent));
        }
        if (options.tlsOptions) {
            pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["tlsPolicy"])(options.tlsOptions));
        }
        pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["proxyPolicy"])(options.proxyOptions));
        pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decompressResponsePolicy"])());
    }
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$wrapAbortSignalLikePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["wrapAbortSignalLikePolicy"])());
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["formDataPolicy"])(), {
        beforePolicies: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["multipartPolicyName"]
        ]
    });
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$userAgentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["userAgentPolicy"])(options.userAgentOptions));
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$setClientRequestIdPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setClientRequestIdPolicy"])((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));
    // The multipart policy is added after policies with no phase, so that
    // policies can be added between it and formDataPolicy to modify
    // properties (e.g., making the boundary constant in recorded tests).
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["multipartPolicy"])(), {
        afterPhase: "Deserialize"
    });
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defaultRetryPolicy"])(options.retryOptions), {
        phase: "Retry"
    });
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tracingPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["tracingPolicy"])(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {
        afterPhase: "Retry"
    });
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNodeLike"]) {
        // Both XHR and Fetch expect to handle redirects automatically,
        // so only include this policy when we're in Node.
        pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["redirectPolicy"])(options.redirectOptions), {
            afterPhase: "Retry"
        });
    }
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logPolicy"])(options.loggingOptions), {
        afterPhase: "Sign"
    });
    return pipeline;
} //# sourceMappingURL=createPipelineFromOptions.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createDefaultHttpClient": (()=>createDefaultHttpClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$defaultHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/defaultHttpClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$wrapAbortSignal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js [app-route] (ecmascript)");
;
;
function createDefaultHttpClient() {
    const client = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$defaultHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createDefaultHttpClient"])();
    return {
        async sendRequest (request) {
            // we wrap any AbortSignalLike here since the TypeSpec runtime expects a native AbortSignal.
            // 99% of the time, this should be a no-op since a native AbortSignal is passed in.
            const { abortSignal, cleanup } = request.abortSignal ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$wrapAbortSignal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["wrapAbortSignalLike"])(request.abortSignal) : {};
            try {
                // eslint-disable-next-line no-param-reassign
                request.abortSignal = abortSignal;
                return await client.sendRequest(request);
            } finally{
                cleanup === null || cleanup === void 0 ? void 0 : cleanup();
            }
        }
    };
} //# sourceMappingURL=defaultHttpClient.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createHttpHeaders": (()=>createHttpHeaders)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/httpHeaders.js [app-route] (ecmascript)");
;
function createHttpHeaders(rawHeaders) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createHttpHeaders"])(rawHeaders);
} //# sourceMappingURL=httpHeaders.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createPipelineRequest": (()=>createPipelineRequest)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/pipelineRequest.js [app-route] (ecmascript)");
;
function createPipelineRequest(options) {
    // Cast required due to difference between ts-http-runtime requiring AbortSignal while core-rest-pipeline allows
    // the more generic AbortSignalLike. The wrapAbortSignalLike pipeline policy will take care of ensuring that any AbortSignalLike in the request
    // is converted into a true AbortSignal.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createPipelineRequest"])(options);
} //# sourceMappingURL=pipelineRequest.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "exponentialRetryPolicy": (()=>exponentialRetryPolicy),
    "exponentialRetryPolicyName": (()=>exponentialRetryPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$exponentialRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/exponentialRetryPolicy.js [app-route] (ecmascript)");
;
const exponentialRetryPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$exponentialRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["exponentialRetryPolicyName"];
function exponentialRetryPolicy(options = {}) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$exponentialRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["exponentialRetryPolicy"])(options);
} //# sourceMappingURL=exponentialRetryPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "systemErrorRetryPolicy": (()=>systemErrorRetryPolicy),
    "systemErrorRetryPolicyName": (()=>systemErrorRetryPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$systemErrorRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/systemErrorRetryPolicy.js [app-route] (ecmascript)");
;
const systemErrorRetryPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$systemErrorRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["systemErrorRetryPolicyName"];
function systemErrorRetryPolicy(options = {}) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$systemErrorRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["systemErrorRetryPolicy"])(options);
} //# sourceMappingURL=systemErrorRetryPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "throttlingRetryPolicy": (()=>throttlingRetryPolicy),
    "throttlingRetryPolicyName": (()=>throttlingRetryPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$throttlingRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/throttlingRetryPolicy.js [app-route] (ecmascript)");
;
const throttlingRetryPolicyName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$throttlingRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["throttlingRetryPolicyName"];
function throttlingRetryPolicy(options = {}) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$throttlingRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["throttlingRetryPolicy"])(options);
} //# sourceMappingURL=throttlingRetryPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "retryPolicy": (()=>retryPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/logger/dist/esm/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/constants.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$retryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/policies/retryPolicy.js [app-route] (ecmascript)");
;
;
;
const retryPolicyLogger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createClientLogger"])("core-rest-pipeline retryPolicy");
function retryPolicy(strategies, options = {
    maxRetries: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_RETRY_POLICY_COUNT"]
}) {
    // Cast is required since the TSP runtime retry strategy type is slightly different
    // very deep down (using real AbortSignal vs. AbortSignalLike in RestError).
    // In practice the difference doesn't actually matter.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$policies$2f$retryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["retryPolicy"])(strategies, Object.assign({
        logger: retryPolicyLogger
    }, options));
} //# sourceMappingURL=retryPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "DEFAULT_CYCLER_OPTIONS": (()=>DEFAULT_CYCLER_OPTIONS),
    "createTokenCycler": (()=>createTokenCycler)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$delay$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-util/dist/esm/delay.js [app-route] (ecmascript)");
;
const DEFAULT_CYCLER_OPTIONS = {
    forcedRefreshWindowInMs: 1000,
    retryIntervalInMs: 3000,
    refreshWindowInMs: 1000 * 60 * 2
};
/**
 * Converts an an unreliable access token getter (which may resolve with null)
 * into an AccessTokenGetter by retrying the unreliable getter in a regular
 * interval.
 *
 * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.
 * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.
 * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.
 * @returns - A promise that, if it resolves, will resolve with an access token.
 */ async function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {
    // This wrapper handles exceptions gracefully as long as we haven't exceeded
    // the timeout.
    async function tryGetAccessToken() {
        if (Date.now() < refreshTimeout) {
            try {
                return await getAccessToken();
            } catch (_a) {
                return null;
            }
        } else {
            const finalToken = await getAccessToken();
            // Timeout is up, so throw if it's still null
            if (finalToken === null) {
                throw new Error("Failed to refresh access token.");
            }
            return finalToken;
        }
    }
    let token = await tryGetAccessToken();
    while(token === null){
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$util$2f$dist$2f$esm$2f$delay$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["delay"])(retryIntervalInMs);
        token = await tryGetAccessToken();
    }
    return token;
}
function createTokenCycler(credential, tokenCyclerOptions) {
    let refreshWorker = null;
    let token = null;
    let tenantId;
    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
    /**
     * This little holder defines several predicates that we use to construct
     * the rules of refreshing the token.
     */ const cycler = {
        /**
         * Produces true if a refresh job is currently in progress.
         */ get isRefreshing () {
            return refreshWorker !== null;
        },
        /**
         * Produces true if the cycler SHOULD refresh (we are within the refresh
         * window and not already refreshing)
         */ get shouldRefresh () {
            var _a;
            if (cycler.isRefreshing) {
                return false;
            }
            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {
                return true;
            }
            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
        },
        /**
         * Produces true if the cycler MUST refresh (null or nearly-expired
         * token).
         */ get mustRefresh () {
            return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
        }
    };
    /**
     * Starts a refresh job or returns the existing job if one is already
     * running.
     */ function refresh(scopes, getTokenOptions) {
        var _a;
        if (!cycler.isRefreshing) {
            // We bind `scopes` here to avoid passing it around a lot
            const tryGetAccessToken = ()=>credential.getToken(scopes, getTokenOptions);
            // Take advantage of promise chaining to insert an assignment to `token`
            // before the refresh can be considered done.
            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately
            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then((_token)=>{
                refreshWorker = null;
                token = _token;
                tenantId = getTokenOptions.tenantId;
                return token;
            }).catch((reason)=>{
                // We also should reset the refresher if we enter a failed state.  All
                // existing awaiters will throw, but subsequent requests will start a
                // new retry chain.
                refreshWorker = null;
                token = null;
                tenantId = undefined;
                throw reason;
            });
        }
        return refreshWorker;
    }
    return async (scopes, tokenOptions)=>{
        //
        // Simple rules:
        // - If we MUST refresh, then return the refresh task, blocking
        //   the pipeline until a token is available.
        // - If we SHOULD refresh, then run refresh but don't return it
        //   (we can still use the cached token).
        // - Return the token, since it's fine if we didn't return in
        //   step 1.
        //
        const hasClaimChallenge = Boolean(tokenOptions.claims);
        const tenantIdChanged = tenantId !== tokenOptions.tenantId;
        if (hasClaimChallenge) {
            // If we've received a claim, we know the existing token isn't valid
            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout
            token = null;
        }
        // If the tenantId passed in token options is different to the one we have
        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to
        // refresh the token with the new tenantId or token.
        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;
        if (mustRefresh) {
            return refresh(scopes, tokenOptions);
        }
        if (cycler.shouldRefresh) {
            refresh(scopes, tokenOptions);
        }
        return token;
    };
} //# sourceMappingURL=tokenCycler.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "bearerTokenAuthenticationPolicy": (()=>bearerTokenAuthenticationPolicy),
    "bearerTokenAuthenticationPolicyName": (()=>bearerTokenAuthenticationPolicyName),
    "parseChallenges": (()=>parseChallenges)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$tokenCycler$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/log.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js [app-route] (ecmascript)");
;
;
;
const bearerTokenAuthenticationPolicyName = "bearerTokenAuthenticationPolicy";
/**
 * Try to send the given request.
 *
 * When a response is received, returns a tuple of the response received and, if the response was received
 * inside a thrown RestError, the RestError that was thrown.
 *
 * Otherwise, if an error was thrown while sending the request that did not provide an underlying response, it
 * will be rethrown.
 */ async function trySendRequest(request, next) {
    try {
        return [
            await next(request),
            undefined
        ];
    } catch (e) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRestError"])(e) && e.response) {
            return [
                e.response,
                e
            ];
        } else {
            throw e;
        }
    }
}
/**
 * Default authorize request handler
 */ async function defaultAuthorizeRequest(options) {
    const { scopes, getAccessToken, request } = options;
    // Enable CAE true by default
    const getTokenOptions = {
        abortSignal: request.abortSignal,
        tracingOptions: request.tracingOptions,
        enableCae: true
    };
    const accessToken = await getAccessToken(scopes, getTokenOptions);
    if (accessToken) {
        options.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
    }
}
/**
 * We will retrieve the challenge only if the response status code was 401,
 * and if the response contained the header "WWW-Authenticate" with a non-empty value.
 */ function isChallengeResponse(response) {
    return response.status === 401 && response.headers.has("WWW-Authenticate");
}
/**
 * Re-authorize the request for CAE challenge.
 * The response containing the challenge is `options.response`.
 * If this method returns true, the underlying request will be sent once again.
 */ async function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {
    var _a;
    const { scopes } = onChallengeOptions;
    const accessToken = await onChallengeOptions.getAccessToken(scopes, {
        enableCae: true,
        claims: caeClaims
    });
    if (!accessToken) {
        return false;
    }
    onChallengeOptions.request.headers.set("Authorization", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : "Bearer"} ${accessToken.token}`);
    return true;
}
function bearerTokenAuthenticationPolicy(options) {
    var _a, _b, _c;
    const { credential, scopes, challengeCallbacks } = options;
    const logger = options.logger || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"];
    const callbacks = {
        authorizeRequest: (_b = (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a === void 0 ? void 0 : _a.bind(challengeCallbacks)) !== null && _b !== void 0 ? _b : defaultAuthorizeRequest,
        authorizeRequestOnChallenge: (_c = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c === void 0 ? void 0 : _c.bind(challengeCallbacks)
    };
    // This function encapsulates the entire process of reliably retrieving the token
    // The options are left out of the public API until there's demand to configure this.
    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`
    // in order to pass through the `options` object.
    const getAccessToken = credential ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$tokenCycler$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createTokenCycler"])(credential /* , options */ ) : ()=>Promise.resolve(null);
    return {
        name: bearerTokenAuthenticationPolicyName,
        /**
         * If there's no challenge parameter:
         * - It will try to retrieve the token using the cache, or the credential's getToken.
         * - Then it will try the next policy with or without the retrieved token.
         *
         * It uses the challenge parameters to:
         * - Skip a first attempt to get the token from the credential if there's no cached token,
         *   since it expects the token to be retrievable only after the challenge.
         * - Prepare the outgoing request if the `prepareRequest` method has been provided.
         * - Send an initial request to receive the challenge if it fails.
         * - Process a challenge if the response contains it.
         * - Retrieve a token with the challenge information, then re-send the request.
         */ async sendRequest (request, next) {
            if (!request.url.toLowerCase().startsWith("https://")) {
                throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
            }
            await callbacks.authorizeRequest({
                scopes: Array.isArray(scopes) ? scopes : [
                    scopes
                ],
                request,
                getAccessToken,
                logger
            });
            let response;
            let error;
            let shouldSendRequest;
            [response, error] = await trySendRequest(request, next);
            if (isChallengeResponse(response)) {
                let claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
                // Handle CAE by default when receive CAE claim
                if (claims) {
                    let parsedClaim;
                    // Return the response immediately if claims is not a valid base64 encoded string
                    try {
                        parsedClaim = atob(claims);
                    } catch (e) {
                        logger.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);
                        return response;
                    }
                    shouldSendRequest = await authorizeRequestOnCaeChallenge({
                        scopes: Array.isArray(scopes) ? scopes : [
                            scopes
                        ],
                        response,
                        request,
                        getAccessToken,
                        logger
                    }, parsedClaim);
                    // Send updated request and handle response for RestError
                    if (shouldSendRequest) {
                        [response, error] = await trySendRequest(request, next);
                    }
                } else if (callbacks.authorizeRequestOnChallenge) {
                    // Handle custom challenges when client provides custom callback
                    shouldSendRequest = await callbacks.authorizeRequestOnChallenge({
                        scopes: Array.isArray(scopes) ? scopes : [
                            scopes
                        ],
                        request,
                        response,
                        getAccessToken,
                        logger
                    });
                    // Send updated request and handle response for RestError
                    if (shouldSendRequest) {
                        [response, error] = await trySendRequest(request, next);
                    }
                    // If we get another CAE Claim, we will handle it by default and return whatever value we receive for this
                    if (isChallengeResponse(response)) {
                        claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
                        if (claims) {
                            let parsedClaim;
                            try {
                                parsedClaim = atob(claims);
                            } catch (e) {
                                logger.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);
                                return response;
                            }
                            shouldSendRequest = await authorizeRequestOnCaeChallenge({
                                scopes: Array.isArray(scopes) ? scopes : [
                                    scopes
                                ],
                                response,
                                request,
                                getAccessToken,
                                logger
                            }, parsedClaim);
                            // Send updated request and handle response for RestError
                            if (shouldSendRequest) {
                                [response, error] = await trySendRequest(request, next);
                            }
                        }
                    }
                }
            }
            if (error) {
                throw error;
            } else {
                return response;
            }
        }
    };
}
function parseChallenges(challenges) {
    // Challenge regex seperates the string to individual challenges with different schemes in the format `Scheme a="b", c=d`
    // The challenge regex captures parameteres with either quotes values or unquoted values
    const challengeRegex = /(\w+)\s+((?:\w+=(?:"[^"]*"|[^,]*),?\s*)+)/g;
    // Parameter regex captures the claims group removed from the scheme in the format `a="b"` and `c="d"`
    // CAE challenge always have quoted parameters. For more reference, https://learn.microsoft.com/entra/identity-platform/claims-challenge
    const paramRegex = /(\w+)="([^"]*)"/g;
    const parsedChallenges = [];
    let match;
    // Iterate over each challenge match
    while((match = challengeRegex.exec(challenges)) !== null){
        const scheme = match[1];
        const paramsString = match[2];
        const params = {};
        let paramMatch;
        // Iterate over each parameter match
        while((paramMatch = paramRegex.exec(paramsString)) !== null){
            params[paramMatch[1]] = paramMatch[2];
        }
        parsedChallenges.push({
            scheme,
            params
        });
    }
    return parsedChallenges;
}
/**
 * Parse a pipeline response and look for a CAE challenge with "Bearer" scheme
 * Return the value in the header without parsing the challenge
 * @internal
 */ function getCaeChallengeClaims(challenges) {
    var _a;
    if (!challenges) {
        return;
    }
    // Find all challenges present in the header
    const parsedChallenges = parseChallenges(challenges);
    return (_a = parsedChallenges.find((x)=>x.scheme === "Bearer" && x.params.claims && x.params.error === "insufficient_claims")) === null || _a === void 0 ? void 0 : _a.params.claims;
} //# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * The programmatic identifier of the ndJsonPolicy.
 */ __turbopack_context__.s({
    "ndJsonPolicy": (()=>ndJsonPolicy),
    "ndJsonPolicyName": (()=>ndJsonPolicyName)
});
const ndJsonPolicyName = "ndJsonPolicy";
function ndJsonPolicy() {
    return {
        name: ndJsonPolicyName,
        async sendRequest (request, next) {
            // There currently isn't a good way to bypass the serializer
            if (typeof request.body === "string" && request.body.startsWith("[")) {
                const body = JSON.parse(request.body);
                if (Array.isArray(body)) {
                    request.body = body.map((item)=>JSON.stringify(item) + "\n").join("");
                }
            }
            return next(request);
        }
    };
} //# sourceMappingURL=ndJsonPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "auxiliaryAuthenticationHeaderPolicy": (()=>auxiliaryAuthenticationHeaderPolicy),
    "auxiliaryAuthenticationHeaderPolicyName": (()=>auxiliaryAuthenticationHeaderPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$tokenCycler$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/log.js [app-route] (ecmascript)");
;
;
const auxiliaryAuthenticationHeaderPolicyName = "auxiliaryAuthenticationHeaderPolicy";
const AUTHORIZATION_AUXILIARY_HEADER = "x-ms-authorization-auxiliary";
async function sendAuthorizeRequest(options) {
    var _a, _b;
    const { scopes, getAccessToken, request } = options;
    const getTokenOptions = {
        abortSignal: request.abortSignal,
        tracingOptions: request.tracingOptions
    };
    return (_b = (_a = await getAccessToken(scopes, getTokenOptions)) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : "";
}
function auxiliaryAuthenticationHeaderPolicy(options) {
    const { credentials, scopes } = options;
    const logger = options.logger || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"];
    const tokenCyclerMap = new WeakMap();
    return {
        name: auxiliaryAuthenticationHeaderPolicyName,
        async sendRequest (request, next) {
            if (!request.url.toLowerCase().startsWith("https://")) {
                throw new Error("Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.");
            }
            if (!credentials || credentials.length === 0) {
                logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);
                return next(request);
            }
            const tokenPromises = [];
            for (const credential of credentials){
                let getAccessToken = tokenCyclerMap.get(credential);
                if (!getAccessToken) {
                    getAccessToken = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$tokenCycler$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createTokenCycler"])(credential);
                    tokenCyclerMap.set(credential, getAccessToken);
                }
                tokenPromises.push(sendAuthorizeRequest({
                    scopes: Array.isArray(scopes) ? scopes : [
                        scopes
                    ],
                    request,
                    getAccessToken,
                    logger
                }));
            }
            const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token)=>Boolean(token));
            if (auxiliaryTokens.length === 0) {
                logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);
                return next(request);
            }
            request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map((token)=>`Bearer ${token}`).join(", "));
            return next(request);
        }
    };
} //# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$createPipelineFromOptions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$defaultHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$exponentialRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$setClientRequestIdPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$systemErrorRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$throttlingRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$retryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tracingPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$userAgentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$bearerTokenAuthenticationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$ndJsonPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$auxiliaryAuthenticationHeaderPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$file$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js [app-route] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$createPipelineFromOptions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$defaultHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$decompressResponsePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$exponentialRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$setClientRequestIdPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$logPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$multipartPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$proxyPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$systemErrorRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$throttlingRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$retryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tracingPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$defaultRetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$userAgentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$tlsPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$formDataPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$bearerTokenAuthenticationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$ndJsonPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$auxiliaryAuthenticationHeaderPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$agentPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$util$2f$file$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/logger/dist/esm/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "AzureLogger": (()=>AzureLogger),
    "createClientLogger": (()=>createClientLogger),
    "getLogLevel": (()=>getLogLevel),
    "setLogLevel": (()=>setLogLevel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$logger$2f$internal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/logger/internal.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$logger$2f$logger$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@typespec/ts-http-runtime/dist/esm/logger/logger.js [app-route] (ecmascript)");
;
const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$typespec$2f$ts$2d$http$2d$runtime$2f$dist$2f$esm$2f$logger$2f$logger$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createLoggerContext"])({
    logLevelEnvVarName: "AZURE_LOG_LEVEL",
    namespace: "azure"
});
const AzureLogger = context.logger;
function setLogLevel(level) {
    context.setLogLevel(level);
}
function getLogLevel() {
    return context.getLogLevel();
}
function createClientLogger(namespace) {
    return context.createClientLogger(namespace);
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@azure/core-tracing/dist/esm/tracingContext.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/** @internal */ __turbopack_context__.s({
    "TracingContextImpl": (()=>TracingContextImpl),
    "createTracingContext": (()=>createTracingContext),
    "knownContextKeys": (()=>knownContextKeys)
});
const knownContextKeys = {
    span: Symbol.for("@azure/core-tracing span"),
    namespace: Symbol.for("@azure/core-tracing namespace")
};
function createTracingContext(options = {}) {
    let context = new TracingContextImpl(options.parentContext);
    if (options.span) {
        context = context.setValue(knownContextKeys.span, options.span);
    }
    if (options.namespace) {
        context = context.setValue(knownContextKeys.namespace, options.namespace);
    }
    return context;
}
class TracingContextImpl {
    constructor(initialContext){
        this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : new Map();
    }
    setValue(key, value) {
        const newContext = new TracingContextImpl(this);
        newContext._contextMap.set(key, value);
        return newContext;
    }
    getValue(key) {
        return this._contextMap.get(key);
    }
    deleteValue(key) {
        const newContext = new TracingContextImpl(this);
        newContext._contextMap.delete(key);
        return newContext;
    }
} //# sourceMappingURL=tracingContext.js.map
}}),
"[project]/node_modules/@azure/core-tracing/dist/commonjs/state.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.state = void 0;
/**
 * @internal
 *
 * Holds the singleton instrumenter, to be shared across CJS and ESM imports.
 */ exports.state = {
    instrumenterImplementation: undefined
}; //# sourceMappingURL=state-cjs.cjs.map
}}),
"[project]/node_modules/@azure/core-tracing/dist/esm/state.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.
// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.
__turbopack_context__.s({
    "state": (()=>state)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$commonjs$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/commonjs/state.js [app-route] (ecmascript)");
;
const state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$commonjs$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"]; //# sourceMappingURL=state.js.map
}}),
"[project]/node_modules/@azure/core-tracing/dist/esm/instrumenter.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createDefaultInstrumenter": (()=>createDefaultInstrumenter),
    "createDefaultTracingSpan": (()=>createDefaultTracingSpan),
    "getInstrumenter": (()=>getInstrumenter),
    "useInstrumenter": (()=>useInstrumenter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingContext$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/tracingContext.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/state.js [app-route] (ecmascript)");
;
;
function createDefaultTracingSpan() {
    return {
        end: ()=>{
        // noop
        },
        isRecording: ()=>false,
        recordException: ()=>{
        // noop
        },
        setAttribute: ()=>{
        // noop
        },
        setStatus: ()=>{
        // noop
        },
        addEvent: ()=>{
        // noop
        }
    };
}
function createDefaultInstrumenter() {
    return {
        createRequestHeaders: ()=>{
            return {};
        },
        parseTraceparentHeader: ()=>{
            return undefined;
        },
        startSpan: (_name, spanOptions)=>{
            return {
                span: createDefaultTracingSpan(),
                tracingContext: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingContext$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createTracingContext"])({
                    parentContext: spanOptions.tracingContext
                })
            };
        },
        withContext (_context, callback, ...callbackArgs) {
            return callback(...callbackArgs);
        }
    };
}
function useInstrumenter(instrumenter) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"].instrumenterImplementation = instrumenter;
}
function getInstrumenter() {
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"].instrumenterImplementation) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"].instrumenterImplementation = createDefaultInstrumenter();
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"].instrumenterImplementation;
} //# sourceMappingURL=instrumenter.js.map
}}),
"[project]/node_modules/@azure/core-tracing/dist/esm/tracingClient.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createTracingClient": (()=>createTracingClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/instrumenter.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingContext$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/tracingContext.js [app-route] (ecmascript)");
;
;
function createTracingClient(options) {
    const { namespace, packageName, packageVersion } = options;
    function startSpan(name, operationOptions, spanOptions) {
        var _a;
        const startSpanResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getInstrumenter"])().startSpan(name, Object.assign(Object.assign({}, spanOptions), {
            packageName: packageName,
            packageVersion: packageVersion,
            tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext
        }));
        let tracingContext = startSpanResult.tracingContext;
        const span = startSpanResult.span;
        if (!tracingContext.getValue(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingContext$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["knownContextKeys"].namespace)) {
            tracingContext = tracingContext.setValue(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingContext$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["knownContextKeys"].namespace, namespace);
        }
        span.setAttribute("az.namespace", tracingContext.getValue(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingContext$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["knownContextKeys"].namespace));
        const updatedOptions = Object.assign({}, operationOptions, {
            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), {
                tracingContext
            })
        });
        return {
            span,
            updatedOptions
        };
    }
    async function withSpan(name, operationOptions, callback, spanOptions) {
        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);
        try {
            const result = await withContext(updatedOptions.tracingOptions.tracingContext, ()=>Promise.resolve(callback(updatedOptions, span)));
            span.setStatus({
                status: "success"
            });
            return result;
        } catch (err) {
            span.setStatus({
                status: "error",
                error: err
            });
            throw err;
        } finally{
            span.end();
        }
    }
    function withContext(context, callback, ...callbackArgs) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getInstrumenter"])().withContext(context, callback, ...callbackArgs);
    }
    /**
     * Parses a traceparent header value into a span identifier.
     *
     * @param traceparentHeader - The traceparent header to parse.
     * @returns An implementation-specific identifier for the span.
     */ function parseTraceparentHeader(traceparentHeader) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getInstrumenter"])().parseTraceparentHeader(traceparentHeader);
    }
    /**
     * Creates a set of request headers to propagate tracing information to a backend.
     *
     * @param tracingContext - The context containing the span to serialize.
     * @returns The set of headers to add to a request.
     */ function createRequestHeaders(tracingContext) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getInstrumenter"])().createRequestHeaders(tracingContext);
    }
    return {
        startSpan,
        withSpan,
        withContext,
        parseTraceparentHeader,
        createRequestHeaders
    };
} //# sourceMappingURL=tracingClient.js.map
}}),
"[project]/node_modules/@azure/core-tracing/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/instrumenter.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/tracingClient.js [app-route] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
}}),
"[project]/node_modules/@azure/core-tracing/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$instrumenter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/instrumenter.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$tracingClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/tracingClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$tracing$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-tracing/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createDisableKeepAlivePolicy": (()=>createDisableKeepAlivePolicy),
    "disableKeepAlivePolicyName": (()=>disableKeepAlivePolicyName),
    "pipelineContainsDisableKeepAlivePolicy": (()=>pipelineContainsDisableKeepAlivePolicy)
});
const disableKeepAlivePolicyName = "DisableKeepAlivePolicy";
function createDisableKeepAlivePolicy() {
    return {
        name: disableKeepAlivePolicyName,
        async sendRequest (request, next) {
            request.disableKeepAlive = true;
            return next(request);
        }
    };
}
function pipelineContainsDisableKeepAlivePolicy(pipeline) {
    return pipeline.getOrderedPolicies().some((policy)=>policy.name === disableKeepAlivePolicyName);
} //# sourceMappingURL=disableKeepAlivePolicy.js.map
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/util.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "HttpHeaders": (()=>HttpHeaders),
    "toHttpHeadersLike": (()=>toHttpHeadersLike),
    "toPipelineRequest": (()=>toPipelineRequest),
    "toWebResourceLike": (()=>toWebResourceLike)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-route] (ecmascript)");
;
// We use a custom symbol to cache a reference to the original request without
// exposing it on the public interface.
const originalRequestSymbol = Symbol("Original PipelineRequest");
// Symbol.for() will return the same symbol if it's already been created
// This particular one is used in core-client to handle the case of when a request is
// cloned but we need to retrieve the OperationSpec and OperationArguments from the
// original request.
const originalClientRequestSymbol = Symbol.for("@azure/core-client original request");
function toPipelineRequest(webResource, options = {}) {
    const compatWebResource = webResource;
    const request = compatWebResource[originalRequestSymbol];
    const headers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createHttpHeaders"])(webResource.headers.toJson({
        preserveCase: true
    }));
    if (request) {
        request.headers = headers;
        return request;
    } else {
        const newRequest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
            url: webResource.url,
            method: webResource.method,
            headers,
            withCredentials: webResource.withCredentials,
            timeout: webResource.timeout,
            requestId: webResource.requestId,
            abortSignal: webResource.abortSignal,
            body: webResource.body,
            formData: webResource.formData,
            disableKeepAlive: !!webResource.keepAlive,
            onDownloadProgress: webResource.onDownloadProgress,
            onUploadProgress: webResource.onUploadProgress,
            proxySettings: webResource.proxySettings,
            streamResponseStatusCodes: webResource.streamResponseStatusCodes,
            agent: webResource.agent,
            requestOverrides: webResource.requestOverrides
        });
        if (options.originalRequest) {
            newRequest[originalClientRequestSymbol] = options.originalRequest;
        }
        return newRequest;
    }
}
function toWebResourceLike(request, options) {
    var _a;
    const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;
    const webResource = {
        url: request.url,
        method: request.method,
        headers: toHttpHeadersLike(request.headers),
        withCredentials: request.withCredentials,
        timeout: request.timeout,
        requestId: request.headers.get("x-ms-client-request-id") || request.requestId,
        abortSignal: request.abortSignal,
        body: request.body,
        formData: request.formData,
        keepAlive: !!request.disableKeepAlive,
        onDownloadProgress: request.onDownloadProgress,
        onUploadProgress: request.onUploadProgress,
        proxySettings: request.proxySettings,
        streamResponseStatusCodes: request.streamResponseStatusCodes,
        agent: request.agent,
        requestOverrides: request.requestOverrides,
        clone () {
            throw new Error("Cannot clone a non-proxied WebResourceLike");
        },
        prepare () {
            throw new Error("WebResourceLike.prepare() is not supported by @azure/core-http-compat");
        },
        validateRequestProperties () {
        /** do nothing */ }
    };
    if (options === null || options === void 0 ? void 0 : options.createProxy) {
        return new Proxy(webResource, {
            get (target, prop, receiver) {
                if (prop === originalRequestSymbol) {
                    return request;
                } else if (prop === "clone") {
                    return ()=>{
                        return toWebResourceLike(toPipelineRequest(webResource, {
                            originalRequest
                        }), {
                            createProxy: true,
                            originalRequest
                        });
                    };
                }
                return Reflect.get(target, prop, receiver);
            },
            set (target, prop, value, receiver) {
                if (prop === "keepAlive") {
                    request.disableKeepAlive = !value;
                }
                const passThroughProps = [
                    "url",
                    "method",
                    "withCredentials",
                    "timeout",
                    "requestId",
                    "abortSignal",
                    "body",
                    "formData",
                    "onDownloadProgress",
                    "onUploadProgress",
                    "proxySettings",
                    "streamResponseStatusCodes",
                    "agent",
                    "requestOverrides"
                ];
                if (typeof prop === "string" && passThroughProps.includes(prop)) {
                    request[prop] = value;
                }
                return Reflect.set(target, prop, value, receiver);
            }
        });
    } else {
        return webResource;
    }
}
function toHttpHeadersLike(headers) {
    return new HttpHeaders(headers.toJSON({
        preserveCase: true
    }));
}
/**
 * A collection of HttpHeaders that can be sent with a HTTP request.
 */ function getHeaderKey(headerName) {
    return headerName.toLowerCase();
}
class HttpHeaders {
    constructor(rawHeaders){
        this._headersMap = {};
        if (rawHeaders) {
            for(const headerName in rawHeaders){
                this.set(headerName, rawHeaders[headerName]);
            }
        }
    }
    /**
     * Set a header in this collection with the provided name and value. The name is
     * case-insensitive.
     * @param headerName - The name of the header to set. This value is case-insensitive.
     * @param headerValue - The value of the header to set.
     */ set(headerName, headerValue) {
        this._headersMap[getHeaderKey(headerName)] = {
            name: headerName,
            value: headerValue.toString()
        };
    }
    /**
     * Get the header value for the provided header name, or undefined if no header exists in this
     * collection with the provided name.
     * @param headerName - The name of the header.
     */ get(headerName) {
        const header = this._headersMap[getHeaderKey(headerName)];
        return !header ? undefined : header.value;
    }
    /**
     * Get whether or not this header collection contains a header entry for the provided header name.
     */ contains(headerName) {
        return !!this._headersMap[getHeaderKey(headerName)];
    }
    /**
     * Remove the header with the provided headerName. Return whether or not the header existed and
     * was removed.
     * @param headerName - The name of the header to remove.
     */ remove(headerName) {
        const result = this.contains(headerName);
        delete this._headersMap[getHeaderKey(headerName)];
        return result;
    }
    /**
     * Get the headers that are contained this collection as an object.
     */ rawHeaders() {
        return this.toJson({
            preserveCase: true
        });
    }
    /**
     * Get the headers that are contained in this collection as an array.
     */ headersArray() {
        const headers = [];
        for(const headerKey in this._headersMap){
            headers.push(this._headersMap[headerKey]);
        }
        return headers;
    }
    /**
     * Get the header names that are contained in this collection.
     */ headerNames() {
        const headerNames = [];
        const headers = this.headersArray();
        for(let i = 0; i < headers.length; ++i){
            headerNames.push(headers[i].name);
        }
        return headerNames;
    }
    /**
     * Get the header values that are contained in this collection.
     */ headerValues() {
        const headerValues = [];
        const headers = this.headersArray();
        for(let i = 0; i < headers.length; ++i){
            headerValues.push(headers[i].value);
        }
        return headerValues;
    }
    /**
     * Get the JSON object representation of this HTTP header collection.
     */ toJson(options = {}) {
        const result = {};
        if (options.preserveCase) {
            for(const headerKey in this._headersMap){
                const header = this._headersMap[headerKey];
                result[header.name] = header.value;
            }
        } else {
            for(const headerKey in this._headersMap){
                const header = this._headersMap[headerKey];
                result[getHeaderKey(header.name)] = header.value;
            }
        }
        return result;
    }
    /**
     * Get the string representation of this HTTP header collection.
     */ toString() {
        return JSON.stringify(this.toJson({
            preserveCase: true
        }));
    }
    /**
     * Create a deep clone/copy of this HttpHeaders collection.
     */ clone() {
        const resultPreservingCasing = {};
        for(const headerKey in this._headersMap){
            const header = this._headersMap[headerKey];
            resultPreservingCasing[header.name] = header.value;
        }
        return new HttpHeaders(resultPreservingCasing);
    }
} //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/response.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "toCompatResponse": (()=>toCompatResponse),
    "toPipelineResponse": (()=>toPipelineResponse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/util.js [app-route] (ecmascript)");
;
;
const originalResponse = Symbol("Original FullOperationResponse");
function toCompatResponse(response, options) {
    let request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toWebResourceLike"])(response.request);
    let headers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toHttpHeadersLike"])(response.headers);
    if (options === null || options === void 0 ? void 0 : options.createProxy) {
        return new Proxy(response, {
            get (target, prop, receiver) {
                if (prop === "headers") {
                    return headers;
                } else if (prop === "request") {
                    return request;
                } else if (prop === originalResponse) {
                    return response;
                }
                return Reflect.get(target, prop, receiver);
            },
            set (target, prop, value, receiver) {
                if (prop === "headers") {
                    headers = value;
                } else if (prop === "request") {
                    request = value;
                }
                return Reflect.set(target, prop, value, receiver);
            }
        });
    } else {
        return Object.assign(Object.assign({}, response), {
            request,
            headers
        });
    }
}
function toPipelineResponse(compatResponse) {
    const extendedCompatResponse = compatResponse;
    const response = extendedCompatResponse[originalResponse];
    const headers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$httpHeaders$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createHttpHeaders"])(compatResponse.headers.toJson({
        preserveCase: true
    }));
    if (response) {
        response.headers = headers;
        return response;
    } else {
        return Object.assign(Object.assign({}, compatResponse), {
            headers,
            request: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPipelineRequest"])(compatResponse.request)
        });
    }
} //# sourceMappingURL=response.js.map
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/extendedClient.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ExtendedServiceClient": (()=>ExtendedServiceClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$disableKeepAlivePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serviceClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serviceClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/response.js [app-route] (ecmascript)");
;
;
;
;
class ExtendedServiceClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serviceClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ServiceClient"] {
    constructor(options){
        var _a, _b;
        super(options);
        if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$disableKeepAlivePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pipelineContainsDisableKeepAlivePolicy"])(this.pipeline)) {
            this.pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$disableKeepAlivePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createDisableKeepAlivePolicy"])());
        }
        if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {
            this.pipeline.removePolicy({
                name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$redirectPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["redirectPolicyName"]
            });
        }
    }
    /**
     * Compatible send operation request function.
     *
     * @param operationArguments - Operation arguments
     * @param operationSpec - Operation Spec
     * @returns
     */ async sendOperationRequest(operationArguments, operationSpec) {
        var _a;
        const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;
        let lastResponse;
        function onResponse(rawResponse, flatResponse, error) {
            lastResponse = rawResponse;
            if (userProvidedCallBack) {
                userProvidedCallBack(rawResponse, flatResponse, error);
            }
        }
        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), {
            onResponse
        });
        const result = await super.sendOperationRequest(operationArguments, operationSpec);
        if (lastResponse) {
            Object.defineProperty(result, "_response", {
                value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toCompatResponse"])(lastResponse)
            });
        }
        return result;
    }
} //# sourceMappingURL=extendedClient.js.map
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "HttpPipelineLogLevel": (()=>HttpPipelineLogLevel),
    "createRequestPolicyFactoryPolicy": (()=>createRequestPolicyFactoryPolicy),
    "requestPolicyFactoryPolicyName": (()=>requestPolicyFactoryPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/response.js [app-route] (ecmascript)");
;
;
var HttpPipelineLogLevel;
(function(HttpPipelineLogLevel) {
    HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
    HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
    HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
    HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));
const mockRequestPolicyOptions = {
    log (_logLevel, _message) {
    /* do nothing */ },
    shouldLog (_logLevel) {
        return false;
    }
};
const requestPolicyFactoryPolicyName = "RequestPolicyFactoryPolicy";
function createRequestPolicyFactoryPolicy(factories) {
    const orderedFactories = factories.slice().reverse();
    return {
        name: requestPolicyFactoryPolicyName,
        async sendRequest (request, next) {
            let httpPipeline = {
                async sendRequest (httpRequest) {
                    const response = await next((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPipelineRequest"])(httpRequest));
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toCompatResponse"])(response, {
                        createProxy: true
                    });
                }
            };
            for (const factory of orderedFactories){
                httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);
            }
            const webResourceLike = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toWebResourceLike"])(request, {
                createProxy: true
            });
            const response = await httpPipeline.sendRequest(webResourceLike);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPipelineResponse"])(response);
        }
    };
} //# sourceMappingURL=requestPolicyFactoryPolicy.js.map
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "convertHttpClient": (()=>convertHttpClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/response.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/util.js [app-route] (ecmascript)");
;
;
function convertHttpClient(requestPolicyClient) {
    return {
        sendRequest: async (request)=>{
            const response = await requestPolicyClient.sendRequest((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toWebResourceLike"])(request, {
                createProxy: true
            }));
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$response$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPipelineResponse"])(response);
        }
    };
} //# sourceMappingURL=httpClientAdapter.js.map
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * A Shim Library that provides compatibility between Core V1 & V2 Packages.
 *
 * @packageDocumentation
 */ __turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$extendedClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/extendedClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$requestPolicyFactoryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$disableKeepAlivePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$httpClientAdapter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/util.js [app-route] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
}}),
"[project]/node_modules/@azure/core-http-compat/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$extendedClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/extendedClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$requestPolicyFactoryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$policies$2f$disableKeepAlivePolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$httpClientAdapter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$http$2d$compat$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-http-compat/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/@azure/core-client/dist/esm/base64.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Encodes a string in base64 format.
 * @param value - the string to encode
 * @internal
 */ __turbopack_context__.s({
    "decodeString": (()=>decodeString),
    "decodeStringToString": (()=>decodeStringToString),
    "encodeByteArray": (()=>encodeByteArray),
    "encodeString": (()=>encodeString)
});
function encodeString(value) {
    return Buffer.from(value).toString("base64");
}
function encodeByteArray(value) {
    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);
    return bufferValue.toString("base64");
}
function decodeString(value) {
    return Buffer.from(value, "base64");
}
function decodeStringToString(value) {
    return Buffer.from(value, "base64").toString();
} //# sourceMappingURL=base64.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/interfaces.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * Default key used to access the XML attributes.
 */ __turbopack_context__.s({
    "XML_ATTRKEY": (()=>XML_ATTRKEY),
    "XML_CHARKEY": (()=>XML_CHARKEY)
});
const XML_ATTRKEY = "$";
const XML_CHARKEY = "_"; //# sourceMappingURL=interfaces.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/utils.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * A type guard for a primitive response body.
 * @param value - Value to test
 *
 * @internal
 */ __turbopack_context__.s({
    "flattenResponse": (()=>flattenResponse),
    "isDuration": (()=>isDuration),
    "isPrimitiveBody": (()=>isPrimitiveBody),
    "isValidUuid": (()=>isValidUuid)
});
function isPrimitiveBody(value, mapperTypeName) {
    return mapperTypeName !== "Composite" && mapperTypeName !== "Dictionary" && (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !== null || value === undefined || value === null);
}
const validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function isDuration(value) {
    return validateISODuration.test(value);
}
const validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
function isValidUuid(uuid) {
    return validUuidRegex.test(uuid);
}
/**
 * Maps the response as follows:
 * - wraps the response body if needed (typically if its type is primitive).
 * - returns null if the combination of the headers and the body is empty.
 * - otherwise, returns the combination of the headers and the body.
 *
 * @param responseObject - a representation of the parsed response
 * @returns the response that will be returned to the user which can be null and/or wrapped
 *
 * @internal
 */ function handleNullableResponseAndWrappableBody(responseObject) {
    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);
    if (responseObject.hasNullableType && Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {
        return responseObject.shouldWrapBody ? {
            body: null
        } : null;
    } else {
        return responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), {
            body: responseObject.body
        }) : combinedHeadersAndBody;
    }
}
function flattenResponse(fullResponse, responseSpec) {
    var _a, _b;
    const parsedHeaders = fullResponse.parsedHeaders;
    // head methods never have a body, but we return a boolean set to body property
    // to indicate presence/absence of the resource
    if (fullResponse.request.method === "HEAD") {
        return Object.assign(Object.assign({}, parsedHeaders), {
            body: fullResponse.parsedBody
        });
    }
    const bodyMapper = responseSpec && responseSpec.bodyMapper;
    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);
    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;
    /** If the body is asked for, we look at the expected body type to handle it */ if (expectedBodyTypeName === "Stream") {
        return Object.assign(Object.assign({}, parsedHeaders), {
            blobBody: fullResponse.blobBody,
            readableStreamBody: fullResponse.readableStreamBody
        });
    }
    const modelProperties = expectedBodyTypeName === "Composite" && bodyMapper.type.modelProperties || {};
    const isPageableResponse = Object.keys(modelProperties).some((k)=>modelProperties[k].serializedName === "");
    if (expectedBodyTypeName === "Sequence" || isPageableResponse) {
        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];
        for (const key of Object.keys(modelProperties)){
            if (modelProperties[key].serializedName) {
                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];
            }
        }
        if (parsedHeaders) {
            for (const key of Object.keys(parsedHeaders)){
                arrayResponse[key] = parsedHeaders[key];
            }
        }
        return isNullable && !fullResponse.parsedBody && !parsedHeaders && Object.getOwnPropertyNames(modelProperties).length === 0 ? null : arrayResponse;
    }
    return handleNullableResponseAndWrappableBody({
        body: fullResponse.parsedBody,
        headers: parsedHeaders,
        hasNullableType: isNullable,
        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)
    });
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/serializer.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "MapperTypeNames": (()=>MapperTypeNames),
    "createSerializer": (()=>createSerializer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/base64.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaces.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/utils.js [app-route] (ecmascript)");
;
;
;
class SerializerImpl {
    constructor(modelMappers = {}, isXML = false){
        this.modelMappers = modelMappers;
        this.isXML = isXML;
    }
    /**
     * @deprecated Removing the constraints validation on client side.
     */ validateConstraints(mapper, value, objectName) {
        const failValidation = (constraintName, constraintValue)=>{
            throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
        };
        if (mapper.constraints && value !== undefined && value !== null) {
            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;
            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {
                failValidation("ExclusiveMaximum", ExclusiveMaximum);
            }
            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {
                failValidation("ExclusiveMinimum", ExclusiveMinimum);
            }
            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {
                failValidation("InclusiveMaximum", InclusiveMaximum);
            }
            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {
                failValidation("InclusiveMinimum", InclusiveMinimum);
            }
            if (MaxItems !== undefined && value.length > MaxItems) {
                failValidation("MaxItems", MaxItems);
            }
            if (MaxLength !== undefined && value.length > MaxLength) {
                failValidation("MaxLength", MaxLength);
            }
            if (MinItems !== undefined && value.length < MinItems) {
                failValidation("MinItems", MinItems);
            }
            if (MinLength !== undefined && value.length < MinLength) {
                failValidation("MinLength", MinLength);
            }
            if (MultipleOf !== undefined && value % MultipleOf !== 0) {
                failValidation("MultipleOf", MultipleOf);
            }
            if (Pattern) {
                const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
                if (typeof value !== "string" || value.match(pattern) === null) {
                    failValidation("Pattern", Pattern);
                }
            }
            if (UniqueItems && value.some((item, i, ar)=>ar.indexOf(item) !== i)) {
                failValidation("UniqueItems", UniqueItems);
            }
        }
    }
    /**
     * Serialize the given object based on its metadata defined in the mapper
     *
     * @param mapper - The mapper which defines the metadata of the serializable object
     *
     * @param object - A valid Javascript object to be serialized
     *
     * @param objectName - Name of the serialized object
     *
     * @param options - additional options to serialization
     *
     * @returns A valid serialized Javascript object
     */ serialize(mapper, object, objectName, options = {
        xml: {}
    }) {
        var _a, _b, _c;
        const updatedOptions = {
            xml: {
                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : "",
                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,
                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_CHARKEY"]
            }
        };
        let payload = {};
        const mapperType = mapper.type.name;
        if (!objectName) {
            objectName = mapper.serializedName;
        }
        if (mapperType.match(/^Sequence$/i) !== null) {
            payload = [];
        }
        if (mapper.isConstant) {
            object = mapper.defaultValue;
        }
        // This table of allowed values should help explain
        // the mapper.required and mapper.nullable properties.
        // X means "neither undefined or null are allowed".
        //           || required
        //           || true      | false
        //  nullable || ==========================
        //      true || null      | undefined/null
        //     false || X         | undefined
        // undefined || X         | undefined/null
        const { required, nullable } = mapper;
        if (required && nullable && object === undefined) {
            throw new Error(`${objectName} cannot be undefined.`);
        }
        if (required && !nullable && (object === undefined || object === null)) {
            throw new Error(`${objectName} cannot be null or undefined.`);
        }
        if (!required && nullable === false && object === null) {
            throw new Error(`${objectName} cannot be null.`);
        }
        if (object === undefined || object === null) {
            payload = object;
        } else {
            if (mapperType.match(/^any$/i) !== null) {
                payload = object;
            } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
                payload = serializeBasicTypes(mapperType, objectName, object);
            } else if (mapperType.match(/^Enum$/i) !== null) {
                const enumMapper = mapper;
                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
            } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
                payload = serializeDateTypes(mapperType, object, objectName);
            } else if (mapperType.match(/^ByteArray$/i) !== null) {
                payload = serializeByteArrayType(objectName, object);
            } else if (mapperType.match(/^Base64Url$/i) !== null) {
                payload = serializeBase64UrlType(objectName, object);
            } else if (mapperType.match(/^Sequence$/i) !== null) {
                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            } else if (mapperType.match(/^Dictionary$/i) !== null) {
                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            } else if (mapperType.match(/^Composite$/i) !== null) {
                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            }
        }
        return payload;
    }
    /**
     * Deserialize the given object based on its metadata defined in the mapper
     *
     * @param mapper - The mapper which defines the metadata of the serializable object
     *
     * @param responseBody - A valid Javascript entity to be deserialized
     *
     * @param objectName - Name of the deserialized object
     *
     * @param options - Controls behavior of XML parser and builder.
     *
     * @returns A valid deserialized Javascript object
     */ deserialize(mapper, responseBody, objectName, options = {
        xml: {}
    }) {
        var _a, _b, _c, _d;
        const updatedOptions = {
            xml: {
                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : "",
                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,
                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_CHARKEY"]
            },
            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false
        };
        if (responseBody === undefined || responseBody === null) {
            if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
                // between the list being empty versus being missing,
                // so let's do the more user-friendly thing and return an empty list.
                responseBody = [];
            }
            // specifically check for undefined as default value can be a falsey value `0, "", false, null`
            if (mapper.defaultValue !== undefined) {
                responseBody = mapper.defaultValue;
            }
            return responseBody;
        }
        let payload;
        const mapperType = mapper.type.name;
        if (!objectName) {
            objectName = mapper.serializedName;
        }
        if (mapperType.match(/^Composite$/i) !== null) {
            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
        } else {
            if (this.isXML) {
                const xmlCharKey = updatedOptions.xml.xmlCharKey;
                /**
                 * If the mapper specifies this as a non-composite type value but the responseBody contains
                 * both header ("$" i.e., XML_ATTRKEY) and body ("#" i.e., XML_CHARKEY) properties,
                 * then just reduce the responseBody value to the body ("#" i.e., XML_CHARKEY) property.
                 */ if (responseBody[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] !== undefined && responseBody[xmlCharKey] !== undefined) {
                    responseBody = responseBody[xmlCharKey];
                }
            }
            if (mapperType.match(/^Number$/i) !== null) {
                payload = parseFloat(responseBody);
                if (isNaN(payload)) {
                    payload = responseBody;
                }
            } else if (mapperType.match(/^Boolean$/i) !== null) {
                if (responseBody === "true") {
                    payload = true;
                } else if (responseBody === "false") {
                    payload = false;
                } else {
                    payload = responseBody;
                }
            } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
                payload = responseBody;
            } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
                payload = new Date(responseBody);
            } else if (mapperType.match(/^UnixTime$/i) !== null) {
                payload = unixTimeToDate(responseBody);
            } else if (mapperType.match(/^ByteArray$/i) !== null) {
                payload = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(responseBody);
            } else if (mapperType.match(/^Base64Url$/i) !== null) {
                payload = base64UrlToByteArray(responseBody);
            } else if (mapperType.match(/^Sequence$/i) !== null) {
                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
            } else if (mapperType.match(/^Dictionary$/i) !== null) {
                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
            }
        }
        if (mapper.isConstant) {
            payload = mapper.defaultValue;
        }
        return payload;
    }
}
function createSerializer(modelMappers = {}, isXML = false) {
    return new SerializerImpl(modelMappers, isXML);
}
function trimEnd(str, ch) {
    let len = str.length;
    while(len - 1 >= 0 && str[len - 1] === ch){
        --len;
    }
    return str.substr(0, len);
}
function bufferToBase64Url(buffer) {
    if (!buffer) {
        return undefined;
    }
    if (!(buffer instanceof Uint8Array)) {
        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
    }
    // Uint8Array to Base64.
    const str = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["encodeByteArray"])(buffer);
    // Base64 to Base64Url.
    return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
    if (!str) {
        return undefined;
    }
    if (str && typeof str.valueOf() !== "string") {
        throw new Error("Please provide an input of type string for converting to Uint8Array");
    }
    // Base64Url to Base64.
    str = str.replace(/-/g, "+").replace(/_/g, "/");
    // Base64 to Uint8Array.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(str);
}
function splitSerializeName(prop) {
    const classes = [];
    let partialclass = "";
    if (prop) {
        const subwords = prop.split(".");
        for (const item of subwords){
            if (item.charAt(item.length - 1) === "\\") {
                partialclass += item.substr(0, item.length - 1) + ".";
            } else {
                partialclass += item;
                classes.push(partialclass);
                partialclass = "";
            }
        }
    }
    return classes;
}
function dateToUnixTime(d) {
    if (!d) {
        return undefined;
    }
    if (typeof d.valueOf() === "string") {
        d = new Date(d);
    }
    return Math.floor(d.getTime() / 1000);
}
function unixTimeToDate(n) {
    if (!n) {
        return undefined;
    }
    return new Date(n * 1000);
}
function serializeBasicTypes(typeName, objectName, value) {
    if (value !== null && value !== undefined) {
        if (typeName.match(/^Number$/i) !== null) {
            if (typeof value !== "number") {
                throw new Error(`${objectName} with value ${value} must be of type number.`);
            }
        } else if (typeName.match(/^String$/i) !== null) {
            if (typeof value.valueOf() !== "string") {
                throw new Error(`${objectName} with value "${value}" must be of type string.`);
            }
        } else if (typeName.match(/^Uuid$/i) !== null) {
            if (!(typeof value.valueOf() === "string" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isValidUuid"])(value))) {
                throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
            }
        } else if (typeName.match(/^Boolean$/i) !== null) {
            if (typeof value !== "boolean") {
                throw new Error(`${objectName} with value ${value} must be of type boolean.`);
            }
        } else if (typeName.match(/^Stream$/i) !== null) {
            const objectType = typeof value;
            if (objectType !== "string" && typeof value.pipe !== "function" && // NodeJS.ReadableStream
            typeof value.tee !== "function" && // browser ReadableStream
            !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && // File objects count as a type of Blob, so we want to use instanceof explicitly
            !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob) && objectType !== "function") {
                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);
            }
        }
    }
    return value;
}
function serializeEnumType(objectName, allowedValues, value) {
    if (!allowedValues) {
        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
    }
    const isPresent = allowedValues.some((item)=>{
        if (typeof item.valueOf() === "string") {
            return item.toLowerCase() === value.toLowerCase();
        }
        return item === value;
    });
    if (!isPresent) {
        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
    }
    return value;
}
function serializeByteArrayType(objectName, value) {
    if (value !== undefined && value !== null) {
        if (!(value instanceof Uint8Array)) {
            throw new Error(`${objectName} must be of type Uint8Array.`);
        }
        value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["encodeByteArray"])(value);
    }
    return value;
}
function serializeBase64UrlType(objectName, value) {
    if (value !== undefined && value !== null) {
        if (!(value instanceof Uint8Array)) {
            throw new Error(`${objectName} must be of type Uint8Array.`);
        }
        value = bufferToBase64Url(value);
    }
    return value;
}
function serializeDateTypes(typeName, value, objectName) {
    if (value !== undefined && value !== null) {
        if (typeName.match(/^Date$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
            }
            value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
        } else if (typeName.match(/^DateTime$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
            }
            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
        } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
            }
            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
        } else if (typeName.match(/^UnixTime$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);
            }
            value = dateToUnixTime(value);
        } else if (typeName.match(/^TimeSpan$/i) !== null) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isDuration"])(value)) {
                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
            }
        }
    }
    return value;
}
function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
    var _a;
    if (!Array.isArray(object)) {
        throw new Error(`${objectName} must be of type Array.`);
    }
    let elementType = mapper.type.element;
    if (!elementType || typeof elementType !== "object") {
        throw new Error(`element" metadata for an Array must be defined in the ` + `mapper and it must of type "object" in ${objectName}.`);
    }
    // Quirk: Composite mappers referenced by `element` might
    // not have *all* properties declared (like uberParent),
    // so let's try to look up the full definition by name.
    if (elementType.type.name === "Composite" && elementType.type.className) {
        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;
    }
    const tempArray = [];
    for(let i = 0; i < object.length; i++){
        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);
        if (isXml && elementType.xmlNamespace) {
            const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
            if (elementType.type.name === "Composite") {
                tempArray[i] = Object.assign({}, serializedValue);
                tempArray[i][__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = {
                    [xmlnsKey]: elementType.xmlNamespace
                };
            } else {
                tempArray[i] = {};
                tempArray[i][options.xml.xmlCharKey] = serializedValue;
                tempArray[i][__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = {
                    [xmlnsKey]: elementType.xmlNamespace
                };
            }
        } else {
            tempArray[i] = serializedValue;
        }
    }
    return tempArray;
}
function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
    if (typeof object !== "object") {
        throw new Error(`${objectName} must be of type object.`);
    }
    const valueType = mapper.type.value;
    if (!valueType || typeof valueType !== "object") {
        throw new Error(`"value" metadata for a Dictionary must be defined in the ` + `mapper and it must of type "object" in ${objectName}.`);
    }
    const tempDictionary = {};
    for (const key of Object.keys(object)){
        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);
        // If the element needs an XML namespace we need to add it within the $ property
        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
    }
    // Add the namespace to the root element if needed
    if (isXml && mapper.xmlNamespace) {
        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
        const result = tempDictionary;
        result[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = {
            [xmlnsKey]: mapper.xmlNamespace
        };
        return result;
    }
    return tempDictionary;
}
/**
 * Resolves the additionalProperties property from a referenced mapper
 * @param serializer - the serializer containing the entire set of mappers
 * @param mapper - the composite mapper to resolve
 * @param objectName - name of the object being serialized
 */ function resolveAdditionalProperties(serializer, mapper, objectName) {
    const additionalProperties = mapper.type.additionalProperties;
    if (!additionalProperties && mapper.type.className) {
        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
    }
    return additionalProperties;
}
/**
 * Finds the mapper referenced by className
 * @param serializer - the serializer containing the entire set of mappers
 * @param mapper - the composite mapper to resolve
 * @param objectName - name of the object being serialized
 */ function resolveReferencedMapper(serializer, mapper, objectName) {
    const className = mapper.type.className;
    if (!className) {
        throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, undefined, 2)}".`);
    }
    return serializer.modelMappers[className];
}
/**
 * Resolves a composite mapper's modelProperties.
 * @param serializer - the serializer containing the entire set of mappers
 * @param mapper - the composite mapper to resolve
 */ function resolveModelProperties(serializer, mapper, objectName) {
    let modelProps = mapper.type.modelProperties;
    if (!modelProps) {
        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
        if (!modelMapper) {
            throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
        }
        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
        if (!modelProps) {
            throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
        }
    }
    return modelProps;
}
function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
        mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
    }
    if (object !== undefined && object !== null) {
        const payload = {};
        const modelProps = resolveModelProperties(serializer, mapper, objectName);
        for (const key of Object.keys(modelProps)){
            const propertyMapper = modelProps[key];
            if (propertyMapper.readOnly) {
                continue;
            }
            let propName;
            let parentObject = payload;
            if (serializer.isXML) {
                if (propertyMapper.xmlIsWrapped) {
                    propName = propertyMapper.xmlName;
                } else {
                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
                }
            } else {
                const paths = splitSerializeName(propertyMapper.serializedName);
                propName = paths.pop();
                for (const pathName of paths){
                    const childObject = parentObject[pathName];
                    if ((childObject === undefined || childObject === null) && (object[key] !== undefined && object[key] !== null || propertyMapper.defaultValue !== undefined)) {
                        parentObject[pathName] = {};
                    }
                    parentObject = parentObject[pathName];
                }
            }
            if (parentObject !== undefined && parentObject !== null) {
                if (isXml && mapper.xmlNamespace) {
                    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
                    parentObject[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = Object.assign(Object.assign({}, parentObject[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]]), {
                        [xmlnsKey]: mapper.xmlNamespace
                    });
                }
                const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
                let toSerialize = object[key];
                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
                if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === undefined || toSerialize === null)) {
                    toSerialize = mapper.serializedName;
                }
                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);
                if (serializedValue !== undefined && propName !== undefined && propName !== null) {
                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
                    if (isXml && propertyMapper.xmlIsAttribute) {
                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.
                        // This keeps things simple while preventing name collision
                        // with names in user documents.
                        parentObject[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = parentObject[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] || {};
                        parentObject[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]][propName] = serializedValue;
                    } else if (isXml && propertyMapper.xmlIsWrapped) {
                        parentObject[propName] = {
                            [propertyMapper.xmlElementName]: value
                        };
                    } else {
                        parentObject[propName] = value;
                    }
                }
            }
        }
        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);
        if (additionalPropertiesMapper) {
            const propNames = Object.keys(modelProps);
            for(const clientPropName in object){
                const isAdditionalProperty = propNames.every((pn)=>pn !== clientPropName);
                if (isAdditionalProperty) {
                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
                }
            }
        }
        return payload;
    }
    return object;
}
function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
    if (!isXml || !propertyMapper.xmlNamespace) {
        return serializedValue;
    }
    const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
    const xmlNamespace = {
        [xmlnsKey]: propertyMapper.xmlNamespace
    };
    if ([
        "Composite"
    ].includes(propertyMapper.type.name)) {
        if (serializedValue[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]]) {
            return serializedValue;
        } else {
            const result = Object.assign({}, serializedValue);
            result[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = xmlNamespace;
            return result;
        }
    }
    const result = {};
    result[options.xml.xmlCharKey] = serializedValue;
    result[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = xmlNamespace;
    return result;
}
function isSpecialXmlProperty(propertyName, options) {
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"],
        options.xml.xmlCharKey
    ].includes(propertyName);
}
function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
    var _a, _b;
    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_CHARKEY"];
    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
        mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
    }
    const modelProps = resolveModelProperties(serializer, mapper, objectName);
    let instance = {};
    const handledPropertyNames = [];
    for (const key of Object.keys(modelProps)){
        const propertyMapper = modelProps[key];
        const paths = splitSerializeName(modelProps[key].serializedName);
        handledPropertyNames.push(paths[0]);
        const { serializedName, xmlName, xmlElementName } = propertyMapper;
        let propertyObjectName = objectName;
        if (serializedName !== "" && serializedName !== undefined) {
            propertyObjectName = objectName + "." + serializedName;
        }
        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
        if (headerCollectionPrefix) {
            const dictionary = {};
            for (const headerKey of Object.keys(responseBody)){
                if (headerKey.startsWith(headerCollectionPrefix)) {
                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
                }
                handledPropertyNames.push(headerKey);
            }
            instance[key] = dictionary;
        } else if (serializer.isXML) {
            if (propertyMapper.xmlIsAttribute && responseBody[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]]) {
                instance[key] = serializer.deserialize(propertyMapper, responseBody[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]][xmlName], propertyObjectName, options);
            } else if (propertyMapper.xmlIsMsText) {
                if (responseBody[xmlCharKey] !== undefined) {
                    instance[key] = responseBody[xmlCharKey];
                } else if (typeof responseBody === "string") {
                    // The special case where xml parser parses "<Name>content</Name>" into JSON of
                    //   `{ name: "content"}` instead of `{ name: { "_": "content" }}`
                    instance[key] = responseBody;
                }
            } else {
                const propertyName = xmlElementName || xmlName || serializedName;
                if (propertyMapper.xmlIsWrapped) {
                    /* a list of <xmlElementName> wrapped by <xmlName>
                      For the xml example below
                        <Cors>
                          <CorsRule>...</CorsRule>
                          <CorsRule>...</CorsRule>
                        </Cors>
                      the responseBody has
                        {
                          Cors: {
                            CorsRule: [{...}, {...}]
                          }
                        }
                      xmlName is "Cors" and xmlElementName is"CorsRule".
                    */ const wrapped = responseBody[xmlName];
                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];
                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
                    handledPropertyNames.push(xmlName);
                } else {
                    const property = responseBody[propertyName];
                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
                    handledPropertyNames.push(propertyName);
                }
            }
        } else {
            // deserialize the property if it is present in the provided responseBody instance
            let propertyInstance;
            let res = responseBody;
            // traversing the object step by step.
            let steps = 0;
            for (const item of paths){
                if (!res) break;
                steps++;
                res = res[item];
            }
            // only accept null when reaching the last position of object otherwise it would be undefined
            if (res === null && steps < paths.length) {
                res = undefined;
            }
            propertyInstance = res;
            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
            // checking that the model property name (key)(ex: "fishtype") and the
            // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
            // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
            // is a better approach. The generator is not consistent with escaping '\.' in the
            // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
            // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
            // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
            // the transformation of model property name (ex: "fishtype") is done consistently.
            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.
            if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === undefined || propertyInstance === null)) {
                propertyInstance = mapper.serializedName;
            }
            let serializedValue;
            // paging
            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
                propertyInstance = responseBody[key];
                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
                // Copy over any properties that have already been added into the instance, where they do
                // not exist on the newly de-serialized array
                for (const [k, v] of Object.entries(instance)){
                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {
                        arrayInstance[k] = v;
                    }
                }
                instance = arrayInstance;
            } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
                instance[key] = serializedValue;
            }
        }
    }
    const additionalPropertiesMapper = mapper.type.additionalProperties;
    if (additionalPropertiesMapper) {
        const isAdditionalProperty = (responsePropName)=>{
            for(const clientPropName in modelProps){
                const paths = splitSerializeName(modelProps[clientPropName].serializedName);
                if (paths[0] === responsePropName) {
                    return false;
                }
            }
            return true;
        };
        for(const responsePropName in responseBody){
            if (isAdditionalProperty(responsePropName)) {
                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
            }
        }
    } else if (responseBody && !options.ignoreUnknownProperties) {
        for (const key of Object.keys(responseBody)){
            if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
                instance[key] = responseBody[key];
            }
        }
    }
    return instance;
}
function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
    /* jshint validthis: true */ const value = mapper.type.value;
    if (!value || typeof value !== "object") {
        throw new Error(`"value" metadata for a Dictionary must be defined in the ` + `mapper and it must of type "object" in ${objectName}`);
    }
    if (responseBody) {
        const tempDictionary = {};
        for (const key of Object.keys(responseBody)){
            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
        }
        return tempDictionary;
    }
    return responseBody;
}
function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
    var _a;
    let element = mapper.type.element;
    if (!element || typeof element !== "object") {
        throw new Error(`element" metadata for an Array must be defined in the ` + `mapper and it must of type "object" in ${objectName}`);
    }
    if (responseBody) {
        if (!Array.isArray(responseBody)) {
            // xml2js will interpret a single element array as just the element, so force it to be an array
            responseBody = [
                responseBody
            ];
        }
        // Quirk: Composite mappers referenced by `element` might
        // not have *all* properties declared (like uberParent),
        // so let's try to look up the full definition by name.
        if (element.type.name === "Composite" && element.type.className) {
            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;
        }
        const tempArray = [];
        for(let i = 0; i < responseBody.length; i++){
            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
        }
        return tempArray;
    }
    return responseBody;
}
function getIndexDiscriminator(discriminators, discriminatorValue, typeName) {
    const typeNamesToCheck = [
        typeName
    ];
    while(typeNamesToCheck.length){
        const currentName = typeNamesToCheck.shift();
        const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + "." + discriminatorValue;
        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {
            return discriminators[indexDiscriminator];
        } else {
            for (const [name, mapper] of Object.entries(discriminators)){
                if (name.startsWith(currentName + ".") && mapper.type.uberParent === currentName && mapper.type.className) {
                    typeNamesToCheck.push(mapper.type.className);
                }
            }
        }
    }
    return undefined;
}
function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
    var _a;
    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
    if (polymorphicDiscriminator) {
        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
        if (discriminatorName) {
            // The serializedName might have \\, which we just want to ignore
            if (polymorphicPropertyName === "serializedName") {
                discriminatorName = discriminatorName.replace(/\\/gi, "");
            }
            const discriminatorValue = object[discriminatorName];
            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;
            if (typeof discriminatorValue === "string" && typeName) {
                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);
                if (polymorphicMapper) {
                    mapper = polymorphicMapper;
                }
            }
        }
    }
    return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
    return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
}
function getPolymorphicDiscriminatorSafely(serializer, typeName) {
    return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
}
const MapperTypeNames = {
    Base64Url: "Base64Url",
    Boolean: "Boolean",
    ByteArray: "ByteArray",
    Composite: "Composite",
    Date: "Date",
    DateTime: "DateTime",
    DateTimeRfc1123: "DateTimeRfc1123",
    Dictionary: "Dictionary",
    Enum: "Enum",
    Number: "Number",
    Object: "Object",
    Sequence: "Sequence",
    String: "String",
    Stream: "Stream",
    TimeSpan: "TimeSpan",
    UnixTime: "UnixTime"
}; //# sourceMappingURL=serializer.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/commonjs/state.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.state = void 0;
/**
 * Holds the singleton operationRequestMap, to be shared across CJS and ESM imports.
 */ exports.state = {
    operationRequestMap: new WeakMap()
}; //# sourceMappingURL=state-cjs.cjs.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/state.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.
// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.
__turbopack_context__.s({
    "state": (()=>state)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$commonjs$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/commonjs/state.js [app-route] (ecmascript)");
;
const state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$commonjs$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"]; //# sourceMappingURL=state.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/operationHelpers.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getOperationArgumentValueFromParameter": (()=>getOperationArgumentValueFromParameter),
    "getOperationRequestInfo": (()=>getOperationRequestInfo)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/state.js [app-route] (ecmascript)");
;
function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {
    let parameterPath = parameter.parameterPath;
    const parameterMapper = parameter.mapper;
    let value;
    if (typeof parameterPath === "string") {
        parameterPath = [
            parameterPath
        ];
    }
    if (Array.isArray(parameterPath)) {
        if (parameterPath.length > 0) {
            if (parameterMapper.isConstant) {
                value = parameterMapper.defaultValue;
            } else {
                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
                if (!propertySearchResult.propertyFound && fallbackObject) {
                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);
                }
                let useDefaultValue = false;
                if (!propertySearchResult.propertyFound) {
                    useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
                }
                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
            }
        }
    } else {
        if (parameterMapper.required) {
            value = {};
        }
        for(const propertyName in parameterPath){
            const propertyMapper = parameterMapper.type.modelProperties[propertyName];
            const propertyPath = parameterPath[propertyName];
            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {
                parameterPath: propertyPath,
                mapper: propertyMapper
            }, fallbackObject);
            if (propertyValue !== undefined) {
                if (!value) {
                    value = {};
                }
                value[propertyName] = propertyValue;
            }
        }
    }
    return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
    const result = {
        propertyFound: false
    };
    let i = 0;
    for(; i < parameterPath.length; ++i){
        const parameterPathPart = parameterPath[i];
        // Make sure to check inherited properties too, so don't use hasOwnProperty().
        if (parent && parameterPathPart in parent) {
            parent = parent[parameterPathPart];
        } else {
            break;
        }
    }
    if (i === parameterPath.length) {
        result.propertyValue = parent;
        result.propertyFound = true;
    }
    return result;
}
const originalRequestSymbol = Symbol.for("@azure/core-client original request");
function hasOriginalRequest(request) {
    return originalRequestSymbol in request;
}
function getOperationRequestInfo(request) {
    if (hasOriginalRequest(request)) {
        return getOperationRequestInfo(request[originalRequestSymbol]);
    }
    let info = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"].operationRequestMap.get(request);
    if (!info) {
        info = {};
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$state$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["state"].operationRequestMap.set(request, info);
    }
    return info;
} //# sourceMappingURL=operationHelpers.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/deserializationPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "deserializationPolicy": (()=>deserializationPolicy),
    "deserializationPolicyName": (()=>deserializationPolicyName)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaces.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/operationHelpers.js [app-route] (ecmascript)");
;
;
;
;
const defaultJsonContentTypes = [
    "application/json",
    "text/json"
];
const defaultXmlContentTypes = [
    "application/xml",
    "application/atom+xml"
];
const deserializationPolicyName = "deserializationPolicy";
function deserializationPolicy(options = {}) {
    var _a, _b, _c, _d, _e, _f, _g;
    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;
    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;
    const parseXML = options.parseXML;
    const serializerOptions = options.serializerOptions;
    const updatedOptions = {
        xml: {
            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : "",
            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,
            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_CHARKEY"]
        }
    };
    return {
        name: deserializationPolicyName,
        async sendRequest (request, next) {
            const response = await next(request);
            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);
        }
    };
}
function getOperationResponseMap(parsedResponse) {
    let result;
    const request = parsedResponse.request;
    const operationInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationRequestInfo"])(request);
    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
    if (operationSpec) {
        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {
            result = operationSpec.responses[parsedResponse.status];
        } else {
            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);
        }
    }
    return result;
}
function shouldDeserializeResponse(parsedResponse) {
    const request = parsedResponse.request;
    const operationInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationRequestInfo"])(request);
    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;
    let result;
    if (shouldDeserialize === undefined) {
        result = true;
    } else if (typeof shouldDeserialize === "boolean") {
        result = shouldDeserialize;
    } else {
        result = shouldDeserialize(parsedResponse);
    }
    return result;
}
async function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {
    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);
    if (!shouldDeserializeResponse(parsedResponse)) {
        return parsedResponse;
    }
    const operationInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationRequestInfo"])(parsedResponse.request);
    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
    if (!operationSpec || !operationSpec.responses) {
        return parsedResponse;
    }
    const responseSpec = getOperationResponseMap(parsedResponse);
    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);
    if (error) {
        throw error;
    } else if (shouldReturnResponse) {
        return parsedResponse;
    }
    // An operation response spec does exist for current status code, so
    // use it to deserialize the response.
    if (responseSpec) {
        if (responseSpec.bodyMapper) {
            let valueToDeserialize = parsedResponse.parsedBody;
            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapperTypeNames"].Sequence) {
                valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
            }
            try {
                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
            } catch (deserializeError) {
                const restError = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RestError"](`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {
                    statusCode: parsedResponse.status,
                    request: parsedResponse.request,
                    response: parsedResponse
                });
                throw restError;
            }
        } else if (operationSpec.httpMethod === "HEAD") {
            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
        }
        if (responseSpec.headersMapper) {
            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders", {
                xml: {},
                ignoreUnknownProperties: true
            });
        }
    }
    return parsedResponse;
}
function isOperationSpecEmpty(operationSpec) {
    const expectedStatusCodes = Object.keys(operationSpec.responses);
    return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}
function handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {
    var _a, _b, _c, _d, _e;
    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
    if (isExpectedStatusCode) {
        if (responseSpec) {
            if (!responseSpec.isError) {
                return {
                    error: null,
                    shouldReturnResponse: false
                };
            }
        } else {
            return {
                error: null,
                shouldReturnResponse: false
            };
        }
    }
    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RestError"](initialErrorMessage, {
        statusCode: parsedResponse.status,
        request: parsedResponse.request,
        response: parsedResponse
    });
    // If the item failed but there's no error spec or default spec to deserialize the error,
    // and the parsed body doesn't look like an error object,
    // we should fail so we just throw the parsed response
    if (!errorResponseSpec && !(((_c = (_b = parsedResponse.parsedBody) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.code) && ((_e = (_d = parsedResponse.parsedBody) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message))) {
        throw error;
    }
    const defaultBodyMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.bodyMapper;
    const defaultHeadersMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.headersMapper;
    try {
        // If error response has a body, try to deserialize it using default body mapper.
        // Then try to extract error code & message from it
        if (parsedResponse.parsedBody) {
            const parsedBody = parsedResponse.parsedBody;
            let deserializedError;
            if (defaultBodyMapper) {
                let valueToDeserialize = parsedBody;
                if (operationSpec.isXML && defaultBodyMapper.type.name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapperTypeNames"].Sequence) {
                    valueToDeserialize = [];
                    const elementName = defaultBodyMapper.xmlElementName;
                    if (typeof parsedBody === "object" && elementName) {
                        valueToDeserialize = parsedBody[elementName];
                    }
                }
                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody", options);
            }
            const internalError = parsedBody.error || deserializedError || parsedBody;
            error.code = internalError.code;
            if (internalError.message) {
                error.message = internalError.message;
            }
            if (defaultBodyMapper) {
                error.response.parsedBody = deserializedError;
            }
        }
        // If error response has headers, try to deserialize it using default header mapper
        if (parsedResponse.headers && defaultHeadersMapper) {
            error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders");
        }
    } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
    }
    return {
        error,
        shouldReturnResponse: false
    };
}
async function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {
    var _a;
    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) && operationResponse.bodyAsText) {
        const text = operationResponse.bodyAsText;
        const contentType = operationResponse.headers.get("Content-Type") || "";
        const contentComponents = !contentType ? [] : contentType.split(";").map((component)=>component.toLowerCase());
        try {
            if (contentComponents.length === 0 || contentComponents.some((component)=>jsonContentTypes.indexOf(component) !== -1)) {
                operationResponse.parsedBody = JSON.parse(text);
                return operationResponse;
            } else if (contentComponents.some((component)=>xmlContentTypes.indexOf(component) !== -1)) {
                if (!parseXML) {
                    throw new Error("Parsing XML not supported.");
                }
                const body = await parseXML(text, opts.xml);
                operationResponse.parsedBody = body;
                return operationResponse;
            }
        } catch (err) {
            const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
            const errCode = err.code || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RestError"].PARSE_ERROR;
            const e = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$restError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RestError"](msg, {
                code: errCode,
                statusCode: operationResponse.status,
                request: operationResponse.request,
                response: operationResponse
            });
            throw e;
        }
    }
    return operationResponse;
} //# sourceMappingURL=deserializationPolicy.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/interfaceHelpers.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getPathStringFromParameter": (()=>getPathStringFromParameter),
    "getStreamingResponseStatusCodes": (()=>getStreamingResponseStatusCodes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializer.js [app-route] (ecmascript)");
;
function getStreamingResponseStatusCodes(operationSpec) {
    const result = new Set();
    for(const statusCode in operationSpec.responses){
        const operationResponse = operationSpec.responses[statusCode];
        if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapperTypeNames"].Stream) {
            result.add(Number(statusCode));
        }
    }
    return result;
}
function getPathStringFromParameter(parameter) {
    const { parameterPath, mapper } = parameter;
    let result;
    if (typeof parameterPath === "string") {
        result = parameterPath;
    } else if (Array.isArray(parameterPath)) {
        result = parameterPath.join(".");
    } else {
        result = mapper.serializedName;
    }
    return result;
} //# sourceMappingURL=interfaceHelpers.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/serializationPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "serializationPolicy": (()=>serializationPolicy),
    "serializationPolicyName": (()=>serializationPolicyName),
    "serializeHeaders": (()=>serializeHeaders),
    "serializeRequestBody": (()=>serializeRequestBody)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaces.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/operationHelpers.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaceHelpers.js [app-route] (ecmascript)");
;
;
;
;
const serializationPolicyName = "serializationPolicy";
function serializationPolicy(options = {}) {
    const stringifyXML = options.stringifyXML;
    return {
        name: serializationPolicyName,
        async sendRequest (request, next) {
            const operationInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationRequestInfo"])(request);
            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;
            if (operationSpec && operationArguments) {
                serializeHeaders(request, operationArguments, operationSpec);
                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);
            }
            return next(request);
        }
    };
}
function serializeHeaders(request, operationArguments, operationSpec) {
    var _a, _b;
    if (operationSpec.headerParameters) {
        for (const headerParameter of operationSpec.headerParameters){
            let headerValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationArgumentValueFromParameter"])(operationArguments, headerParameter);
            if (headerValue !== null && headerValue !== undefined || headerParameter.mapper.required) {
                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(headerParameter));
                const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
                if (headerCollectionPrefix) {
                    for (const key of Object.keys(headerValue)){
                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);
                    }
                } else {
                    request.headers.set(headerParameter.mapper.serializedName || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(headerParameter), headerValue);
                }
            }
        }
    }
    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;
    if (customHeaders) {
        for (const customHeaderName of Object.keys(customHeaders)){
            request.headers.set(customHeaderName, customHeaders[customHeaderName]);
        }
    }
}
function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function() {
    throw new Error("XML serialization unsupported!");
}) {
    var _a, _b, _c, _d, _e;
    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
    const updatedOptions = {
        xml: {
            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : "",
            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,
            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_CHARKEY"]
        }
    };
    const xmlCharKey = updatedOptions.xml.xmlCharKey;
    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
        request.body = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationArgumentValueFromParameter"])(operationArguments, operationSpec.requestBody);
        const bodyMapper = operationSpec.requestBody.mapper;
        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable } = bodyMapper;
        const typeName = bodyMapper.type.name;
        try {
            if (request.body !== undefined && request.body !== null || nullable && request.body === null || required) {
                const requestBodyParameterPathString = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(operationSpec.requestBody);
                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);
                const isStream = typeName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapperTypeNames"].Stream;
                if (operationSpec.isXML) {
                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);
                    if (typeName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapperTypeNames"].Sequence) {
                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
                            rootName: xmlName || serializedName,
                            xmlCharKey
                        });
                    } else if (!isStream) {
                        request.body = stringifyXML(value, {
                            rootName: xmlName || serializedName,
                            xmlCharKey
                        });
                    }
                } else if (typeName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapperTypeNames"].String && (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match("text/plain")) || operationSpec.mediaType === "text")) {
                    // the String serializer has validated that request body is a string
                    // so just send the string.
                    return;
                } else if (!isStream) {
                    request.body = JSON.stringify(request.body);
                }
            }
        } catch (error) {
            throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, "  ")}.`);
        }
    } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
        request.formData = {};
        for (const formDataParameter of operationSpec.formDataParameters){
            const formDataParameterValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationArgumentValueFromParameter"])(operationArguments, formDataParameter);
            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(formDataParameter);
                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(formDataParameter), updatedOptions);
            }
        }
    }
}
/**
 * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself
 */ function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
    // Composite and Sequence schemas already got their root namespace set during serialization
    // We just need to add xmlns to the other schema types
    if (xmlNamespace && ![
        "Composite",
        "Sequence",
        "Dictionary"
    ].includes(typeName)) {
        const result = {};
        result[options.xml.xmlCharKey] = serializedValue;
        result[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = {
            [xmlnsKey]: xmlNamespace
        };
        return result;
    }
    return serializedValue;
}
function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
    if (!Array.isArray(obj)) {
        obj = [
            obj
        ];
    }
    if (!xmlNamespaceKey || !xmlNamespace) {
        return {
            [elementName]: obj
        };
    }
    const result = {
        [elementName]: obj
    };
    result[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["XML_ATTRKEY"]] = {
        [xmlNamespaceKey]: xmlNamespace
    };
    return result;
} //# sourceMappingURL=serializationPolicy.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/pipeline.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "createClientPipeline": (()=>createClientPipeline)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$deserializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/deserializationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$bearerTokenAuthenticationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$createPipelineFromOptions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializationPolicy.js [app-route] (ecmascript)");
;
;
;
function createClientPipeline(options = {}) {
    const pipeline = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$createPipelineFromOptions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createPipelineFromOptions"])(options !== null && options !== void 0 ? options : {});
    if (options.credentialOptions) {
        pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$policies$2f$bearerTokenAuthenticationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["bearerTokenAuthenticationPolicy"])({
            credential: options.credentialOptions.credential,
            scopes: options.credentialOptions.credentialScopes
        }));
    }
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializationPolicy"])(options.serializationOptions), {
        phase: "Serialize"
    });
    pipeline.addPolicy((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$deserializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["deserializationPolicy"])(options.deserializationOptions), {
        phase: "Deserialize"
    });
    return pipeline;
} //# sourceMappingURL=pipeline.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/httpClientCache.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "getCachedDefaultHttpClient": (()=>getCachedDefaultHttpClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$defaultHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js [app-route] (ecmascript)");
;
let cachedHttpClient;
function getCachedDefaultHttpClient() {
    if (!cachedHttpClient) {
        cachedHttpClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$defaultHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createDefaultHttpClient"])();
    }
    return cachedHttpClient;
} //# sourceMappingURL=httpClientCache.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/urlHelpers.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "appendQueryParams": (()=>appendQueryParams),
    "getRequestUrl": (()=>getRequestUrl)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/operationHelpers.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaceHelpers.js [app-route] (ecmascript)");
;
;
const CollectionFormatToDelimiterMap = {
    CSV: ",",
    SSV: " ",
    Multi: "Multi",
    TSV: "\t",
    Pipes: "|"
};
function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {
    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);
    let isAbsolutePath = false;
    let requestUrl = replaceAll(baseUri, urlReplacements);
    if (operationSpec.path) {
        let path = replaceAll(operationSpec.path, urlReplacements);
        // QUIRK: sometimes we get a path component like /{nextLink}
        // which may be a fully formed URL with a leading /. In that case, we should
        // remove the leading /
        if (operationSpec.path === "/{nextLink}" && path.startsWith("/")) {
            path = path.substring(1);
        }
        // QUIRK: sometimes we get a path component like {nextLink}
        // which may be a fully formed URL. In that case, we should
        // ignore the baseUri.
        if (isAbsoluteUrl(path)) {
            requestUrl = path;
            isAbsolutePath = true;
        } else {
            requestUrl = appendPath(requestUrl, path);
        }
    }
    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);
    /**
     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`
     * is an absolute path. This ensures that existing query parameter values in `requestUrl`
     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it
     * is still being built so there is nothing to overwrite.
     */ requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);
    return requestUrl;
}
function replaceAll(input, replacements) {
    let result = input;
    for (const [searchValue, replaceValue] of replacements){
        result = result.split(searchValue).join(replaceValue);
    }
    return result;
}
function calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {
    var _a;
    const result = new Map();
    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {
        for (const urlParameter of operationSpec.urlParameters){
            let urlParameterValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationArgumentValueFromParameter"])(operationArguments, urlParameter, fallbackObject);
            const parameterPathString = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(urlParameter);
            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);
            if (!urlParameter.skipEncoding) {
                urlParameterValue = encodeURIComponent(urlParameterValue);
            }
            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);
        }
    }
    return result;
}
function isAbsoluteUrl(url) {
    return url.includes("://");
}
function appendPath(url, pathToAppend) {
    if (!pathToAppend) {
        return url;
    }
    const parsedUrl = new URL(url);
    let newPath = parsedUrl.pathname;
    if (!newPath.endsWith("/")) {
        newPath = `${newPath}/`;
    }
    if (pathToAppend.startsWith("/")) {
        pathToAppend = pathToAppend.substring(1);
    }
    const searchStart = pathToAppend.indexOf("?");
    if (searchStart !== -1) {
        const path = pathToAppend.substring(0, searchStart);
        const search = pathToAppend.substring(searchStart + 1);
        newPath = newPath + path;
        if (search) {
            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;
        }
    } else {
        newPath = newPath + pathToAppend;
    }
    parsedUrl.pathname = newPath;
    return parsedUrl.toString();
}
function calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {
    var _a;
    const result = new Map();
    const sequenceParams = new Set();
    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {
        for (const queryParameter of operationSpec.queryParameters){
            if (queryParameter.mapper.type.name === "Sequence" && queryParameter.mapper.serializedName) {
                sequenceParams.add(queryParameter.mapper.serializedName);
            }
            let queryParameterValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationArgumentValueFromParameter"])(operationArguments, queryParameter, fallbackObject);
            if (queryParameterValue !== undefined && queryParameterValue !== null || queryParameter.mapper.required) {
                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(queryParameter));
                const delimiter = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : "";
                if (Array.isArray(queryParameterValue)) {
                    // replace null and undefined
                    queryParameterValue = queryParameterValue.map((item)=>{
                        if (item === null || item === undefined) {
                            return "";
                        }
                        return item;
                    });
                }
                if (queryParameter.collectionFormat === "Multi" && queryParameterValue.length === 0) {
                    continue;
                } else if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "SSV" || queryParameter.collectionFormat === "TSV")) {
                    queryParameterValue = queryParameterValue.join(delimiter);
                }
                if (!queryParameter.skipEncoding) {
                    if (Array.isArray(queryParameterValue)) {
                        queryParameterValue = queryParameterValue.map((item)=>{
                            return encodeURIComponent(item);
                        });
                    } else {
                        queryParameterValue = encodeURIComponent(queryParameterValue);
                    }
                }
                // Join pipes and CSV *after* encoding, or the server will be upset.
                if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "CSV" || queryParameter.collectionFormat === "Pipes")) {
                    queryParameterValue = queryParameterValue.join(delimiter);
                }
                result.set(queryParameter.mapper.serializedName || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getPathStringFromParameter"])(queryParameter), queryParameterValue);
            }
        }
    }
    return {
        queryParams: result,
        sequenceParams
    };
}
function simpleParseQueryParams(queryString) {
    const result = new Map();
    if (!queryString || queryString[0] !== "?") {
        return result;
    }
    // remove the leading ?
    queryString = queryString.slice(1);
    const pairs = queryString.split("&");
    for (const pair of pairs){
        const [name, value] = pair.split("=", 2);
        const existingValue = result.get(name);
        if (existingValue) {
            if (Array.isArray(existingValue)) {
                existingValue.push(value);
            } else {
                result.set(name, [
                    existingValue,
                    value
                ]);
            }
        } else {
            result.set(name, value);
        }
    }
    return result;
}
function appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {
    if (queryParams.size === 0) {
        return url;
    }
    const parsedUrl = new URL(url);
    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which
    // can change their meaning to the server, such as in the case of a SAS signature.
    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves
    const combinedParams = simpleParseQueryParams(parsedUrl.search);
    for (const [name, value] of queryParams){
        const existingValue = combinedParams.get(name);
        if (Array.isArray(existingValue)) {
            if (Array.isArray(value)) {
                existingValue.push(...value);
                const valueSet = new Set(existingValue);
                combinedParams.set(name, Array.from(valueSet));
            } else {
                existingValue.push(value);
            }
        } else if (existingValue) {
            if (Array.isArray(value)) {
                value.unshift(existingValue);
            } else if (sequenceParams.has(name)) {
                combinedParams.set(name, [
                    existingValue,
                    value
                ]);
            }
            if (!noOverwrite) {
                combinedParams.set(name, value);
            }
        } else {
            combinedParams.set(name, value);
        }
    }
    const searchPieces = [];
    for (const [name, value] of combinedParams){
        if (typeof value === "string") {
            searchPieces.push(`${name}=${value}`);
        } else if (Array.isArray(value)) {
            // QUIRK: If we get an array of values, include multiple key/value pairs
            for (const subValue of value){
                searchPieces.push(`${name}=${subValue}`);
            }
        } else {
            searchPieces.push(`${name}=${value}`);
        }
    }
    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.
    parsedUrl.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
    return parsedUrl.toString();
} //# sourceMappingURL=urlHelpers.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/log.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "logger": (()=>logger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/logger/dist/esm/index.js [app-route] (ecmascript)");
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$logger$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createClientLogger"])("core-client"); //# sourceMappingURL=log.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/serviceClient.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "ServiceClient": (()=>ServiceClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/pipeline.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/utils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$httpClientCache$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/httpClientCache.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/operationHelpers.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$urlHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/urlHelpers.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaceHelpers.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/log.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
class ServiceClient {
    /**
     * The ServiceClient constructor
     * @param options - The service client options that govern the behavior of the client.
     */ constructor(options = {}){
        var _a, _b;
        this._requestContentType = options.requestContentType;
        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;
        if (options.baseUri) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"].warning("The baseUri option for SDK Clients has been deprecated, please use endpoint instead.");
        }
        this._allowInsecureConnection = options.allowInsecureConnection;
        this._httpClient = options.httpClient || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$httpClientCache$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getCachedDefaultHttpClient"])();
        this.pipeline = options.pipeline || createDefaultPipeline(options);
        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {
            for (const { policy, position } of options.additionalPolicies){
                // Sign happens after Retry and is commonly needed to occur
                // before policies that intercept post-retry.
                const afterPhase = position === "perRetry" ? "Sign" : undefined;
                this.pipeline.addPolicy(policy, {
                    afterPhase
                });
            }
        }
    }
    /**
     * Send the provided httpRequest.
     */ async sendRequest(request) {
        return this.pipeline.sendRequest(this._httpClient, request);
    }
    /**
     * Send an HTTP request that is populated using the provided OperationSpec.
     * @typeParam T - The typed result of the request, based on the OperationSpec.
     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
     * @param operationSpec - The OperationSpec to use to populate the httpRequest.
     */ async sendOperationRequest(operationArguments, operationSpec) {
        const endpoint = operationSpec.baseUrl || this._endpoint;
        if (!endpoint) {
            throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.");
        }
        // Templatized URLs sometimes reference properties on the ServiceClient child class,
        // so we have to pass `this` below in order to search these properties if they're
        // not part of OperationArguments
        const url = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$urlHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getRequestUrl"])(endpoint, operationSpec, operationArguments, this);
        const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$rest$2d$pipeline$2f$dist$2f$esm$2f$pipelineRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createPipelineRequest"])({
            url
        });
        request.method = operationSpec.httpMethod;
        const operationInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$operationHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOperationRequestInfo"])(request);
        operationInfo.operationSpec = operationSpec;
        operationInfo.operationArguments = operationArguments;
        const contentType = operationSpec.contentType || this._requestContentType;
        if (contentType && operationSpec.requestBody) {
            request.headers.set("Content-Type", contentType);
        }
        const options = operationArguments.options;
        if (options) {
            const requestOptions = options.requestOptions;
            if (requestOptions) {
                if (requestOptions.timeout) {
                    request.timeout = requestOptions.timeout;
                }
                if (requestOptions.onUploadProgress) {
                    request.onUploadProgress = requestOptions.onUploadProgress;
                }
                if (requestOptions.onDownloadProgress) {
                    request.onDownloadProgress = requestOptions.onDownloadProgress;
                }
                if (requestOptions.shouldDeserialize !== undefined) {
                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;
                }
                if (requestOptions.allowInsecureConnection) {
                    request.allowInsecureConnection = true;
                }
            }
            if (options.abortSignal) {
                request.abortSignal = options.abortSignal;
            }
            if (options.tracingOptions) {
                request.tracingOptions = options.tracingOptions;
            }
        }
        if (this._allowInsecureConnection) {
            request.allowInsecureConnection = true;
        }
        if (request.streamResponseStatusCodes === undefined) {
            request.streamResponseStatusCodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaceHelpers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getStreamingResponseStatusCodes"])(operationSpec);
        }
        try {
            const rawResponse = await this.sendRequest(request);
            const flatResponse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["flattenResponse"])(rawResponse, operationSpec.responses[rawResponse.status]);
            if (options === null || options === void 0 ? void 0 : options.onResponse) {
                options.onResponse(rawResponse, flatResponse);
            }
            return flatResponse;
        } catch (error) {
            if (typeof error === "object" && (error === null || error === void 0 ? void 0 : error.response)) {
                const rawResponse = error.response;
                const flatResponse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["flattenResponse"])(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses["default"]);
                error.details = flatResponse;
                if (options === null || options === void 0 ? void 0 : options.onResponse) {
                    options.onResponse(rawResponse, flatResponse, error);
                }
            }
            throw error;
        }
    }
}
function createDefaultPipeline(options) {
    const credentialScopes = getCredentialScopes(options);
    const credentialOptions = options.credential && credentialScopes ? {
        credentialScopes,
        credential: options.credential
    } : undefined;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createClientPipeline"])(Object.assign(Object.assign({}, options), {
        credentialOptions
    }));
}
function getCredentialScopes(options) {
    if (options.credentialScopes) {
        return options.credentialScopes;
    }
    if (options.endpoint) {
        return `${options.endpoint}/.default`;
    }
    if (options.baseUri) {
        return `${options.baseUri}/.default`;
    }
    if (options.credential && !options.credentialScopes) {
        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);
    }
    return undefined;
} //# sourceMappingURL=serviceClient.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({
    "authorizeRequestOnClaimChallenge": (()=>authorizeRequestOnClaimChallenge),
    "parseCAEChallenge": (()=>parseCAEChallenge)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/log.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/base64.js [app-route] (ecmascript)");
;
;
function parseCAEChallenge(challenges) {
    const bearerChallenges = `, ${challenges.trim()}`.split(", Bearer ").filter((x)=>x);
    return bearerChallenges.map((challenge)=>{
        const challengeParts = `${challenge.trim()}, `.split('", ').filter((x)=>x);
        const keyValuePairs = challengeParts.map((keyValue)=>(([key, value])=>({
                    [key]: value
                }))(keyValue.trim().split('="')));
        // Key-value pairs to plain object:
        return keyValuePairs.reduce((a, b)=>Object.assign(Object.assign({}, a), b), {});
    });
}
async function authorizeRequestOnClaimChallenge(onChallengeOptions) {
    var _a;
    const { scopes, response } = onChallengeOptions;
    const logger = onChallengeOptions.logger || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$log$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["logger"];
    const challenge = response.headers.get("WWW-Authenticate");
    if (!challenge) {
        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);
        return false;
    }
    const challenges = parseCAEChallenge(challenge) || [];
    const parsedChallenge = challenges.find((x)=>x.claims);
    if (!parsedChallenge) {
        logger.info(`The WWW-Authenticate header was missing the necessary "claims" to perform the Continuous Access Evaluation authentication flow.`);
        return false;
    }
    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [
        parsedChallenge.scope
    ] : scopes, {
        claims: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$base64$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeStringToString"])(parsedChallenge.claims)
    });
    if (!accessToken) {
        return false;
    }
    onChallengeOptions.request.headers.set("Authorization", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : "Bearer"} ${accessToken.token}`);
    return true;
} //# sourceMappingURL=authorizeRequestOnClaimChallenge.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * A set of constants used internally when processing requests.
 */ __turbopack_context__.s({
    "authorizeRequestOnTenantChallenge": (()=>authorizeRequestOnTenantChallenge)
});
const Constants = {
    DefaultScope: "/.default",
    /**
     * Defines constants for use with HTTP headers.
     */ HeaderConstants: {
        /**
         * The Authorization header.
         */ AUTHORIZATION: "authorization"
    }
};
function isUuid(text) {
    return /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(text);
}
const authorizeRequestOnTenantChallenge = async (challengeOptions)=>{
    var _a;
    const requestOptions = requestToOptions(challengeOptions.request);
    const challenge = getChallenge(challengeOptions.response);
    if (challenge) {
        const challengeInfo = parseChallenge(challenge);
        const challengeScopes = buildScopes(challengeOptions, challengeInfo);
        const tenantId = extractTenantId(challengeInfo);
        if (!tenantId) {
            return false;
        }
        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), {
            tenantId
        }));
        if (!accessToken) {
            return false;
        }
        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : "Bearer"} ${accessToken.token}`);
        return true;
    }
    return false;
};
/**
 * Extracts the tenant id from the challenge information
 * The tenant id is contained in the authorization_uri as the first
 * path part.
 */ function extractTenantId(challengeInfo) {
    const parsedAuthUri = new URL(challengeInfo.authorization_uri);
    const pathSegments = parsedAuthUri.pathname.split("/");
    const tenantId = pathSegments[1];
    if (tenantId && isUuid(tenantId)) {
        return tenantId;
    }
    return undefined;
}
/**
 * Builds the authentication scopes based on the information that comes in the
 * challenge information. Scopes url is present in the resource_id, if it is empty
 * we keep using the original scopes.
 */ function buildScopes(challengeOptions, challengeInfo) {
    if (!challengeInfo.resource_id) {
        return challengeOptions.scopes;
    }
    const challengeScopes = new URL(challengeInfo.resource_id);
    challengeScopes.pathname = Constants.DefaultScope;
    let scope = challengeScopes.toString();
    if (scope === "https://disk.azure.com/.default") {
        // the extra slash is required by the service
        scope = "https://disk.azure.com//.default";
    }
    return [
        scope
    ];
}
/**
 * We will retrieve the challenge only if the response status code was 401,
 * and if the response contained the header "WWW-Authenticate" with a non-empty value.
 */ function getChallenge(response) {
    const challenge = response.headers.get("WWW-Authenticate");
    if (response.status === 401 && challenge) {
        return challenge;
    }
    return;
}
/**
 * Converts: `Bearer a="b" c="d"`.
 * Into: `[ { a: 'b', c: 'd' }]`.
 *
 * @internal
 */ function parseChallenge(challenge) {
    const bearerChallenge = challenge.slice("Bearer ".length);
    const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x)=>x);
    const keyValuePairs = challengeParts.map((keyValue)=>(([key, value])=>({
                [key]: value
            }))(keyValue.trim().split("=")));
    // Key-value pairs to plain object:
    return keyValuePairs.reduce((a, b)=>Object.assign(Object.assign({}, a), b), {});
}
/**
 * Extracts the options form a Pipeline Request for later re-use
 */ function requestToOptions(request) {
    return {
        abortSignal: request.abortSignal,
        requestOptions: {
            timeout: request.timeout
        },
        tracingOptions: request.tracingOptions
    };
} //# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map
}}),
"[project]/node_modules/@azure/core-client/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serviceClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serviceClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/pipeline.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaces.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$deserializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/deserializationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$authorizeRequestOnClaimChallenge$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$authorizeRequestOnTenantChallenge$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js [app-route] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@azure/core-client/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serviceClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serviceClient.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$pipeline$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/pipeline.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$interfaces$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/interfaces.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$deserializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/deserializationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$serializationPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/serializationPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$authorizeRequestOnClaimChallenge$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$authorizeRequestOnTenantChallenge$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$azure$2f$core$2d$client$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@azure/core-client/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_%40azure_c3050498._.js.map