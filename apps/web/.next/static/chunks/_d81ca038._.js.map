{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/app/agentset/apps/web/src/contexts/namespace-context.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, use, useEffect, useState } from \"react\";\r\n\r\nimport type { Namespace } from \"@agentset/db\";\r\n\r\nimport { useOrganization } from \"./organization-context\";\r\n\r\ninterface NamespaceContextType {\r\n  activeNamespace: Namespace;\r\n  setActiveNamespace: (namespace: Namespace) => void;\r\n}\r\n\r\nconst NamespaceContext = createContext<NamespaceContextType>(\r\n  null as unknown as NamespaceContextType,\r\n);\r\n\r\nexport function NamespaceProvider({\r\n  children,\r\n  activeNamespace: initialActiveNamespace,\r\n}: {\r\n  children: React.ReactNode;\r\n  activeNamespace: Namespace;\r\n}) {\r\n  const [activeNamespace, setActiveNamespace] = useState<Namespace>(\r\n    initialActiveNamespace,\r\n  );\r\n\r\n  useEffect(() => {\r\n    setActiveNamespace(initialActiveNamespace);\r\n  }, [initialActiveNamespace]);\r\n\r\n  return (\r\n    <NamespaceContext.Provider value={{ activeNamespace, setActiveNamespace }}>\r\n      {children}\r\n    </NamespaceContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNamespace() {\r\n  const context = use(NamespaceContext);\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n  if (!context) {\r\n    throw new Error(\"useNamespace must be used within a NamespaceProvider\");\r\n  }\r\n\r\n  const { activeOrganization } = useOrganization();\r\n\r\n  return {\r\n    ...context,\r\n    organization: activeOrganization,\r\n    baseUrl: `/${activeOrganization.slug}/${context.activeNamespace.slug}`,\r\n  };\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAIA;;;AANA;;;AAaA,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EACnC;AAGK,SAAS,kBAAkB,EAChC,QAAQ,EACR,iBAAiB,sBAAsB,EAIxC;;IACC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EACnD;IAGF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uCAAE;YACR,mBAAmB;QACrB;sCAAG;QAAC;KAAuB;IAE3B,qBACE,6LAAC,iBAAiB,QAAQ;QAAC,OAAO;YAAE;YAAiB;QAAmB;kBACrE;;;;;;AAGP;GApBgB;KAAA;AAsBT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,MAAG,AAAD,EAAE;IAEpB,uEAAuE;IACvE,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EAAE,kBAAkB,EAAE,GAAG,CAAA,GAAA,6JAAA,CAAA,kBAAe,AAAD;IAE7C,OAAO;QACL,GAAG,OAAO;QACV,cAAc;QACd,SAAS,CAAC,CAAC,EAAE,mBAAmB,IAAI,CAAC,CAAC,EAAE,QAAQ,eAAe,CAAC,IAAI,EAAE;IACxE;AACF;IAfgB;;QAQiB,6JAAA,CAAA,kBAAe","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/app/agentset/node_modules/%40tanstack/react-query/src/HydrationBoundary.tsx"],"sourcesContent":["/* eslint-disable react-compiler/react-compiler */\n\n'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  OmitKeyof,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: OmitKeyof<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: OmitKeyof<\n      Exclude<HydrateOptions['defaultOptions'], undefined>,\n      'mutations'\n    >\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nconst hasProperty = <TKey extends string>(\n  obj: unknown,\n  key: TKey,\n): obj is { [k in TKey]: unknown } => {\n  return typeof obj === 'object' && obj !== null && key in obj\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n              existingQuery.state.dataUpdatedAt || // RSC special serialized then-able chunks\n            (hasProperty(dehydratedQuery.promise, 'status') &&\n              hasProperty(existingQuery.promise, 'status') &&\n              dehydratedQuery.promise.status !== existingQuery.promise.status)\n\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n"],"names":[],"mappings":";;;;AAGA,YAAY,WAAW;AAEvB,SAAS,eAAe;AACxB,SAAS,sBAAsB;;;;;AAoB/B,IAAM,cAAc,CAClB,KACA,QACoC;IACpC,OAAO,OAAO,QAAQ,YAAY,QAAQ,QAAQ,OAAO;AAC3D;AAEO,IAAM,oBAAoB,CAAC,EAChC,QAAA,EACA,UAAU,CAAC,CAAA,EACX,KAAA,EACA,WAAA,EACF,KAA8B;IAC5B,MAAM,uMAAS,iBAAA,EAAe,WAAW;IACzC,MAAM,CAAC,gBAAgB,iBAAiB,CAAA,qKAAU,WAAA,CAEhD;IAEF,MAAM,+KAAmB,SAAA,EAAO,OAAO;IACvC,WAAW,OAAA,GAAU;sKAiBf,UAAA;qCAAQ,MAAM;YAClB,IAAI,OAAO;gBACT,IAAI,OAAO,UAAU,UAAU;oBAC7B;gBACF;gBAEA,MAAM,aAAa,OAAO,aAAA,CAAc;gBAExC,MAAM,UAAW,MAA0B,OAAA,IAAW,CAAC,CAAA;gBAEvD,MAAM,aAAyC,CAAC,CAAA;gBAChD,MAAM,kBAA8C,CAAC,CAAA;gBACrD,KAAA,MAAW,mBAAmB,QAAS;oBACrC,MAAM,gBAAgB,WAAW,GAAA,CAAI,gBAAgB,SAAS;oBAE9D,IAAI,CAAC,eAAe;wBAClB,WAAW,IAAA,CAAK,eAAe;oBACjC,OAAO;wBACL,MAAM,mBACJ,gBAAgB,KAAA,CAAM,aAAA,GACpB,cAAc,KAAA,CAAM,aAAA,IAAA,0CAAA;wBACrB,YAAY,gBAAgB,OAAA,EAAS,QAAQ,KAC5C,YAAY,cAAc,OAAA,EAAS,QAAQ,KAC3C,gBAAgB,OAAA,CAAQ,MAAA,KAAW,cAAc,OAAA,CAAQ,MAAA;wBAE7D,MAAM,qBAAqB,gBAAgB;yDACzC,CAAC,QAAU,MAAM,SAAA,KAAc,gBAAgB,SAAA;;wBAGjD,IACE,oBAAA,CACC,CAAC,sBACA,gBAAgB,KAAA,CAAM,aAAA,GACpB,mBAAmB,KAAA,CAAM,aAAA,GAC7B;4BACA,gBAAgB,IAAA,CAAK,eAAe;wBACtC;oBACF;gBACF;gBAEA,IAAI,WAAW,MAAA,GAAS,GAAG;oBAGzB,CAAA,GAAA,8KAAA,CAAA,UAAA,EAAQ,QAAQ;wBAAE,SAAS;oBAAW,GAAG,WAAW,OAAO;gBAC7D;gBACA,IAAI,gBAAgB,MAAA,GAAS,GAAG;oBAC9B;qDAAkB,CAAC,OACjB,OAAO,CAAC;mCAAG,MAAM;mCAAG,eAAe;6BAAA,GAAI;;gBAE3C;YACF;QACF;oCAAG;QAAC;QAAQ;QAAgB,KAAK;KAAC;sKAE5B,YAAA;uCAAU,MAAM;YACpB,IAAI,gBAAgB;gBAClB,CAAA,GAAA,8KAAA,CAAA,UAAA,EAAQ,QAAQ;oBAAE,SAAS;gBAAe,GAAG,WAAW,OAAO;gBAC/D,kBAAkB,KAAA,CAAS;YAC7B;QACF;sCAAG;QAAC;QAAQ,cAAc;KAAC;IAE3B,OAAO;AACT","ignoreList":[0],"debugId":null}}]
}