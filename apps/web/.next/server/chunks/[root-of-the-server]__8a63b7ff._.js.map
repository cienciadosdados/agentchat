{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///C:/app/agentset/apps/web/src/lib/uploadthing.ts"],"sourcesContent":["import { createUploadthing, type FileRouter } from \"uploadthing/next\";\nimport { UploadThingError } from \"uploadthing/server\";\nimport { env } from \"~/env\";\n\nconst f = createUploadthing();\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({ image: { maxFileSize: \"4MB\", maxFileCount: 1 } })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req }) => {\n      // This code runs on your server before upload\n      // You can add authentication here if needed\n      return { userId: \"user\" }; // Whatever is returned here is accessible in onUploadComplete as `metadata`\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId, url: file.url };\n    }),\n\n  // Multiple file upload route\n  multipleImageUploader: f({ \n    image: { maxFileSize: \"4MB\", maxFileCount: 10 } \n  })\n    .middleware(async ({ req }) => {\n      return { userId: \"user\" };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId, url: file.url };\n    }),\n\n  // Document uploader\n  documentUploader: f({ \n    pdf: { maxFileSize: \"16MB\", maxFileCount: 1 },\n    text: { maxFileSize: \"4MB\", maxFileCount: 1 }\n  })\n    .middleware(async ({ req }) => {\n      return { userId: \"user\" };\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      console.log(\"Upload complete for userId:\", metadata.userId);\n      console.log(\"file url\", file.url);\n      return { uploadedBy: metadata.userId, url: file.url };\n    }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n"],"names":[],"mappings":";;;AAAA;;AAIA,MAAM,IAAI,CAAA,GAAA,8JAAA,CAAA,oBAAiB,AAAD;AAGnB,MAAM,gBAAgB;IAC3B,sEAAsE;IACtE,eAAe,EAAE;QAAE,OAAO;YAAE,aAAa;YAAO,cAAc;QAAE;IAAE,EAChE,oDAAoD;KACnD,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACxB,8CAA8C;QAC9C,4CAA4C;QAC5C,OAAO;YAAE,QAAQ;QAAO,GAAG,4EAA4E;IACzG,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,6CAA6C;QAC7C,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAC1D,QAAQ,GAAG,CAAC,YAAY,KAAK,GAAG;QAEhC,4FAA4F;QAC5F,OAAO;YAAE,YAAY,SAAS,MAAM;YAAE,KAAK,KAAK,GAAG;QAAC;IACtD;IAEF,6BAA6B;IAC7B,uBAAuB,EAAE;QACvB,OAAO;YAAE,aAAa;YAAO,cAAc;QAAG;IAChD,GACG,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACxB,OAAO;YAAE,QAAQ;QAAO;IAC1B,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAC1D,QAAQ,GAAG,CAAC,YAAY,KAAK,GAAG;QAChC,OAAO;YAAE,YAAY,SAAS,MAAM;YAAE,KAAK,KAAK,GAAG;QAAC;IACtD;IAEF,oBAAoB;IACpB,kBAAkB,EAAE;QAClB,KAAK;YAAE,aAAa;YAAQ,cAAc;QAAE;QAC5C,MAAM;YAAE,aAAa;YAAO,cAAc;QAAE;IAC9C,GACG,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACxB,OAAO;YAAE,QAAQ;QAAO;IAC1B,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAC1D,QAAQ,GAAG,CAAC,YAAY,KAAK,GAAG;QAChC,OAAO;YAAE,YAAY,SAAS,MAAM;YAAE,KAAK,KAAK,GAAG;QAAC;IACtD;AACJ","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///C:/app/agentset/apps/web/src/app/api/uploadthing/route.ts"],"sourcesContent":["import { createRouteHandler } from \"uploadthing/next\";\n \nimport { ourFileRouter } from \"@/lib/uploadthing\";\n \n// Export routes for Next App Router\nexport const { GET, POST } = createRouteHandler({\n  router: ourFileRouter,\n  config: {\n    // Optional: Add custom config here\n  },\n});\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAGO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD,EAAE;IAC9C,QAAQ,0IAAA,CAAA,gBAAa;IACrB,QAAQ;IAER;AACF","debugId":null}}]
}