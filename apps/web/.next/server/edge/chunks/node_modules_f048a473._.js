(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["chunks/node_modules_f048a473._.js", {

"[project]/node_modules/@t3-oss/env-core/dist/index.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEnv": (()=>createEnv)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/lib/index.mjs [middleware-edge] (ecmascript)");
;
function createEnv(opts) {
    const runtimeEnv = opts.runtimeEnvStrict ?? opts.runtimeEnv ?? process.env;
    const emptyStringAsUndefined = opts.emptyStringAsUndefined ?? false;
    if (emptyStringAsUndefined) {
        for (const [key, value] of Object.entries(runtimeEnv)){
            if (value === "") {
                delete runtimeEnv[key];
            }
        }
    }
    const skip = !!opts.skipValidation;
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
    if (skip) return runtimeEnv;
    const _client = typeof opts.client === "object" ? opts.client : {};
    const _server = typeof opts.server === "object" ? opts.server : {};
    const _shared = typeof opts.shared === "object" ? opts.shared : {};
    const client = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["object"])(_client);
    const server = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["object"])(_server);
    const shared = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["object"])(_shared);
    const isServer = opts.isServer ?? ("undefined" === "undefined" || "Deno" in window);
    const allClient = client.merge(shared);
    const allServer = server.merge(shared).merge(client);
    const parsed = isServer ? allServer.safeParse(runtimeEnv) // on server we can validate all env vars
     : allClient.safeParse(runtimeEnv); // on client we can only validate the ones that are exposed
    const onValidationError = opts.onValidationError ?? ((error)=>{
        console.error("❌ Invalid environment variables:", error.flatten().fieldErrors);
        throw new Error("Invalid environment variables");
    });
    const onInvalidAccess = opts.onInvalidAccess ?? ((_variable)=>{
        throw new Error("❌ Attempted to access a server-side environment variable on the client");
    });
    if (parsed.success === false) {
        return onValidationError(parsed.error);
    }
    const isServerAccess = (prop)=>{
        if (!opts.clientPrefix) return true;
        return !prop.startsWith(opts.clientPrefix) && !(prop in shared.shape);
    };
    const isValidServerAccess = (prop)=>{
        return isServer || !isServerAccess(prop);
    };
    const ignoreProp = (prop)=>{
        return prop === "__esModule" || prop === "$$typeof";
    };
    const extendedObj = (opts.extends ?? []).reduce((acc, curr)=>{
        return Object.assign(acc, curr);
    }, {});
    const fullObj = Object.assign(parsed.data, extendedObj);
    const env = new Proxy(fullObj, {
        get (target, prop) {
            if (typeof prop !== "string") return undefined;
            if (ignoreProp(prop)) return undefined;
            if (!isValidServerAccess(prop)) return onInvalidAccess(prop);
            return Reflect.get(target, prop);
        }
    });
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
    return env;
}
;
}}),
"[project]/node_modules/@t3-oss/env-nextjs/dist/index.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEnv": (()=>createEnv)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$t3$2d$oss$2f$env$2d$core$2f$dist$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@t3-oss/env-core/dist/index.js [middleware-edge] (ecmascript)");
;
const CLIENT_PREFIX = "NEXT_PUBLIC_";
function createEnv(opts) {
    const client = typeof opts.client === "object" ? opts.client : {};
    const server = typeof opts.server === "object" ? opts.server : {};
    const shared = opts.shared;
    const runtimeEnv = opts.runtimeEnv ? opts.runtimeEnv : {
        ...process.env,
        ...opts.experimental__runtimeEnv
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$t3$2d$oss$2f$env$2d$core$2f$dist$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createEnv"])({
        ...opts,
        shared,
        client,
        server,
        clientPrefix: CLIENT_PREFIX,
        runtimeEnv
    });
}
;
}}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "B": (()=>BetterAuthError),
    "M": (()=>MissingDependencyError)
});
class BetterAuthError extends Error {
    constructor(message, cause){
        super(message);
        this.name = "BetterAuthError";
        this.message = message;
        this.cause = cause;
        this.stack = "";
    }
}
class MissingDependencyError extends BetterAuthError {
    constructor(pkgName){
        super(`The package "${pkgName}" is required. Make sure it is installed.`, pkgName);
    }
}
;
}}),
"[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "g": (()=>getDate)
});
const getDate = (span, unit = "ms")=>{
    return new Date(Date.now() + (unit === "sec" ? span * 1e3 : span));
};
;
}}),
"[project]/node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "a": (()=>isProduction),
    "b": (()=>isDevelopment),
    "e": (()=>env),
    "i": (()=>isTest)
});
const _envShim = /* @__PURE__ */ Object.create(null);
const _getEnv = (useShim)=>globalThis.process?.env || //@ts-expect-error
    globalThis.Deno?.env.toObject() || //@ts-expect-error
    globalThis.__env__ || (useShim ? _envShim : globalThis);
const env = new Proxy(_envShim, {
    get (_, prop) {
        const env2 = _getEnv();
        return env2[prop] ?? _envShim[prop];
    },
    has (_, prop) {
        const env2 = _getEnv();
        return prop in env2 || prop in _envShim;
    },
    set (_, prop, value) {
        const env2 = _getEnv(true);
        env2[prop] = value;
        return true;
    },
    deleteProperty (_, prop) {
        if (!prop) {
            return false;
        }
        const env2 = _getEnv(true);
        delete env2[prop];
        return true;
    },
    ownKeys () {
        const env2 = _getEnv(true);
        return Object.keys(env2);
    }
});
function toBoolean(val) {
    return val ? val !== "false" : false;
}
const nodeENV = typeof process !== "undefined" && process.env && ("TURBOPACK compile-time value", "development") || "";
const isProduction = nodeENV === "production";
const isDevelopment = nodeENV === "dev" || nodeENV === "development";
const isTest = nodeENV === "test" || toBoolean(env.TEST);
;
}}),
"[project]/node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "s": (()=>safeJSONParse)
});
function safeJSONParse(data) {
    function reviver(_, value) {
        if (typeof value === "string") {
            const iso8601Regex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?Z$/;
            if (iso8601Regex.test(value)) {
                const date = new Date(value);
                if (!isNaN(date.getTime())) {
                    return date;
                }
            }
        }
        return value;
    }
    try {
        return JSON.parse(data, reviver);
    } catch  {
        return null;
    }
}
;
}}),
"[project]/node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "a": (()=>getBaseURL),
    "b": (()=>getHost),
    "c": (()=>getProtocol),
    "g": (()=>getOrigin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [middleware-edge] (ecmascript)");
;
;
function checkHasPath(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.pathname !== "/";
    } catch (error) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["B"](`Invalid base URL: ${url}. Please provide a valid base URL.`);
    }
}
function withPath(url, path = "/api/auth") {
    const hasPath = checkHasPath(url);
    if (hasPath) {
        return url;
    }
    path = path.startsWith("/") ? path : `/${path}`;
    return `${url.replace(/\/+$/, "")}${path}`;
}
function getBaseURL(url, path, request) {
    if (url) {
        return withPath(url, path);
    }
    const fromEnv = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].NEXT_PUBLIC_BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].PUBLIC_BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].NUXT_PUBLIC_BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].NUXT_PUBLIC_AUTH_URL || (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].BASE_URL !== "/" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["e"].BASE_URL : void 0);
    if (fromEnv) {
        return withPath(fromEnv, path);
    }
    const fromRequest = request?.headers.get("x-forwarded-host");
    const fromRequestProto = request?.headers.get("x-forwarded-proto");
    if (fromRequest && fromRequestProto) {
        return withPath(`${fromRequestProto}://${fromRequest}`, path);
    }
    if (request) {
        const url2 = getOrigin(request.url);
        if (!url2) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["B"]("Could not get origin from request. Please provide a valid base URL.");
        }
        return withPath(url2, path);
    }
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    return void 0;
}
function getOrigin(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.origin;
    } catch (error) {
        return null;
    }
}
function getProtocol(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.protocol;
    } catch (error) {
        return null;
    }
}
function getHost(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.host;
    } catch (error) {
        return url;
    }
}
;
}}),
"[project]/node_modules/better-auth/dist/cookies/index.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCookieGetter": (()=>createCookieGetter),
    "deleteSessionCookie": (()=>deleteSessionCookie),
    "getCookieCache": (()=>getCookieCache),
    "getCookies": (()=>getCookies),
    "getSessionCookie": (()=>getSessionCookie),
    "parseCookies": (()=>parseCookies),
    "parseSetCookieHeader": (()=>parseSetCookieHeader),
    "setCookieCache": (()=>setCookieCache),
    "setCookieToHeader": (()=>setCookieToHeader),
    "setSessionCookie": (()=>setSessionCookie)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$tB5eU6EY$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$VTXNLFMT$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs [middleware-edge] (ecmascript)");
;
;
;
;
;
;
;
const createTime = (value, format)=>{
    const toMilliseconds = ()=>{
        switch(format){
            case "ms":
                return value;
            case "s":
                return value * 1e3;
            case "m":
                return value * 1e3 * 60;
            case "h":
                return value * 1e3 * 60 * 60;
            case "d":
                return value * 1e3 * 60 * 60 * 24;
            case "w":
                return value * 1e3 * 60 * 60 * 24 * 7;
            case "y":
                return value * 1e3 * 60 * 60 * 24 * 365;
        }
    };
    const time = {
        t: `${value}${format}`,
        value,
        tFormat: format,
        toMilliseconds,
        toSeconds: ()=>time.toMilliseconds() / 1e3,
        toMinutes: ()=>time.toSeconds() / 60,
        toHours: ()=>time.toMinutes() / 60,
        toDays: ()=>time.toHours() / 24,
        toWeeks: ()=>time.toDays() / 7,
        toYears: ()=>time.toDays() / 365,
        getDate: ()=>new Date(Date.now() + time.toMilliseconds()),
        add: (other)=>{
            const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
            return createTime(time.toMilliseconds() + otherMs, "ms");
        },
        subtract: (other)=>{
            const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
            return createTime(time.toMilliseconds() - otherMs, "ms");
        },
        multiply: (factor)=>createTime(time.toMilliseconds() * factor, "ms"),
        divide: (divisor)=>createTime(time.toMilliseconds() / divisor, "ms"),
        equals: (other)=>{
            const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
            return time.toMilliseconds() === otherMs;
        },
        lessThan: (other)=>{
            const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
            return time.toMilliseconds() < otherMs;
        },
        greaterThan: (other)=>{
            const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
            return time.toMilliseconds() > otherMs;
        },
        format: (pattern)=>{
            const date = time.getDate();
            return pattern.replace(/YYYY|MM|DD|HH|mm|ss/g, (match)=>{
                switch(match){
                    case "YYYY":
                        return date.getFullYear().toString();
                    case "MM":
                        return (date.getMonth() + 1).toString().padStart(2, "0");
                    case "DD":
                        return date.getDate().toString().padStart(2, "0");
                    case "HH":
                        return date.getHours().toString().padStart(2, "0");
                    case "mm":
                        return date.getMinutes().toString().padStart(2, "0");
                    case "ss":
                        return date.getSeconds().toString().padStart(2, "0");
                    default:
                        return match;
                }
            });
        },
        fromNow: ()=>{
            const ms = time.toMilliseconds();
            if (ms < 0) return time.ago();
            if (ms < 1e3) return "in a few seconds";
            if (ms < 6e4) return `in ${Math.round(ms / 1e3)} seconds`;
            if (ms < 36e5) return `in ${Math.round(ms / 6e4)} minutes`;
            if (ms < 864e5) return `in ${Math.round(ms / 36e5)} hours`;
            if (ms < 6048e5) return `in ${Math.round(ms / 864e5)} days`;
            if (ms < 26298e5) return `in ${Math.round(ms / 6048e5)} weeks`;
            if (ms < 315576e5) return `in ${Math.round(ms / 26298e5)} months`;
            return `in ${Math.round(ms / 315576e5)} years`;
        },
        ago: ()=>{
            const ms = -time.toMilliseconds();
            if (ms < 0) return time.fromNow();
            if (ms < 1e3) return "a few seconds ago";
            if (ms < 6e4) return `${Math.round(ms / 1e3)} seconds ago`;
            if (ms < 36e5) return `${Math.round(ms / 6e4)} minutes ago`;
            if (ms < 864e5) return `${Math.round(ms / 36e5)} hours ago`;
            if (ms < 6048e5) return `${Math.round(ms / 864e5)} days ago`;
            if (ms < 26298e5) return `${Math.round(ms / 6048e5)} weeks ago`;
            if (ms < 315576e5) return `${Math.round(ms / 26298e5)} months ago`;
            return `${Math.round(ms / 315576e5)} years ago`;
        }
    };
    return time;
};
const parseTime = (time)=>{
    const match = time.match(/^(\d+)(ms|s|m|h|d|w|y)$/);
    if (!match) throw new Error("Invalid time format");
    return createTime(parseInt(match[1]), match[2]);
};
function parseSetCookieHeader(setCookie) {
    const cookies = /* @__PURE__ */ new Map();
    const cookieArray = setCookie.split(", ");
    cookieArray.forEach((cookieString)=>{
        const parts = cookieString.split(";").map((part)=>part.trim());
        const [nameValue, ...attributes] = parts;
        const [name, ...valueParts] = nameValue.split("=");
        const value = valueParts.join("=");
        if (!name || value === void 0) {
            return;
        }
        const attrObj = {
            value
        };
        attributes.forEach((attribute)=>{
            const [attrName, ...attrValueParts] = attribute.split("=");
            const attrValue = attrValueParts.join("=");
            const normalizedAttrName = attrName.trim().toLowerCase();
            switch(normalizedAttrName){
                case "max-age":
                    attrObj["max-age"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;
                    break;
                case "expires":
                    attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;
                    break;
                case "domain":
                    attrObj.domain = attrValue ? attrValue.trim() : void 0;
                    break;
                case "path":
                    attrObj.path = attrValue ? attrValue.trim() : void 0;
                    break;
                case "secure":
                    attrObj.secure = true;
                    break;
                case "httponly":
                    attrObj.httponly = true;
                    break;
                case "samesite":
                    attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;
                    break;
                default:
                    attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;
                    break;
            }
        });
        cookies.set(name, attrObj);
    });
    return cookies;
}
function setCookieToHeader(headers) {
    return (context)=>{
        const setCookieHeader = context.response.headers.get("set-cookie");
        if (!setCookieHeader) {
            return;
        }
        const cookieMap = /* @__PURE__ */ new Map();
        const existingCookiesHeader = headers.get("cookie") || "";
        existingCookiesHeader.split(";").forEach((cookie)=>{
            const [name, ...rest] = cookie.trim().split("=");
            if (name && rest.length > 0) {
                cookieMap.set(name, rest.join("="));
            }
        });
        const setCookieHeaders = setCookieHeader.split(",");
        setCookieHeaders.forEach((header)=>{
            const cookies = parseSetCookieHeader(header);
            cookies.forEach((value, name)=>{
                cookieMap.set(name, value.value);
            });
        });
        const updatedCookies = Array.from(cookieMap.entries()).map(([name, value])=>`${name}=${value}`).join("; ");
        headers.set("cookie", updatedCookies);
    };
}
function createCookieGetter(options) {
    const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith("https://") ? true : false : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["a"];
    const secureCookiePrefix = secure ? "__Secure-" : "";
    const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;
    const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;
    if (crossSubdomainEnabled && !domain) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["B"]("baseURL is required when crossSubdomainCookies are enabled");
    }
    function createCookie(cookieName, overrideAttributes = {}) {
        const prefix = options.advanced?.cookiePrefix || "better-auth";
        const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;
        const attributes = options.advanced?.cookies?.[cookieName]?.attributes;
        return {
            name: `${secureCookiePrefix}${name}`,
            attributes: {
                secure: !!secureCookiePrefix,
                sameSite: "lax",
                path: "/",
                httpOnly: true,
                ...crossSubdomainEnabled ? {
                    domain
                } : {},
                ...options.advanced?.defaultCookieAttributes,
                ...overrideAttributes,
                ...attributes
            }
        };
    }
    return createCookie;
}
function getCookies(options) {
    const createCookie = createCookieGetter(options);
    const sessionMaxAge = options.session?.expiresIn || createTime(7, "d").toSeconds();
    const sessionToken = createCookie("session_token", {
        maxAge: sessionMaxAge
    });
    const sessionData = createCookie("session_data", {
        maxAge: options.session?.cookieCache?.maxAge || 60 * 5
    });
    const dontRememberToken = createCookie("dont_remember");
    return {
        sessionToken: {
            name: sessionToken.name,
            options: sessionToken.attributes
        },
        /**
     * This cookie is used to store the session data in the cookie
     * This is useful for when you want to cache the session in the cookie
     */ sessionData: {
            name: sessionData.name,
            options: sessionData.attributes
        },
        dontRememberToken: {
            name: dontRememberToken.name,
            options: dontRememberToken.attributes
        }
    };
}
async function setCookieCache(ctx, session) {
    const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;
    if (shouldStoreSessionDataInCookie) {
        const filteredSession = Object.entries(session.session).reduce((acc, [key, value])=>{
            const fieldConfig = ctx.context.options.session?.additionalFields?.[key];
            if (!fieldConfig || fieldConfig.returned !== false) {
                acc[key] = value;
            }
            return acc;
        }, {});
        const sessionData = {
            session: filteredSession,
            user: session.user
        };
        const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64Url"].encode(JSON.stringify({
            session: sessionData,
            expiresAt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["g"])(ctx.context.authCookies.sessionData.options.maxAge || 60, "sec").getTime(),
            signature: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createHMAC"])("SHA-256", "base64urlnopad").sign(ctx.context.secret, JSON.stringify({
                ...sessionData,
                expiresAt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["g"])(ctx.context.authCookies.sessionData.options.maxAge || 60, "sec").getTime()
            }))
        }), {
            padding: false
        });
        if (data.length > 4093) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["B"]("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");
        }
        ctx.setCookie(ctx.context.authCookies.sessionData.name, data, ctx.context.authCookies.sessionData.options);
    }
}
async function setSessionCookie(ctx, session, dontRememberMe, overrides) {
    const dontRememberMeCookie = await ctx.getSignedCookie(ctx.context.authCookies.dontRememberToken.name, ctx.context.secret);
    dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;
    const options = ctx.context.authCookies.sessionToken.options;
    const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;
    await ctx.setSignedCookie(ctx.context.authCookies.sessionToken.name, session.session.token, ctx.context.secret, {
        ...options,
        maxAge,
        ...overrides
    });
    if (dontRememberMe) {
        await ctx.setSignedCookie(ctx.context.authCookies.dontRememberToken.name, "true", ctx.context.secret, ctx.context.authCookies.dontRememberToken.options);
    }
    await setCookieCache(ctx, session);
    ctx.context.setNewSession(session);
    if (ctx.context.options.secondaryStorage) {
        await ctx.context.secondaryStorage?.set(session.session.token, JSON.stringify({
            user: session.user,
            session: session.session
        }), Math.floor((new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3));
    }
}
function deleteSessionCookie(ctx, skipDontRememberMe) {
    ctx.setCookie(ctx.context.authCookies.sessionToken.name, "", {
        ...ctx.context.authCookies.sessionToken.options,
        maxAge: 0
    });
    ctx.setCookie(ctx.context.authCookies.sessionData.name, "", {
        ...ctx.context.authCookies.sessionData.options,
        maxAge: 0
    });
    if (!skipDontRememberMe) {
        ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, "", {
            ...ctx.context.authCookies.dontRememberToken.options,
            maxAge: 0
        });
    }
}
function parseCookies(cookieHeader) {
    const cookies = cookieHeader.split("; ");
    const cookieMap = /* @__PURE__ */ new Map();
    cookies.forEach((cookie)=>{
        const [name, value] = cookie.split("=");
        cookieMap.set(name, value);
    });
    return cookieMap;
}
const getSessionCookie = (request, config)=>{
    if (config?.cookiePrefix) {
        if (config.cookieName) {
            config.cookiePrefix = `${config.cookiePrefix}-`;
        } else {
            config.cookiePrefix = `${config.cookiePrefix}.`;
        }
    }
    const headers = "headers" in request ? request.headers : request;
    const req = request instanceof Request ? request : void 0;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$VTXNLFMT$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["a"])(req?.url, config?.path, req);
    const cookies = headers.get("cookie");
    if (!cookies) {
        return null;
    }
    const { cookieName = "session_token", cookiePrefix = "better-auth." } = config || {};
    const name = `${cookiePrefix}${cookieName}`;
    const secureCookieName = `__Secure-${name}`;
    const parsedCookie = parseCookies(cookies);
    const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);
    if (sessionToken) {
        return sessionToken;
    }
    return null;
};
const getCookieCache = (request, config)=>{
    const headers = request instanceof Headers ? request : request.headers;
    const cookies = headers.get("cookie");
    if (!cookies) {
        return null;
    }
    const { cookieName = "session_data", cookiePrefix = "better-auth" } = config || {};
    const name = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$8zoxzg$2d$F$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["a"] ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}`;
    const parsedCookie = parseCookies(cookies);
    const sessionData = parsedCookie.get(name);
    if (sessionData) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$tB5eU6EY$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["s"])(sessionData);
    }
    return null;
};
;
}}),
"[project]/node_modules/@better-auth/utils/dist/base64.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "base64": (()=>base64),
    "base64Url": (()=>base64Url)
});
function getAlphabet(urlSafe) {
    return urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
}
function base64Encode(data, alphabet, padding) {
    let result = "";
    let buffer = 0;
    let shift = 0;
    for (const byte of data){
        buffer = buffer << 8 | byte;
        shift += 8;
        while(shift >= 6){
            shift -= 6;
            result += alphabet[buffer >> shift & 63];
        }
    }
    if (shift > 0) {
        result += alphabet[buffer << 6 - shift & 63];
    }
    if (padding) {
        const padCount = (4 - result.length % 4) % 4;
        result += "=".repeat(padCount);
    }
    return result;
}
function base64Decode(data, alphabet) {
    const decodeMap = /* @__PURE__ */ new Map();
    for(let i = 0; i < alphabet.length; i++){
        decodeMap.set(alphabet[i], i);
    }
    const result = [];
    let buffer = 0;
    let bitsCollected = 0;
    for (const char of data){
        if (char === "=") break;
        const value = decodeMap.get(char);
        if (value === void 0) {
            throw new Error(`Invalid Base64 character: ${char}`);
        }
        buffer = buffer << 6 | value;
        bitsCollected += 6;
        if (bitsCollected >= 8) {
            bitsCollected -= 8;
            result.push(buffer >> bitsCollected & 255);
        }
    }
    return Uint8Array.from(result);
}
const base64 = {
    encode (data, options = {}) {
        const alphabet = getAlphabet(false);
        const buffer = typeof data === "string" ? new TextEncoder().encode(data) : new Uint8Array(data);
        return base64Encode(buffer, alphabet, options.padding ?? true);
    },
    decode (data) {
        if (typeof data !== "string") {
            data = new TextDecoder().decode(data);
        }
        const urlSafe = data.includes("-") || data.includes("_");
        const alphabet = getAlphabet(urlSafe);
        return base64Decode(data, alphabet);
    }
};
const base64Url = {
    encode (data, options = {}) {
        const alphabet = getAlphabet(true);
        const buffer = typeof data === "string" ? new TextEncoder().encode(data) : new Uint8Array(data);
        return base64Encode(buffer, alphabet, options.padding ?? true);
    },
    decode (data) {
        const urlSafe = data.includes("-") || data.includes("_");
        const alphabet = getAlphabet(urlSafe);
        return base64Decode(data, alphabet);
    }
};
;
}}),
"[project]/node_modules/@better-auth/utils/dist/hex.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "hex": (()=>hex)
});
const hexadecimal = "0123456789abcdef";
const hex = {
    encode: (data)=>{
        if (typeof data === "string") {
            data = new TextEncoder().encode(data);
        }
        if (data.byteLength === 0) {
            return "";
        }
        const buffer = new Uint8Array(data);
        let result = "";
        for (const byte of buffer){
            result += byte.toString(16).padStart(2, "0");
        }
        return result;
    },
    decode: (data)=>{
        if (!data) {
            return "";
        }
        if (typeof data === "string") {
            if (data.length % 2 !== 0) {
                throw new Error("Invalid hexadecimal string");
            }
            if (!new RegExp(`^[${hexadecimal}]+$`).test(data)) {
                throw new Error("Invalid hexadecimal string");
            }
            const result = new Uint8Array(data.length / 2);
            for(let i = 0; i < data.length; i += 2){
                result[i / 2] = parseInt(data.slice(i, i + 2), 16);
            }
            return new TextDecoder().decode(result);
        }
        return new TextDecoder().decode(data);
    }
};
;
}}),
"[project]/node_modules/@better-auth/utils/dist/hmac.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createHMAC": (()=>createHMAC)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$web$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uncrypto/dist/crypto.web.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [middleware-edge] (ecmascript)");
;
;
;
const createHMAC = (algorithm = "SHA-256", encoding = "none")=>{
    const hmac = {
        importKey: async (key, keyUsage)=>{
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$web$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["subtle"].importKey("raw", typeof key === "string" ? new TextEncoder().encode(key) : key, {
                name: "HMAC",
                hash: {
                    name: algorithm
                }
            }, false, [
                keyUsage
            ]);
        },
        sign: async (hmacKey, data)=>{
            if (typeof hmacKey === "string") {
                hmacKey = await hmac.importKey(hmacKey, "sign");
            }
            const signature = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$web$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["subtle"].sign("HMAC", hmacKey, typeof data === "string" ? new TextEncoder().encode(data) : data);
            if (encoding === "hex") {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["hex"].encode(signature);
            }
            if (encoding === "base64" || encoding === "base64url" || encoding === "base64urlnopad") {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64Url"].encode(signature, {
                    padding: encoding !== "base64urlnopad"
                });
            }
            return signature;
        },
        verify: async (hmacKey, data, signature)=>{
            if (typeof hmacKey === "string") {
                hmacKey = await hmac.importKey(hmacKey, "verify");
            }
            if (encoding === "hex") {
                signature = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["hex"].decode(signature);
            }
            if (encoding === "base64" || encoding === "base64url" || encoding === "base64urlnopad") {
                signature = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64"].decode(signature);
            }
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uncrypto$2f$dist$2f$crypto$2e$web$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["subtle"].verify("HMAC", hmacKey, typeof signature === "string" ? new TextEncoder().encode(signature) : signature, typeof data === "string" ? new TextEncoder().encode(data) : data);
        }
    };
    return hmac;
};
;
}}),
"[project]/node_modules/uncrypto/dist/crypto.web.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_crypto),
    "getRandomValues": (()=>getRandomValues),
    "randomUUID": (()=>randomUUID),
    "subtle": (()=>subtle)
});
const webCrypto = globalThis.crypto;
const subtle = webCrypto.subtle;
const randomUUID = ()=>{
    return webCrypto.randomUUID();
};
const getRandomValues = (array)=>{
    return webCrypto.getRandomValues(array);
};
const _crypto = {
    randomUUID,
    getRandomValues,
    subtle
};
;
}}),
"[project]/node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Debug": (()=>Debug),
    "clearLogs": (()=>clearLogs),
    "default": (()=>index_default),
    "getLogs": (()=>getLogs)
});
var __defProp = Object.defineProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
// ../../node_modules/.pnpm/kleur@4.1.5/node_modules/kleur/colors.mjs
var colors_exports = {};
__export(colors_exports, {
    $: ()=>$,
    bgBlack: ()=>bgBlack,
    bgBlue: ()=>bgBlue,
    bgCyan: ()=>bgCyan,
    bgGreen: ()=>bgGreen,
    bgMagenta: ()=>bgMagenta,
    bgRed: ()=>bgRed,
    bgWhite: ()=>bgWhite,
    bgYellow: ()=>bgYellow,
    black: ()=>black,
    blue: ()=>blue,
    bold: ()=>bold,
    cyan: ()=>cyan,
    dim: ()=>dim,
    gray: ()=>gray,
    green: ()=>green,
    grey: ()=>grey,
    hidden: ()=>hidden,
    inverse: ()=>inverse,
    italic: ()=>italic,
    magenta: ()=>magenta,
    red: ()=>red,
    reset: ()=>reset,
    strikethrough: ()=>strikethrough,
    underline: ()=>underline,
    white: ()=>white,
    yellow: ()=>yellow
});
var FORCE_COLOR;
var NODE_DISABLE_COLORS;
var NO_COLOR;
var TERM;
var isTTY = true;
if (typeof process !== "undefined") {
    ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
    isTTY = process.stdout && process.stdout.isTTY;
}
var $ = {
    enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== "dumb" && (FORCE_COLOR != null && FORCE_COLOR !== "0" || isTTY)
};
function init(x, y) {
    let rgx = new RegExp(`\\x1b\\[${y}m`, "g");
    let open = `\x1B[${x}m`, close = `\x1B[${y}m`;
    return function(txt) {
        if (!$.enabled || txt == null) return txt;
        return open + (!!~("" + txt).indexOf(close) ? txt.replace(rgx, close + open) : txt) + close;
    };
}
var reset = init(0, 0);
var bold = init(1, 22);
var dim = init(2, 22);
var italic = init(3, 23);
var underline = init(4, 24);
var inverse = init(7, 27);
var hidden = init(8, 28);
var strikethrough = init(9, 29);
var black = init(30, 39);
var red = init(31, 39);
var green = init(32, 39);
var yellow = init(33, 39);
var blue = init(34, 39);
var magenta = init(35, 39);
var cyan = init(36, 39);
var white = init(37, 39);
var gray = init(90, 39);
var grey = init(90, 39);
var bgBlack = init(40, 49);
var bgRed = init(41, 49);
var bgGreen = init(42, 49);
var bgYellow = init(43, 49);
var bgBlue = init(44, 49);
var bgMagenta = init(45, 49);
var bgCyan = init(46, 49);
var bgWhite = init(47, 49);
// src/index.ts
var MAX_ARGS_HISTORY = 100;
var COLORS = [
    "green",
    "yellow",
    "blue",
    "magenta",
    "cyan",
    "red"
];
var argsHistory = [];
var lastTimestamp = Date.now();
var lastColor = 0;
var processEnv = typeof process !== "undefined" ? process.env : {};
globalThis.DEBUG ??= processEnv.DEBUG ?? "";
globalThis.DEBUG_COLORS ??= processEnv.DEBUG_COLORS ? processEnv.DEBUG_COLORS === "true" : true;
var topProps = {
    enable (namespace) {
        if (typeof namespace === "string") {
            globalThis.DEBUG = namespace;
        }
    },
    disable () {
        const prev = globalThis.DEBUG;
        globalThis.DEBUG = "";
        return prev;
    },
    // this is the core logic to check if logging should happen or not
    enabled (namespace) {
        const listenedNamespaces = globalThis.DEBUG.split(",").map((s)=>{
            return s.replace(/[.+?^${}()|[\]\\]/g, "\\$&");
        });
        const isListened = listenedNamespaces.some((listenedNamespace)=>{
            if (listenedNamespace === "" || listenedNamespace[0] === "-") return false;
            return namespace.match(RegExp(listenedNamespace.split("*").join(".*") + "$"));
        });
        const isExcluded = listenedNamespaces.some((listenedNamespace)=>{
            if (listenedNamespace === "" || listenedNamespace[0] !== "-") return false;
            return namespace.match(RegExp(listenedNamespace.slice(1).split("*").join(".*") + "$"));
        });
        return isListened && !isExcluded;
    },
    log: (...args)=>{
        const [namespace, format, ...rest] = args;
        const logWithFormatting = console.warn ?? console.log;
        logWithFormatting(`${namespace} ${format}`, ...rest);
    },
    formatters: {}
};
function debugCreate(namespace) {
    const instanceProps = {
        color: COLORS[lastColor++ % COLORS.length],
        enabled: topProps.enabled(namespace),
        namespace,
        log: topProps.log,
        extend: ()=>{}
    };
    const debugCall = (...args)=>{
        const { enabled, namespace: namespace2, color, log } = instanceProps;
        if (args.length !== 0) {
            argsHistory.push([
                namespace2,
                ...args
            ]);
        }
        if (argsHistory.length > MAX_ARGS_HISTORY) {
            argsHistory.shift();
        }
        if (topProps.enabled(namespace2) || enabled) {
            const stringArgs = args.map((arg)=>{
                if (typeof arg === "string") {
                    return arg;
                }
                return safeStringify(arg);
            });
            const ms = `+${Date.now() - lastTimestamp}ms`;
            lastTimestamp = Date.now();
            if (globalThis.DEBUG_COLORS) {
                log(colors_exports[color](bold(namespace2)), ...stringArgs, colors_exports[color](ms));
            } else {
                log(namespace2, ...stringArgs, ms);
            }
        }
    };
    return new Proxy(debugCall, {
        get: (_, prop)=>instanceProps[prop],
        set: (_, prop, value)=>instanceProps[prop] = value
    });
}
var Debug = new Proxy(debugCreate, {
    get: (_, prop)=>topProps[prop],
    set: (_, prop, value)=>topProps[prop] = value
});
function safeStringify(value, indent = 2) {
    const cache = /* @__PURE__ */ new Set();
    return JSON.stringify(value, (key, value2)=>{
        if (typeof value2 === "object" && value2 !== null) {
            if (cache.has(value2)) {
                return `[Circular *]`;
            }
            cache.add(value2);
        } else if (typeof value2 === "bigint") {
            return value2.toString();
        }
        return value2;
    }, indent);
}
function getLogs(numChars = 7500) {
    const logs = argsHistory.map(([namespace, ...args])=>{
        return `${namespace} ${args.map((arg)=>{
            if (typeof arg === "string") {
                return arg;
            } else {
                return JSON.stringify(arg);
            }
        }).join(" ")}`;
    }).join("\n");
    if (logs.length < numChars) {
        return logs;
    }
    return logs.slice(-numChars);
}
function clearLogs() {
    argsHistory.length = 0;
}
var index_default = Debug;
;
}}),
"[project]/node_modules/@prisma/driver-adapter-utils/dist/index.mjs [middleware-edge] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/debug.ts
__turbopack_context__.s({
    "ColumnTypeEnum": (()=>ColumnTypeEnum),
    "DriverAdapterError": (()=>DriverAdapterError),
    "bindAdapter": (()=>bindAdapter),
    "bindMigrationAwareSqlAdapterFactory": (()=>bindMigrationAwareSqlAdapterFactory),
    "bindSqlAdapterFactory": (()=>bindSqlAdapterFactory),
    "err": (()=>err),
    "isDriverAdapterError": (()=>isDriverAdapterError),
    "mockAdapter": (()=>mockAdapter),
    "mockAdapterErrors": (()=>mockAdapterErrors),
    "mockAdapterFactory": (()=>mockAdapterFactory),
    "mockMigrationAwareAdapterFactory": (()=>mockMigrationAwareAdapterFactory),
    "ok": (()=>ok)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$node_modules$2f40$prisma$2f$debug$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.mjs [middleware-edge] (ecmascript)");
;
// src/error.ts
var DriverAdapterError = class extends Error {
    name = "DriverAdapterError";
    cause;
    constructor(payload){
        super(typeof payload["message"] === "string" ? payload["message"] : payload.kind);
        this.cause = payload;
    }
};
function isDriverAdapterError(error) {
    return error["name"] === "DriverAdapterError" && typeof error["cause"] === "object";
}
// src/result.ts
function ok(value) {
    return {
        ok: true,
        value,
        map (fn) {
            return ok(fn(value));
        },
        flatMap (fn) {
            return fn(value);
        }
    };
}
function err(error) {
    return {
        ok: false,
        error,
        map () {
            return err(error);
        },
        flatMap () {
            return err(error);
        }
    };
}
// src/binder.ts
var debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$node_modules$2f40$prisma$2f$debug$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["Debug"])("driver-adapter-utils");
var ErrorRegistryInternal = class {
    registeredErrors = [];
    consumeError(id) {
        return this.registeredErrors[id];
    }
    registerNewError(error) {
        let i = 0;
        while(this.registeredErrors[i] !== void 0){
            i++;
        }
        this.registeredErrors[i] = {
            error
        };
        return i;
    }
};
var bindMigrationAwareSqlAdapterFactory = (adapterFactory)=>{
    const errorRegistry = new ErrorRegistryInternal();
    const boundFactory = {
        adapterName: adapterFactory.adapterName,
        provider: adapterFactory.provider,
        errorRegistry,
        connect: async (...args)=>{
            const ctx = await wrapAsync(errorRegistry, adapterFactory.connect.bind(adapterFactory))(...args);
            return ctx.map((ctx2)=>bindAdapter(ctx2, errorRegistry));
        },
        connectToShadowDb: async (...args)=>{
            const ctx = await wrapAsync(errorRegistry, adapterFactory.connectToShadowDb.bind(adapterFactory))(...args);
            return ctx.map((ctx2)=>bindAdapter(ctx2, errorRegistry));
        }
    };
    return boundFactory;
};
var bindSqlAdapterFactory = (adapterFactory)=>{
    const errorRegistry = new ErrorRegistryInternal();
    const boundFactory = {
        adapterName: adapterFactory.adapterName,
        provider: adapterFactory.provider,
        errorRegistry,
        connect: async (...args)=>{
            const ctx = await wrapAsync(errorRegistry, adapterFactory.connect.bind(adapterFactory))(...args);
            return ctx.map((ctx2)=>bindAdapter(ctx2, errorRegistry));
        }
    };
    return boundFactory;
};
var bindAdapter = (adapter, errorRegistry = new ErrorRegistryInternal())=>{
    const boundAdapter = {
        adapterName: adapter.adapterName,
        errorRegistry,
        queryRaw: wrapAsync(errorRegistry, adapter.queryRaw.bind(adapter)),
        executeRaw: wrapAsync(errorRegistry, adapter.executeRaw.bind(adapter)),
        executeScript: wrapAsync(errorRegistry, adapter.executeScript.bind(adapter)),
        dispose: wrapAsync(errorRegistry, adapter.dispose.bind(adapter)),
        provider: adapter.provider,
        startTransaction: async (...args)=>{
            const ctx = await wrapAsync(errorRegistry, adapter.startTransaction.bind(adapter))(...args);
            return ctx.map((ctx2)=>bindTransaction(errorRegistry, ctx2));
        }
    };
    if (adapter.getConnectionInfo) {
        boundAdapter.getConnectionInfo = wrapSync(errorRegistry, adapter.getConnectionInfo.bind(adapter));
    }
    return boundAdapter;
};
var bindTransaction = (errorRegistry, transaction)=>{
    return {
        adapterName: transaction.adapterName,
        provider: transaction.provider,
        options: transaction.options,
        queryRaw: wrapAsync(errorRegistry, transaction.queryRaw.bind(transaction)),
        executeRaw: wrapAsync(errorRegistry, transaction.executeRaw.bind(transaction)),
        commit: wrapAsync(errorRegistry, transaction.commit.bind(transaction)),
        rollback: wrapAsync(errorRegistry, transaction.rollback.bind(transaction))
    };
};
function wrapAsync(registry, fn) {
    return async (...args)=>{
        try {
            return ok(await fn(...args));
        } catch (error) {
            debug("[error@wrapAsync]", error);
            if (isDriverAdapterError(error)) {
                return err(error.cause);
            }
            const id = registry.registerNewError(error);
            return err({
                kind: "GenericJs",
                id
            });
        }
    };
}
function wrapSync(registry, fn) {
    return (...args)=>{
        try {
            return ok(fn(...args));
        } catch (error) {
            debug("[error@wrapSync]", error);
            if (isDriverAdapterError(error)) {
                return err(error.cause);
            }
            const id = registry.registerNewError(error);
            return err({
                kind: "GenericJs",
                id
            });
        }
    };
}
// src/const.ts
var ColumnTypeEnum = {
    // Scalars
    Int32: 0,
    Int64: 1,
    Float: 2,
    Double: 3,
    Numeric: 4,
    Boolean: 5,
    Character: 6,
    Text: 7,
    Date: 8,
    Time: 9,
    DateTime: 10,
    Json: 11,
    Enum: 12,
    Bytes: 13,
    Set: 14,
    Uuid: 15,
    // Arrays
    Int32Array: 64,
    Int64Array: 65,
    FloatArray: 66,
    DoubleArray: 67,
    NumericArray: 68,
    BooleanArray: 69,
    CharacterArray: 70,
    TextArray: 71,
    DateArray: 72,
    TimeArray: 73,
    DateTimeArray: 74,
    JsonArray: 75,
    EnumArray: 76,
    BytesArray: 77,
    UuidArray: 78,
    // Custom
    UnknownNumber: 128
};
// src/mock.ts
var mockAdapterErrors = {
    queryRaw: new Error("Not implemented: queryRaw"),
    executeRaw: new Error("Not implemented: executeRaw"),
    startTransaction: new Error("Not implemented: startTransaction"),
    executeScript: new Error("Not implemented: executeScript"),
    dispose: new Error("Not implemented: dispose")
};
function mockAdapter(provider) {
    return {
        provider,
        adapterName: "@prisma/adapter-mock",
        queryRaw: ()=>Promise.reject(mockAdapterErrors.queryRaw),
        executeRaw: ()=>Promise.reject(mockAdapterErrors.executeRaw),
        startTransaction: ()=>Promise.reject(mockAdapterErrors.startTransaction),
        executeScript: ()=>Promise.reject(mockAdapterErrors.executeScript),
        dispose: ()=>Promise.reject(mockAdapterErrors.dispose)
    };
}
function mockAdapterFactory(provider) {
    return {
        provider,
        adapterName: "@prisma/adapter-mock",
        connect: ()=>Promise.resolve(mockAdapter(provider))
    };
}
function mockMigrationAwareAdapterFactory(provider) {
    return {
        provider,
        adapterName: "@prisma/adapter-mock",
        connect: ()=>Promise.resolve(mockAdapter(provider)),
        connectToShadowDb: ()=>Promise.resolve(mockAdapter(provider))
    };
}
;
}}),
"[project]/node_modules/postgres-array/index.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const BACKSLASH = '\\';
const DQUOT = '"';
const LBRACE = '{';
const RBRACE = '}';
const LBRACKET = '[';
const EQUALS = '=';
const COMMA = ',';
/** When the raw value is this, it means a literal `null` */ const NULL_STRING = 'NULL';
/**
 * Parses an array according to
 * https://www.postgresql.org/docs/17/arrays.html#ARRAYS-IO
 *
 * Trusts the data (mostly), so only hook up to trusted Postgres servers.
 */ function makeParseArrayWithTransform(transform) {
    const haveTransform = transform != null;
    return function parseArray(str) {
        const rbraceIndex = str.length - 1;
        if (rbraceIndex === 1) {
            return [];
        }
        if (str[rbraceIndex] !== RBRACE) {
            throw new Error('Invalid array text - must end with }');
        }
        // If starts with `[`, it is specifying the index boundas. Skip past first `=`.
        let position = 0;
        if (str[position] === LBRACKET) {
            position = str.indexOf(EQUALS) + 1;
        }
        if (str[position++] !== LBRACE) {
            throw new Error('Invalid array text - must start with {');
        }
        const output = [];
        let current = output;
        const stack = [];
        let currentStringStart = position;
        let currentString = '';
        let expectValue = true;
        for(; position < rbraceIndex; ++position){
            let char = str[position];
            // > The array output routine will put double quotes around element values if
            // > they are empty strings, contain curly braces, delimiter characters, double
            // > quotes, backslashes, or white space, or match the word NULL. Double quotes
            // > and backslashes embedded in element values will be backslash-escaped.
            if (char === DQUOT) {
                // It's escaped
                currentStringStart = ++position;
                let dquot = str.indexOf(DQUOT, currentStringStart);
                let backSlash = str.indexOf(BACKSLASH, currentStringStart);
                while(backSlash !== -1 && backSlash < dquot){
                    position = backSlash;
                    const part = str.slice(currentStringStart, position);
                    currentString += part;
                    currentStringStart = ++position;
                    if (dquot === position++) {
                        // This was an escaped doublequote; find the next one!
                        dquot = str.indexOf(DQUOT, position);
                    }
                    // Either way, find the next backslash
                    backSlash = str.indexOf(BACKSLASH, position);
                }
                position = dquot;
                const part = str.slice(currentStringStart, position);
                currentString += part;
                current.push(haveTransform ? transform(currentString) : currentString);
                currentString = '';
                expectValue = false;
            } else if (char === LBRACE) {
                const newArray = [];
                current.push(newArray);
                stack.push(current);
                current = newArray;
                currentStringStart = position + 1;
                expectValue = true;
            } else if (char === COMMA) {
                expectValue = true;
            } else if (char === RBRACE) {
                expectValue = false;
                const arr = stack.pop();
                if (arr === undefined) {
                    throw new Error("Invalid array text - too many '}'");
                }
                current = arr;
            } else if (expectValue) {
                currentStringStart = position;
                while((char = str[position]) !== COMMA && char !== RBRACE && position < rbraceIndex){
                    ++position;
                }
                const part = str.slice(currentStringStart, position--);
                current.push(part === NULL_STRING ? null : haveTransform ? transform(part) : part);
                expectValue = false;
            } else {
                throw new Error('Was expecting delimeter');
            }
        }
        return output;
    };
}
const parseArray = makeParseArrayWithTransform();
exports.parse = (source, transform)=>transform != null ? makeParseArrayWithTransform(transform)(source) : parseArray(source);
}}),
"[project]/node_modules/@prisma/adapter-neon/dist/index.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/neon.ts
__turbopack_context__.s({
    "PrismaNeon": (()=>PrismaNeonAdapterFactory),
    "PrismaNeonHTTP": (()=>PrismaNeonHTTPAdapterFactory)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$neondatabase$2f$serverless$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@neondatabase/serverless/index.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$node_modules$2f40$prisma$2f$debug$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@prisma/driver-adapter-utils/node_modules/@prisma/debug/dist/index.mjs [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@prisma/driver-adapter-utils/dist/index.mjs [middleware-edge] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postgres$2d$array$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/postgres-array/index.js [middleware-edge] (ecmascript)");
;
;
// package.json
var name = "@prisma/adapter-neon";
;
;
;
var { builtins: ScalarColumnType, getTypeParser } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$neondatabase$2f$serverless$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["types"];
var ArrayColumnType = {
    BIT_ARRAY: 1561,
    BOOL_ARRAY: 1e3,
    BYTEA_ARRAY: 1001,
    BPCHAR_ARRAY: 1014,
    CHAR_ARRAY: 1002,
    CIDR_ARRAY: 651,
    DATE_ARRAY: 1182,
    FLOAT4_ARRAY: 1021,
    FLOAT8_ARRAY: 1022,
    INET_ARRAY: 1041,
    INT2_ARRAY: 1005,
    INT4_ARRAY: 1007,
    INT8_ARRAY: 1016,
    JSONB_ARRAY: 3807,
    JSON_ARRAY: 199,
    MONEY_ARRAY: 791,
    NUMERIC_ARRAY: 1231,
    OID_ARRAY: 1028,
    TEXT_ARRAY: 1009,
    TIMESTAMP_ARRAY: 1115,
    TIME_ARRAY: 1183,
    UUID_ARRAY: 2951,
    VARBIT_ARRAY: 1563,
    VARCHAR_ARRAY: 1015,
    XML_ARRAY: 143
};
var UnsupportedNativeDataType = class _UnsupportedNativeDataType extends Error {
    // map of type codes to type names
    static typeNames = {
        16: "bool",
        17: "bytea",
        18: "char",
        19: "name",
        20: "int8",
        21: "int2",
        22: "int2vector",
        23: "int4",
        24: "regproc",
        25: "text",
        26: "oid",
        27: "tid",
        28: "xid",
        29: "cid",
        30: "oidvector",
        32: "pg_ddl_command",
        71: "pg_type",
        75: "pg_attribute",
        81: "pg_proc",
        83: "pg_class",
        114: "json",
        142: "xml",
        194: "pg_node_tree",
        269: "table_am_handler",
        325: "index_am_handler",
        600: "point",
        601: "lseg",
        602: "path",
        603: "box",
        604: "polygon",
        628: "line",
        650: "cidr",
        700: "float4",
        701: "float8",
        705: "unknown",
        718: "circle",
        774: "macaddr8",
        790: "money",
        829: "macaddr",
        869: "inet",
        1033: "aclitem",
        1042: "bpchar",
        1043: "varchar",
        1082: "date",
        1083: "time",
        1114: "timestamp",
        1184: "timestamptz",
        1186: "interval",
        1266: "timetz",
        1560: "bit",
        1562: "varbit",
        1700: "numeric",
        1790: "refcursor",
        2202: "regprocedure",
        2203: "regoper",
        2204: "regoperator",
        2205: "regclass",
        2206: "regtype",
        2249: "record",
        2275: "cstring",
        2276: "any",
        2277: "anyarray",
        2278: "void",
        2279: "trigger",
        2280: "language_handler",
        2281: "internal",
        2283: "anyelement",
        2287: "_record",
        2776: "anynonarray",
        2950: "uuid",
        2970: "txid_snapshot",
        3115: "fdw_handler",
        3220: "pg_lsn",
        3310: "tsm_handler",
        3361: "pg_ndistinct",
        3402: "pg_dependencies",
        3500: "anyenum",
        3614: "tsvector",
        3615: "tsquery",
        3642: "gtsvector",
        3734: "regconfig",
        3769: "regdictionary",
        3802: "jsonb",
        3831: "anyrange",
        3838: "event_trigger",
        3904: "int4range",
        3906: "numrange",
        3908: "tsrange",
        3910: "tstzrange",
        3912: "daterange",
        3926: "int8range",
        4072: "jsonpath",
        4089: "regnamespace",
        4096: "regrole",
        4191: "regcollation",
        4451: "int4multirange",
        4532: "nummultirange",
        4533: "tsmultirange",
        4534: "tstzmultirange",
        4535: "datemultirange",
        4536: "int8multirange",
        4537: "anymultirange",
        4538: "anycompatiblemultirange",
        4600: "pg_brin_bloom_summary",
        4601: "pg_brin_minmax_multi_summary",
        5017: "pg_mcv_list",
        5038: "pg_snapshot",
        5069: "xid8",
        5077: "anycompatible",
        5078: "anycompatiblearray",
        5079: "anycompatiblenonarray",
        5080: "anycompatiblerange"
    };
    type;
    constructor(code){
        super();
        this.type = _UnsupportedNativeDataType.typeNames[code] || "Unknown";
        this.message = `Unsupported column type ${this.type}`;
    }
};
function fieldToColumnType(fieldTypeId) {
    switch(fieldTypeId){
        case ScalarColumnType.INT2:
        case ScalarColumnType.INT4:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Int32;
        case ScalarColumnType.INT8:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Int64;
        case ScalarColumnType.FLOAT4:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Float;
        case ScalarColumnType.FLOAT8:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Double;
        case ScalarColumnType.BOOL:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Boolean;
        case ScalarColumnType.DATE:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Date;
        case ScalarColumnType.TIME:
        case ScalarColumnType.TIMETZ:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Time;
        case ScalarColumnType.TIMESTAMP:
        case ScalarColumnType.TIMESTAMPTZ:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].DateTime;
        case ScalarColumnType.NUMERIC:
        case ScalarColumnType.MONEY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Numeric;
        case ScalarColumnType.JSON:
        case ScalarColumnType.JSONB:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Json;
        case ScalarColumnType.UUID:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Uuid;
        case ScalarColumnType.OID:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Int64;
        case ScalarColumnType.BPCHAR:
        case ScalarColumnType.TEXT:
        case ScalarColumnType.VARCHAR:
        case ScalarColumnType.BIT:
        case ScalarColumnType.VARBIT:
        case ScalarColumnType.INET:
        case ScalarColumnType.CIDR:
        case ScalarColumnType.XML:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Text;
        case ScalarColumnType.BYTEA:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Bytes;
        case ArrayColumnType.INT2_ARRAY:
        case ArrayColumnType.INT4_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Int32Array;
        case ArrayColumnType.FLOAT4_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].FloatArray;
        case ArrayColumnType.FLOAT8_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].DoubleArray;
        case ArrayColumnType.NUMERIC_ARRAY:
        case ArrayColumnType.MONEY_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].NumericArray;
        case ArrayColumnType.BOOL_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].BooleanArray;
        case ArrayColumnType.CHAR_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].CharacterArray;
        case ArrayColumnType.BPCHAR_ARRAY:
        case ArrayColumnType.TEXT_ARRAY:
        case ArrayColumnType.VARCHAR_ARRAY:
        case ArrayColumnType.VARBIT_ARRAY:
        case ArrayColumnType.BIT_ARRAY:
        case ArrayColumnType.INET_ARRAY:
        case ArrayColumnType.CIDR_ARRAY:
        case ArrayColumnType.XML_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].TextArray;
        case ArrayColumnType.DATE_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].DateArray;
        case ArrayColumnType.TIME_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].TimeArray;
        case ArrayColumnType.TIMESTAMP_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].DateTimeArray;
        case ArrayColumnType.JSON_ARRAY:
        case ArrayColumnType.JSONB_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].JsonArray;
        case ArrayColumnType.BYTEA_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].BytesArray;
        case ArrayColumnType.UUID_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].UuidArray;
        case ArrayColumnType.INT8_ARRAY:
        case ArrayColumnType.OID_ARRAY:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Int64Array;
        default:
            if (fieldTypeId >= 1e4) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ColumnTypeEnum"].Text;
            }
            throw new UnsupportedNativeDataType(fieldTypeId);
    }
}
function normalize_array(element_normalizer) {
    return (str)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$postgres$2d$array$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["parse"])(str, element_normalizer);
}
function normalize_numeric(numeric) {
    return numeric;
}
function normalize_date(date) {
    return date;
}
function normalize_timestamp(time) {
    return time;
}
function normalize_timestampz(time) {
    return time.split("+")[0];
}
function normalize_time(time) {
    return time;
}
function normalize_timez(time) {
    return time.split("+")[0];
}
function normalize_money(money) {
    return money.slice(1);
}
function normalize_xml(xml) {
    return xml;
}
function toJson(json) {
    return json;
}
function encodeBuffer(buffer) {
    return Array.from(new Uint8Array(buffer));
}
var parsePgBytes = getTypeParser(ScalarColumnType.BYTEA);
var parseBytesArray = getTypeParser(ArrayColumnType.BYTEA_ARRAY);
function normalizeByteaArray(serializedBytesArray) {
    const buffers = parseBytesArray(serializedBytesArray);
    return buffers.map((buf)=>buf ? encodeBuffer(buf) : null);
}
function convertBytes(serializedBytes) {
    const buffer = parsePgBytes(serializedBytes);
    return encodeBuffer(buffer);
}
function normalizeBit(bit) {
    return bit;
}
var customParsers = {
    [ScalarColumnType.NUMERIC]: normalize_numeric,
    [ArrayColumnType.NUMERIC_ARRAY]: normalize_array(normalize_numeric),
    [ScalarColumnType.TIME]: normalize_time,
    [ArrayColumnType.TIME_ARRAY]: normalize_array(normalize_time),
    [ScalarColumnType.TIMETZ]: normalize_timez,
    [ScalarColumnType.DATE]: normalize_date,
    [ArrayColumnType.DATE_ARRAY]: normalize_array(normalize_date),
    [ScalarColumnType.TIMESTAMP]: normalize_timestamp,
    [ArrayColumnType.TIMESTAMP_ARRAY]: normalize_array(normalize_timestamp),
    [ScalarColumnType.TIMESTAMPTZ]: normalize_timestampz,
    [ScalarColumnType.MONEY]: normalize_money,
    [ArrayColumnType.MONEY_ARRAY]: normalize_array(normalize_money),
    [ScalarColumnType.JSON]: toJson,
    [ScalarColumnType.JSONB]: toJson,
    [ScalarColumnType.BYTEA]: convertBytes,
    [ArrayColumnType.BYTEA_ARRAY]: normalizeByteaArray,
    [ArrayColumnType.BIT_ARRAY]: normalize_array(normalizeBit),
    [ArrayColumnType.VARBIT_ARRAY]: normalize_array(normalizeBit),
    [ArrayColumnType.XML_ARRAY]: normalize_array(normalize_xml)
};
function fixArrayBufferValues(values) {
    for(let i = 0; i < values.length; i++){
        const list = values[i];
        if (!Array.isArray(list)) {
            continue;
        }
        for(let j = 0; j < list.length; j++){
            const listItem = list[j];
            if (ArrayBuffer.isView(listItem)) {
                list[j] = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(listItem.buffer, listItem.byteOffset, listItem.byteLength);
            }
        }
    }
    return values;
}
// src/errors.ts
function convertDriverError(error) {
    if (!isDbError(error)) {
        throw error;
    }
    switch(error.code){
        case "22001":
            return {
                kind: "LengthMismatch",
                column: error.column
            };
        case "23505":
            return {
                kind: "UniqueConstraintViolation",
                fields: error.detail?.match(/Key \(([^)]+)\)/)?.at(1)?.split(", ") ?? []
            };
        case "23502":
            return {
                kind: "NullConstraintViolation",
                fields: error.detail?.match(/Key \(([^)]+)\)/)?.at(1)?.split(", ") ?? []
            };
        case "23503":
            {
                let constraint;
                if (error.column) {
                    constraint = {
                        fields: [
                            error.column
                        ]
                    };
                } else if (error.constraint) {
                    constraint = {
                        index: error.constraint
                    };
                }
                return {
                    kind: "ForeignKeyConstraintViolation",
                    constraint
                };
            }
        case "3D000":
            return {
                kind: "DatabaseDoesNotExist",
                db: error.message.split(" ").at(1)?.split('"').at(1)
            };
        case "28000":
            return {
                kind: "DatabaseAccessDenied",
                db: error.message.split(" ").at(5)?.split('"').at(1)
            };
        case "28P01":
            return {
                kind: "AuthenticationFailed",
                user: error.message.split(" ").pop()?.split('"').at(1)
            };
        case "40001":
            return {
                kind: "TransactionWriteConflict"
            };
        case "42P01":
            return {
                kind: "TableDoesNotExist",
                table: error.message.split(" ").at(1)?.split('"').at(1)
            };
        case "42703":
            return {
                kind: "ColumnNotFound",
                column: error.message.split(" ").at(1)?.split('"').at(1)
            };
        case "42P04":
            return {
                kind: "DatabaseAlreadyExists",
                db: error.message.split(" ").at(1)?.split('"').at(1)
            };
        case "53300":
            return {
                kind: "TooManyConnections",
                cause: error.message
            };
        default:
            return {
                kind: "postgres",
                code: error.code ?? "N/A",
                severity: error.severity ?? "N/A",
                message: error.message,
                detail: error.detail,
                column: error.column,
                hint: error.hint
            };
    }
}
function isDbError(error) {
    return typeof error.code === "string" && typeof error.message === "string" && typeof error.severity === "string" && (typeof error.detail === "string" || error.detail === void 0) && (typeof error.column === "string" || error.column === void 0) && (typeof error.hint === "string" || error.hint === void 0);
}
// src/neon.ts
var debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$node_modules$2f40$prisma$2f$debug$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["Debug"])("prisma:driver-adapter:neon");
var NeonQueryable = class {
    provider = "postgres";
    adapterName = name;
    /**
   * Execute a query given as SQL, interpolating the given parameters.
   */ async queryRaw(query) {
        const tag = "[js::query_raw]";
        debug(`${tag} %O`, query);
        const { fields, rows } = await this.performIO(query);
        const columnNames = fields.map((field)=>field.name);
        let columnTypes = [];
        try {
            columnTypes = fields.map((field)=>fieldToColumnType(field.dataTypeID));
        } catch (e) {
            if (e instanceof UnsupportedNativeDataType) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DriverAdapterError"]({
                    kind: "UnsupportedNativeDataType",
                    type: e.type
                });
            }
            throw e;
        }
        return {
            columnNames,
            columnTypes,
            rows
        };
    }
    /**
   * Execute a query given as SQL, interpolating the given parameters and
   * returning the number of affected rows.
   * Note: Queryable expects a u64, but napi.rs only supports u32.
   */ async executeRaw(query) {
        const tag = "[js::execute_raw]";
        debug(`${tag} %O`, query);
        return (await this.performIO(query)).rowCount ?? 0;
    }
};
var NeonWsQueryable = class extends NeonQueryable {
    constructor(client){
        super();
        this.client = client;
    }
    async performIO(query) {
        const { sql, args: values } = query;
        try {
            const result = await this.client.query({
                text: sql,
                values: fixArrayBufferValues(values),
                rowMode: "array",
                types: {
                    // This is the error expected:
                    // No overload matches this call.
                    // The last overload gave the following error.
                    //   Type '(oid: number, format?: any) => (json: string) => unknown' is not assignable to type '{ <T>(oid: number): TypeParser<string, string | T>; <T>(oid: number, format: "text"): TypeParser<string, string | T>; <T>(oid: number, format: "binary"): TypeParser<...>; }'.
                    //     Type '(json: string) => unknown' is not assignable to type 'TypeParser<Buffer, any>'.
                    //       Types of parameters 'json' and 'value' are incompatible.
                    //         Type 'Buffer' is not assignable to type 'string'.ts(2769)
                    //
                    // Because pg-types types expect us to handle both binary and text protocol versions,
                    // where as far we can see, pg will ever pass only text version.
                    //
                    // @ts-expect-error
                    getTypeParser: (oid, format)=>{
                        if (format === "text" && customParsers[oid]) {
                            return customParsers[oid];
                        }
                        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$neondatabase$2f$serverless$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["types"].getTypeParser(oid, format);
                    }
                }
            }, fixArrayBufferValues(values));
            return result;
        } catch (e) {
            this.onError(e);
        }
    }
    onError(e) {
        debug("Error in onError: %O", e);
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$prisma$2f$driver$2d$adapter$2d$utils$2f$dist$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DriverAdapterError"](convertDriverError(e));
    }
};
var NeonTransaction = class extends NeonWsQueryable {
    constructor(client, options){
        super(client);
        this.options = options;
    }
    async commit() {
        debug(`[js::commit]`);
        this.client.release();
    }
    async rollback() {
        debug(`[js::rollback]`);
        this.client.release();
    }
};
var PrismaNeonAdapter = class extends NeonWsQueryable {
    constructor(pool, options){
        super(pool);
        this.options = options;
    }
    isRunning = true;
    executeScript(_script) {
        throw new Error("Not implemented yet");
    }
    async startTransaction(isolationLevel) {
        const options = {
            usePhantomQuery: false
        };
        const tag = "[js::startTransaction]";
        debug("%s options: %O", tag, options);
        const conn = await this.client.connect().catch((error)=>this.onError(error));
        try {
            const tx = new NeonTransaction(conn, options);
            await tx.executeRaw({
                sql: "BEGIN",
                args: [],
                argTypes: []
            });
            if (isolationLevel) {
                await tx.executeRaw({
                    sql: `SET TRANSACTION ISOLATION LEVEL ${isolationLevel}`,
                    args: [],
                    argTypes: []
                });
            }
            return tx;
        } catch (error) {
            conn.release(error);
            this.onError(error);
        }
    }
    getConnectionInfo() {
        return {
            schemaName: this.options?.schema
        };
    }
    async dispose() {
        if (this.isRunning) {
            await this.client.end();
            this.isRunning = false;
        }
    }
};
var PrismaNeonAdapterFactory = class {
    constructor(config, options){
        this.config = config;
        this.options = options;
    }
    provider = "postgres";
    adapterName = name;
    async connect() {
        return new PrismaNeonAdapter(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$neondatabase$2f$serverless$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["Pool"](this.config), this.options);
    }
};
var PrismaNeonHTTPAdapter = class extends NeonQueryable {
    client;
    constructor(client){
        super();
        this.client = client.query ?? client;
    }
    executeScript(_script) {
        throw new Error("Not implemented yet");
    }
    async startTransaction() {
        return Promise.reject(new Error("Transactions are not supported in HTTP mode"));
    }
    async performIO(query) {
        const { sql, args: values } = query;
        return await this.client(sql, values, {
            arrayMode: true,
            fullResults: true,
            // pass type parsers to neon() HTTP client, same as in WS client above
            //
            // requires @neondatabase/serverless >= 0.9.5
            // - types option added in https://github.com/neondatabase/serverless/pull/92
            types: {
                getTypeParser: (oid, format)=>{
                    if (format === "text" && customParsers[oid]) {
                        return customParsers[oid];
                    }
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$neondatabase$2f$serverless$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["types"].getTypeParser(oid, format);
                }
            }
        });
    }
    async dispose() {}
};
var PrismaNeonHTTPAdapterFactory = class {
    constructor(connectionString, options){
        this.connectionString = connectionString;
        this.options = options;
    }
    provider = "postgres";
    adapterName = name;
    async connect() {
        return new PrismaNeonHTTPAdapter((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$neondatabase$2f$serverless$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["neon"])(this.connectionString, this.options));
    }
};
;
}}),
"[project]/node_modules/.prisma/client/query_engine_bg.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var S = Object.defineProperty;
var k = Object.getOwnPropertyDescriptor;
var D = Object.getOwnPropertyNames;
var R = Object.prototype.hasOwnProperty;
var B = (e, t)=>{
    for(var n in t)S(e, n, {
        get: t[n],
        enumerable: !0
    });
}, U = (e, t, n, r)=>{
    if (t && typeof t == "object" || typeof t == "function") for (let _ of D(t))!R.call(e, _) && _ !== n && S(e, _, {
        get: ()=>t[_],
        enumerable: !(r = k(t, _)) || r.enumerable
    });
    return e;
};
var L = (e)=>U(S({}, "__esModule", {
        value: !0
    }), e);
var Ft = {};
B(Ft, {
    QueryEngine: ()=>Q,
    __wbg_String_8f0eb39a4a4c2f66: ()=>H,
    __wbg_buffer_609cc3eee51ed158: ()=>J,
    __wbg_call_672a4d21634d4a24: ()=>K,
    __wbg_call_7cccdd69e0791ae2: ()=>X,
    __wbg_crypto_805be4ce92f1e370: ()=>Y,
    __wbg_done_769e5ede4b31c67b: ()=>Z,
    __wbg_entries_3265d4158b33e5dc: ()=>ee,
    __wbg_exec_3e2d2d0644c927df: ()=>te,
    __wbg_getRandomValues_f6a868620c8bab49: ()=>ne,
    __wbg_getTime_46267b1c24877e30: ()=>re,
    __wbg_get_67b2ba62fc30de12: ()=>oe,
    __wbg_get_b9b93047fe3cf45b: ()=>_e,
    __wbg_get_ece95cf6585650d9: ()=>ce,
    __wbg_getwithrefkey_1dc361bd10053bfe: ()=>ie,
    __wbg_has_a5ea9117f258a0ec: ()=>ue,
    __wbg_instanceof_ArrayBuffer_e14585432e3737fc: ()=>se,
    __wbg_instanceof_Map_f3469ce2244d2430: ()=>fe,
    __wbg_instanceof_Promise_935168b8f4b49db3: ()=>ae,
    __wbg_instanceof_Uint8Array_17156bcf118086a9: ()=>be,
    __wbg_isArray_a1eab7e0d067391b: ()=>ge,
    __wbg_isSafeInteger_343e2beeeece1bb0: ()=>le,
    __wbg_iterator_9a24c88df860dc65: ()=>de,
    __wbg_keys_5c77a08ddc2fb8a6: ()=>we,
    __wbg_length_a446193dc22c12f8: ()=>pe,
    __wbg_length_e2d2a49132c1b256: ()=>xe,
    __wbg_msCrypto_2ac4d17c4748234a: ()=>ye,
    __wbg_new0_f788a2397c7ca929: ()=>me,
    __wbg_new_23a2665fac83c611: ()=>he,
    __wbg_new_405e22f390576ce2: ()=>Te,
    __wbg_new_5e0be73521bc8c17: ()=>qe,
    __wbg_new_63847613cde5d4bc: ()=>Se,
    __wbg_new_78feb108b6472713: ()=>Ae,
    __wbg_new_a12002a7f91c75be: ()=>Ie,
    __wbg_newnoargs_105ed471475aaf50: ()=>Ee,
    __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a: ()=>Oe,
    __wbg_newwithlength_a381634e90c276d4: ()=>Fe,
    __wbg_next_25feadfc0913fea9: ()=>Me,
    __wbg_next_6574e1a8a62d1055: ()=>je,
    __wbg_node_ecc8306b9857f33d: ()=>ke,
    __wbg_now_7fd00a794a07d388: ()=>De,
    __wbg_now_807e54c39636c349: ()=>Re,
    __wbg_now_b3f7572f6ef3d3a9: ()=>Be,
    __wbg_process_5cff2739921be718: ()=>Ue,
    __wbg_push_737cfc8c1432c2c6: ()=>Le,
    __wbg_queueMicrotask_5a8a9131f3f0b37b: ()=>ve,
    __wbg_queueMicrotask_6d79674585219521: ()=>Ne,
    __wbg_randomFillSync_d3c85af7e31cf1f8: ()=>$e,
    __wbg_require_0c566c6f2eef6c79: ()=>Ce,
    __wbg_resolve_4851785c9c5f573d: ()=>Ve,
    __wbg_setTimeout_5d6a1d4fc51ea450: ()=>ze,
    __wbg_set_37837023f3d740e8: ()=>We,
    __wbg_set_3f1d0b984ed272ed: ()=>Pe,
    __wbg_set_65595bdd868b3009: ()=>Ge,
    __wbg_set_8fc6bf8a5b1071d1: ()=>Qe,
    __wbg_set_bb8cecf6a62b9f46: ()=>He,
    __wbg_set_wasm: ()=>v,
    __wbg_static_accessor_GLOBAL_88a902d13a557d07: ()=>Je,
    __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0: ()=>Ke,
    __wbg_static_accessor_SELF_37c5d418e4bf5819: ()=>Xe,
    __wbg_static_accessor_WINDOW_5de37043a91a9c40: ()=>Ye,
    __wbg_subarray_aa9065fa9dc5df96: ()=>Ze,
    __wbg_then_44b73946d2fb3e7d: ()=>et,
    __wbg_then_48b406749878a531: ()=>tt,
    __wbg_valueOf_7392193dd78c6b97: ()=>nt,
    __wbg_value_cd1ffa7b1ab794f1: ()=>rt,
    __wbg_versions_a8e5a362e1f16442: ()=>ot,
    __wbindgen_as_number: ()=>_t,
    __wbindgen_bigint_from_i64: ()=>ct,
    __wbindgen_bigint_from_u64: ()=>it,
    __wbindgen_bigint_get_as_i64: ()=>ut,
    __wbindgen_boolean_get: ()=>st,
    __wbindgen_cb_drop: ()=>ft,
    __wbindgen_closure_wrapper7549: ()=>at,
    __wbindgen_debug_string: ()=>bt,
    __wbindgen_error_new: ()=>gt,
    __wbindgen_in: ()=>lt,
    __wbindgen_init_externref_table: ()=>dt,
    __wbindgen_is_bigint: ()=>wt,
    __wbindgen_is_function: ()=>pt,
    __wbindgen_is_object: ()=>xt,
    __wbindgen_is_string: ()=>yt,
    __wbindgen_is_undefined: ()=>mt,
    __wbindgen_jsval_eq: ()=>ht,
    __wbindgen_jsval_loose_eq: ()=>Tt,
    __wbindgen_memory: ()=>qt,
    __wbindgen_number_get: ()=>St,
    __wbindgen_number_new: ()=>At,
    __wbindgen_string_get: ()=>It,
    __wbindgen_string_new: ()=>Et,
    __wbindgen_throw: ()=>Ot,
    debug_panic: ()=>W,
    getBuildTimeInfo: ()=>z
});
module.exports = L(Ft);
var m = ()=>{};
m.prototype = m;
let o;
function v(e) {
    o = e;
}
let s = 0, h = null;
function T() {
    return (h === null || h.byteLength === 0) && (h = new Uint8Array(o.memory.buffer)), h;
}
const N = typeof TextEncoder > "u" ? (0, module.require)("util").TextEncoder : TextEncoder;
let q = new N("utf-8");
const $ = typeof q.encodeInto == "function" ? function(e, t) {
    return q.encodeInto(e, t);
} : function(e, t) {
    const n = q.encode(e);
    return t.set(n), {
        read: e.length,
        written: n.length
    };
};
function f(e, t, n) {
    if (n === void 0) {
        const u = q.encode(e), a = t(u.length, 1) >>> 0;
        return T().subarray(a, a + u.length).set(u), s = u.length, a;
    }
    let r = e.length, _ = t(r, 1) >>> 0;
    const i = T();
    let c = 0;
    for(; c < r; c++){
        const u = e.charCodeAt(c);
        if (u > 127) break;
        i[_ + c] = u;
    }
    if (c !== r) {
        c !== 0 && (e = e.slice(c)), _ = n(_, r, r = c + e.length * 3, 1) >>> 0;
        const u = T().subarray(_ + c, _ + r), a = $(e, u);
        c += a.written, _ = n(_, r, c, 1) >>> 0;
    }
    return s = c, _;
}
let p = null;
function l() {
    return (p === null || p.buffer.detached === !0 || p.buffer.detached === void 0 && p.buffer !== o.memory.buffer) && (p = new DataView(o.memory.buffer)), p;
}
function x(e) {
    const t = o.__externref_table_alloc();
    return o.__wbindgen_export_4.set(t, e), t;
}
function g(e, t) {
    try {
        return e.apply(this, t);
    } catch (n) {
        const r = x(n);
        o.__wbindgen_exn_store(r);
    }
}
const C = typeof TextDecoder > "u" ? (0, module.require)("util").TextDecoder : TextDecoder;
let I = new C("utf-8", {
    ignoreBOM: !0,
    fatal: !0
});
I.decode();
function w(e, t) {
    return e = e >>> 0, I.decode(T().subarray(e, e + t));
}
function b(e) {
    return e == null;
}
const E = typeof FinalizationRegistry > "u" ? {
    register: ()=>{},
    unregister: ()=>{}
} : new FinalizationRegistry((e)=>{
    o.__wbindgen_export_5.get(e.dtor)(e.a, e.b);
});
function V(e, t, n, r) {
    const _ = {
        a: e,
        b: t,
        cnt: 1,
        dtor: n
    }, i = (...c)=>{
        _.cnt++;
        const u = _.a;
        _.a = 0;
        try {
            return r(u, _.b, ...c);
        } finally{
            --_.cnt === 0 ? (o.__wbindgen_export_5.get(_.dtor)(u, _.b), E.unregister(_)) : _.a = u;
        }
    };
    return i.original = _, E.register(i, _, _), i;
}
function A(e) {
    const t = typeof e;
    if (t == "number" || t == "boolean" || e == null) return `${e}`;
    if (t == "string") return `"${e}"`;
    if (t == "symbol") {
        const _ = e.description;
        return _ == null ? "Symbol" : `Symbol(${_})`;
    }
    if (t == "function") {
        const _ = e.name;
        return typeof _ == "string" && _.length > 0 ? `Function(${_})` : "Function";
    }
    if (Array.isArray(e)) {
        const _ = e.length;
        let i = "[";
        _ > 0 && (i += A(e[0]));
        for(let c = 1; c < _; c++)i += ", " + A(e[c]);
        return i += "]", i;
    }
    const n = /\[object ([^\]]+)\]/.exec(toString.call(e));
    let r;
    if (n && n.length > 1) r = n[1];
    else return toString.call(e);
    if (r == "Object") try {
        return "Object(" + JSON.stringify(e) + ")";
    } catch  {
        return "Object";
    }
    return e instanceof Error ? `${e.name}: ${e.message}
${e.stack}` : r;
}
function O(e) {
    const t = o.__wbindgen_export_4.get(e);
    return o.__externref_table_dealloc(e), t;
}
function z() {
    return o.getBuildTimeInfo();
}
function W(e) {
    var t = b(e) ? 0 : f(e, o.__wbindgen_malloc, o.__wbindgen_realloc), n = s;
    const r = o.debug_panic(t, n);
    if (r[1]) throw O(r[0]);
}
function P(e, t, n) {
    o.closure562_externref_shim(e, t, n);
}
function G(e, t, n, r) {
    o.closure132_externref_shim(e, t, n, r);
}
const F = typeof FinalizationRegistry > "u" ? {
    register: ()=>{},
    unregister: ()=>{}
} : new FinalizationRegistry((e)=>o.__wbg_queryengine_free(e >>> 0, 1));
class Q {
    __destroy_into_raw() {
        const t = this.__wbg_ptr;
        return this.__wbg_ptr = 0, F.unregister(this), t;
    }
    free() {
        const t = this.__destroy_into_raw();
        o.__wbg_queryengine_free(t, 0);
    }
    constructor(t, n, r){
        const _ = o.queryengine_new(t, n, r);
        if (_[2]) throw O(_[1]);
        return this.__wbg_ptr = _[0] >>> 0, F.register(this, this.__wbg_ptr, this), this;
    }
    connect(t, n) {
        const r = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), _ = s, i = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), c = s;
        return o.queryengine_connect(this.__wbg_ptr, r, _, i, c);
    }
    disconnect(t, n) {
        const r = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), _ = s, i = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), c = s;
        return o.queryengine_disconnect(this.__wbg_ptr, r, _, i, c);
    }
    query(t, n, r, _) {
        const i = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), c = s, u = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), a = s;
        var d = b(r) ? 0 : f(r, o.__wbindgen_malloc, o.__wbindgen_realloc), y = s;
        const M = f(_, o.__wbindgen_malloc, o.__wbindgen_realloc), j = s;
        return o.queryengine_query(this.__wbg_ptr, i, c, u, a, d, y, M, j);
    }
    startTransaction(t, n, r) {
        const _ = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), i = s, c = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), u = s, a = f(r, o.__wbindgen_malloc, o.__wbindgen_realloc), d = s;
        return o.queryengine_startTransaction(this.__wbg_ptr, _, i, c, u, a, d);
    }
    commitTransaction(t, n, r) {
        const _ = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), i = s, c = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), u = s, a = f(r, o.__wbindgen_malloc, o.__wbindgen_realloc), d = s;
        return o.queryengine_commitTransaction(this.__wbg_ptr, _, i, c, u, a, d);
    }
    rollbackTransaction(t, n, r) {
        const _ = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), i = s, c = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), u = s, a = f(r, o.__wbindgen_malloc, o.__wbindgen_realloc), d = s;
        return o.queryengine_rollbackTransaction(this.__wbg_ptr, _, i, c, u, a, d);
    }
    metrics(t) {
        const n = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), r = s;
        return o.queryengine_metrics(this.__wbg_ptr, n, r);
    }
    trace(t) {
        const n = f(t, o.__wbindgen_malloc, o.__wbindgen_realloc), r = s;
        return o.queryengine_trace(this.__wbg_ptr, n, r);
    }
}
function H(e, t) {
    const n = String(t), r = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), _ = s;
    l().setInt32(e + 4 * 1, _, !0), l().setInt32(e + 4 * 0, r, !0);
}
function J(e) {
    return e.buffer;
}
function K() {
    return g(function(e, t) {
        return e.call(t);
    }, arguments);
}
function X() {
    return g(function(e, t, n) {
        return e.call(t, n);
    }, arguments);
}
function Y(e) {
    return e.crypto;
}
function Z(e) {
    return e.done;
}
function ee(e) {
    return Object.entries(e);
}
function te(e, t, n) {
    const r = e.exec(w(t, n));
    return b(r) ? 0 : x(r);
}
function ne() {
    return g(function(e, t) {
        e.getRandomValues(t);
    }, arguments);
}
function re(e) {
    return e.getTime();
}
function oe() {
    return g(function(e, t) {
        return Reflect.get(e, t);
    }, arguments);
}
function _e(e, t) {
    return e[t >>> 0];
}
function ce() {
    return g(function(e, t) {
        return e[t];
    }, arguments);
}
function ie(e, t) {
    return e[t];
}
function ue() {
    return g(function(e, t) {
        return Reflect.has(e, t);
    }, arguments);
}
function se(e) {
    let t;
    try {
        t = e instanceof ArrayBuffer;
    } catch  {
        t = !1;
    }
    return t;
}
function fe(e) {
    let t;
    try {
        t = e instanceof Map;
    } catch  {
        t = !1;
    }
    return t;
}
function ae(e) {
    let t;
    try {
        t = e instanceof Promise;
    } catch  {
        t = !1;
    }
    return t;
}
function be(e) {
    let t;
    try {
        t = e instanceof Uint8Array;
    } catch  {
        t = !1;
    }
    return t;
}
function ge(e) {
    return Array.isArray(e);
}
function le(e) {
    return Number.isSafeInteger(e);
}
function de() {
    return Symbol.iterator;
}
function we(e) {
    return Object.keys(e);
}
function pe(e) {
    return e.length;
}
function xe(e) {
    return e.length;
}
function ye(e) {
    return e.msCrypto;
}
function me() {
    return new Date;
}
function he(e, t) {
    try {
        var n = {
            a: e,
            b: t
        }, r = (i, c)=>{
            const u = n.a;
            n.a = 0;
            try {
                return G(u, n.b, i, c);
            } finally{
                n.a = u;
            }
        };
        return new Promise(r);
    } finally{
        n.a = n.b = 0;
    }
}
function Te() {
    return new Object;
}
function qe() {
    return new Map;
}
function Se(e, t, n, r) {
    return new RegExp(w(e, t), w(n, r));
}
function Ae() {
    return new Array;
}
function Ie(e) {
    return new Uint8Array(e);
}
function Ee(e, t) {
    return new m(w(e, t));
}
function Oe(e, t, n) {
    return new Uint8Array(e, t >>> 0, n >>> 0);
}
function Fe(e) {
    return new Uint8Array(e >>> 0);
}
function Me(e) {
    return e.next;
}
function je() {
    return g(function(e) {
        return e.next();
    }, arguments);
}
function ke(e) {
    return e.node;
}
function De(e) {
    return e.now();
}
function Re() {
    return Date.now();
}
function Be() {
    return g(function() {
        return Date.now();
    }, arguments);
}
function Ue(e) {
    return e.process;
}
function Le(e, t) {
    return e.push(t);
}
function ve(e) {
    return e.queueMicrotask;
}
function Ne(e) {
    queueMicrotask(e);
}
function $e() {
    return g(function(e, t) {
        e.randomFillSync(t);
    }, arguments);
}
function Ce() {
    return g(function() {
        return module.require;
    }, arguments);
}
function Ve(e) {
    return Promise.resolve(e);
}
function ze(e, t) {
    return setTimeout(e, t >>> 0);
}
function We(e, t, n) {
    e[t >>> 0] = n;
}
function Pe(e, t, n) {
    e[t] = n;
}
function Ge(e, t, n) {
    e.set(t, n >>> 0);
}
function Qe(e, t, n) {
    return e.set(t, n);
}
function He() {
    return g(function(e, t, n) {
        return Reflect.set(e, t, n);
    }, arguments);
}
function Je() {
    const e = typeof global > "u" ? null : global;
    return b(e) ? 0 : x(e);
}
function Ke() {
    const e = typeof globalThis > "u" ? null : globalThis;
    return b(e) ? 0 : x(e);
}
function Xe() {
    const e = typeof self > "u" ? null : self;
    return b(e) ? 0 : x(e);
}
function Ye() {
    const e = "undefined" > "u" ? null : window;
    return b(e) ? 0 : x(e);
}
function Ze(e, t, n) {
    return e.subarray(t >>> 0, n >>> 0);
}
function et(e, t) {
    return e.then(t);
}
function tt(e, t, n) {
    return e.then(t, n);
}
function nt(e) {
    return e.valueOf();
}
function rt(e) {
    return e.value;
}
function ot(e) {
    return e.versions;
}
function _t(e) {
    return +e;
}
function ct(e) {
    return e;
}
function it(e) {
    return BigInt.asUintN(64, e);
}
function ut(e, t) {
    const n = t, r = typeof n == "bigint" ? n : void 0;
    l().setBigInt64(e + 8 * 1, b(r) ? BigInt(0) : r, !0), l().setInt32(e + 4 * 0, !b(r), !0);
}
function st(e) {
    const t = e;
    return typeof t == "boolean" ? t ? 1 : 0 : 2;
}
function ft(e) {
    const t = e.original;
    return t.cnt-- == 1 ? (t.a = 0, !0) : !1;
}
function at(e, t, n) {
    return V(e, t, 563, P);
}
function bt(e, t) {
    const n = A(t), r = f(n, o.__wbindgen_malloc, o.__wbindgen_realloc), _ = s;
    l().setInt32(e + 4 * 1, _, !0), l().setInt32(e + 4 * 0, r, !0);
}
function gt(e, t) {
    return new Error(w(e, t));
}
function lt(e, t) {
    return e in t;
}
function dt() {
    const e = o.__wbindgen_export_4, t = e.grow(4);
    e.set(0, void 0), e.set(t + 0, void 0), e.set(t + 1, null), e.set(t + 2, !0), e.set(t + 3, !1);
}
function wt(e) {
    return typeof e == "bigint";
}
function pt(e) {
    return typeof e == "function";
}
function xt(e) {
    const t = e;
    return typeof t == "object" && t !== null;
}
function yt(e) {
    return typeof e == "string";
}
function mt(e) {
    return e === void 0;
}
function ht(e, t) {
    return e === t;
}
function Tt(e, t) {
    return e == t;
}
function qt() {
    return o.memory;
}
function St(e, t) {
    const n = t, r = typeof n == "number" ? n : void 0;
    l().setFloat64(e + 8 * 1, b(r) ? 0 : r, !0), l().setInt32(e + 4 * 0, !b(r), !0);
}
function At(e) {
    return e;
}
function It(e, t) {
    const n = t, r = typeof n == "string" ? n : void 0;
    var _ = b(r) ? 0 : f(r, o.__wbindgen_malloc, o.__wbindgen_realloc), i = s;
    l().setInt32(e + 4 * 1, i, !0), l().setInt32(e + 4 * 0, _, !0);
}
function Et(e, t) {
    return w(e, t);
}
function Ot(e, t) {
    throw new Error(w(e, t));
}
0 && (module.exports = {
    QueryEngine,
    __wbg_String_8f0eb39a4a4c2f66,
    __wbg_buffer_609cc3eee51ed158,
    __wbg_call_672a4d21634d4a24,
    __wbg_call_7cccdd69e0791ae2,
    __wbg_crypto_805be4ce92f1e370,
    __wbg_done_769e5ede4b31c67b,
    __wbg_entries_3265d4158b33e5dc,
    __wbg_exec_3e2d2d0644c927df,
    __wbg_getRandomValues_f6a868620c8bab49,
    __wbg_getTime_46267b1c24877e30,
    __wbg_get_67b2ba62fc30de12,
    __wbg_get_b9b93047fe3cf45b,
    __wbg_get_ece95cf6585650d9,
    __wbg_getwithrefkey_1dc361bd10053bfe,
    __wbg_has_a5ea9117f258a0ec,
    __wbg_instanceof_ArrayBuffer_e14585432e3737fc,
    __wbg_instanceof_Map_f3469ce2244d2430,
    __wbg_instanceof_Promise_935168b8f4b49db3,
    __wbg_instanceof_Uint8Array_17156bcf118086a9,
    __wbg_isArray_a1eab7e0d067391b,
    __wbg_isSafeInteger_343e2beeeece1bb0,
    __wbg_iterator_9a24c88df860dc65,
    __wbg_keys_5c77a08ddc2fb8a6,
    __wbg_length_a446193dc22c12f8,
    __wbg_length_e2d2a49132c1b256,
    __wbg_msCrypto_2ac4d17c4748234a,
    __wbg_new0_f788a2397c7ca929,
    __wbg_new_23a2665fac83c611,
    __wbg_new_405e22f390576ce2,
    __wbg_new_5e0be73521bc8c17,
    __wbg_new_63847613cde5d4bc,
    __wbg_new_78feb108b6472713,
    __wbg_new_a12002a7f91c75be,
    __wbg_newnoargs_105ed471475aaf50,
    __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a,
    __wbg_newwithlength_a381634e90c276d4,
    __wbg_next_25feadfc0913fea9,
    __wbg_next_6574e1a8a62d1055,
    __wbg_node_ecc8306b9857f33d,
    __wbg_now_7fd00a794a07d388,
    __wbg_now_807e54c39636c349,
    __wbg_now_b3f7572f6ef3d3a9,
    __wbg_process_5cff2739921be718,
    __wbg_push_737cfc8c1432c2c6,
    __wbg_queueMicrotask_5a8a9131f3f0b37b,
    __wbg_queueMicrotask_6d79674585219521,
    __wbg_randomFillSync_d3c85af7e31cf1f8,
    __wbg_require_0c566c6f2eef6c79,
    __wbg_resolve_4851785c9c5f573d,
    __wbg_setTimeout_5d6a1d4fc51ea450,
    __wbg_set_37837023f3d740e8,
    __wbg_set_3f1d0b984ed272ed,
    __wbg_set_65595bdd868b3009,
    __wbg_set_8fc6bf8a5b1071d1,
    __wbg_set_bb8cecf6a62b9f46,
    __wbg_set_wasm,
    __wbg_static_accessor_GLOBAL_88a902d13a557d07,
    __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0,
    __wbg_static_accessor_SELF_37c5d418e4bf5819,
    __wbg_static_accessor_WINDOW_5de37043a91a9c40,
    __wbg_subarray_aa9065fa9dc5df96,
    __wbg_then_44b73946d2fb3e7d,
    __wbg_then_48b406749878a531,
    __wbg_valueOf_7392193dd78c6b97,
    __wbg_value_cd1ffa7b1ab794f1,
    __wbg_versions_a8e5a362e1f16442,
    __wbindgen_as_number,
    __wbindgen_bigint_from_i64,
    __wbindgen_bigint_from_u64,
    __wbindgen_bigint_get_as_i64,
    __wbindgen_boolean_get,
    __wbindgen_cb_drop,
    __wbindgen_closure_wrapper7549,
    __wbindgen_debug_string,
    __wbindgen_error_new,
    __wbindgen_in,
    __wbindgen_init_externref_table,
    __wbindgen_is_bigint,
    __wbindgen_is_function,
    __wbindgen_is_object,
    __wbindgen_is_string,
    __wbindgen_is_undefined,
    __wbindgen_jsval_eq,
    __wbindgen_jsval_loose_eq,
    __wbindgen_memory,
    __wbindgen_number_get,
    __wbindgen_number_new,
    __wbindgen_string_get,
    __wbindgen_string_new,
    __wbindgen_throw,
    debug_panic,
    getBuildTimeInfo
});
}}),
"[project]/node_modules/.prisma/client/query_engine_bg.wasm?module [middleware-edge] (wasm raw)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.v("chunks/node_modules__prisma_client_query_engine_bg_325b988e.wasm");}}),
"[project]/node_modules/.prisma/client/query_engine_bg.wasm?module [middleware-edge] (wasm module)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname, a: __turbopack_async_module__, w: __turbopack_wasm__, u: __turbopack_wasm_module__ } = __turbopack_context__;
__turbopack_async_module__(async (__turbopack_handle_async_dependencies__, __turbopack_async_result__) => { try {
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$prisma$2f$client$2f$query_engine_bg$2e$wasm$3f$module__$5b$middleware$2d$edge$5d$__$28$wasm__raw$29$__ = __turbopack_context__.i("[project]/node_modules/.prisma/client/query_engine_bg.wasm?module [middleware-edge] (wasm raw)");
;
const mod = await __turbopack_wasm_module__(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$prisma$2f$client$2f$query_engine_bg$2e$wasm$3f$module__$5b$middleware$2d$edge$5d$__$28$wasm__raw$29$__["default"]);
const __TURBOPACK__default__export__ = mod;
__turbopack_async_result__();
} catch(e) { __turbopack_async_result__(e); } }, true);}),
"[project]/node_modules/.prisma/client/wasm-edge-light-loader.mjs [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */ __turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = Promise.resolve().then(()=>__turbopack_context__.i("[project]/node_modules/.prisma/client/query_engine_bg.wasm?module [middleware-edge] (wasm module)"));
}}),
"[project]/node_modules/.prisma/client/wasm.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */ Object.defineProperty(exports, "__esModule", {
    value: true
});
const { PrismaClientKnownRequestError, PrismaClientUnknownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError, getPrismaClient, sqltag, empty, join, raw, skip, Decimal, Debug, objectEnumValues, makeStrictEnum, Extensions, warnOnce, defineDmmfProperty, Public, getRuntime, createParam } = __turbopack_context__.r("[project]/node_modules/@prisma/client/runtime/wasm.js [middleware-edge] (ecmascript)");
const Prisma = {};
exports.Prisma = Prisma;
exports.$Enums = {};
/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */ Prisma.prismaVersion = {
    client: "6.7.0",
    engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
};
Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;
/**
 * Re-export of sql-template-tag
 */ Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;
/**
* Extensions
*/ Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;
/**
 * Shorthand utilities for JSON filtering
 */ Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;
Prisma.NullTypes = {
    DbNull: objectEnumValues.classes.DbNull,
    JsonNull: objectEnumValues.classes.JsonNull,
    AnyNull: objectEnumValues.classes.AnyNull
};
/**
 * Enums
 */ exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
});
exports.Prisma.UserScalarFieldEnum = {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    banned: 'banned',
    banReason: 'banReason',
    banExpires: 'banExpires',
    referrerDomain: 'referrerDomain'
};
exports.Prisma.SessionScalarFieldEnum = {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    impersonatedBy: 'impersonatedBy',
    userId: 'userId',
    activeOrganizationId: 'activeOrganizationId'
};
exports.Prisma.AccountScalarFieldEnum = {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.VerificationScalarFieldEnum = {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.ConnectionScalarFieldEnum = {
    id: 'id',
    name: 'name',
    type: 'type',
    status: 'status',
    statusDetails: 'statusDetails',
    clientRedirectUrl: 'clientRedirectUrl',
    config: 'config',
    namespaceId: 'namespaceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.DocumentScalarFieldEnum = {
    id: 'id',
    externalId: 'externalId',
    name: 'name',
    tenantId: 'tenantId',
    status: 'status',
    error: 'error',
    source: 'source',
    metadata: 'metadata',
    queuedAt: 'queuedAt',
    preProcessingAt: 'preProcessingAt',
    processingAt: 'processingAt',
    completedAt: 'completedAt',
    failedAt: 'failedAt',
    ingestJobId: 'ingestJobId',
    workflowRunsIds: 'workflowRunsIds',
    documentProperties: 'documentProperties',
    totalChunks: 'totalChunks',
    totalTokens: 'totalTokens',
    totalCharacters: 'totalCharacters',
    totalPages: 'totalPages',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.IngestJobScalarFieldEnum = {
    id: 'id',
    tenantId: 'tenantId',
    namespaceId: 'namespaceId',
    status: 'status',
    error: 'error',
    payload: 'payload',
    config: 'config',
    queuedAt: 'queuedAt',
    preProcessingAt: 'preProcessingAt',
    processingAt: 'processingAt',
    completedAt: 'completedAt',
    failedAt: 'failedAt',
    workflowRunsIds: 'workflowRunsIds',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.NamespaceScalarFieldEnum = {
    id: 'id',
    name: 'name',
    slug: 'slug',
    organizationId: 'organizationId',
    embeddingConfig: 'embeddingConfig',
    vectorStoreConfig: 'vectorStoreConfig',
    fileStoreConfig: 'fileStoreConfig',
    totalIngestJobs: 'totalIngestJobs',
    totalDocuments: 'totalDocuments',
    totalPages: 'totalPages',
    totalPlaygroundUsage: 'totalPlaygroundUsage',
    keywordEnabled: 'keywordEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.HostingScalarFieldEnum = {
    id: 'id',
    namespaceId: 'namespaceId',
    title: 'title',
    slug: 'slug',
    logo: 'logo',
    systemPrompt: 'systemPrompt',
    exampleQuestions: 'exampleQuestions',
    citationMetadataPath: 'citationMetadataPath',
    welcomeMessage: 'welcomeMessage',
    searchEnabled: 'searchEnabled',
    exampleSearchQueries: 'exampleSearchQueries',
    protected: 'protected',
    allowedEmails: 'allowedEmails',
    allowedEmailDomains: 'allowedEmailDomains',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.DomainScalarFieldEnum = {
    id: 'id',
    slug: 'slug',
    verified: 'verified',
    lastChecked: 'lastChecked',
    hostingId: 'hostingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.OrganizationScalarFieldEnum = {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    metadata: 'metadata',
    totalNamespaces: 'totalNamespaces',
    totalDocuments: 'totalDocuments',
    totalIngestJobs: 'totalIngestJobs',
    totalPages: 'totalPages',
    pagesLimit: 'pagesLimit',
    searchUsage: 'searchUsage',
    searchLimit: 'searchLimit',
    apiRatelimit: 'apiRatelimit',
    plan: 'plan',
    stripeId: 'stripeId',
    billingCycleStart: 'billingCycleStart',
    paymentFailedAt: 'paymentFailedAt',
    status: 'status',
    createdAt: 'createdAt',
    usageLastChecked: 'usageLastChecked'
};
exports.Prisma.OrganizationApiKeyScalarFieldEnum = {
    id: 'id',
    key: 'key',
    label: 'label',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    organizationId: 'organizationId',
    scope: 'scope'
};
exports.Prisma.MemberScalarFieldEnum = {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt'
};
exports.Prisma.InvitationScalarFieldEnum = {
    id: 'id',
    organizationId: 'organizationId',
    email: 'email',
    role: 'role',
    status: 'status',
    expiresAt: 'expiresAt',
    inviterId: 'inviterId'
};
exports.Prisma.SortOrder = {
    asc: 'asc',
    desc: 'desc'
};
exports.Prisma.NullableJsonNullValueInput = {
    DbNull: Prisma.DbNull,
    JsonNull: Prisma.JsonNull
};
exports.Prisma.JsonNullValueInput = {
    JsonNull: Prisma.JsonNull
};
exports.Prisma.QueryMode = {
    default: 'default',
    insensitive: 'insensitive'
};
exports.Prisma.NullsOrder = {
    first: 'first',
    last: 'last'
};
exports.Prisma.JsonNullValueFilter = {
    DbNull: Prisma.DbNull,
    JsonNull: Prisma.JsonNull,
    AnyNull: Prisma.AnyNull
};
exports.ConnectionType = exports.$Enums.ConnectionType = {
    NOTION: 'NOTION',
    GOOGLE_DRIVE: 'GOOGLE_DRIVE',
    DROPBOX: 'DROPBOX',
    ONE_DRIVE: 'ONE_DRIVE'
};
exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
    PENDING: 'PENDING',
    CONNECTED: 'CONNECTED',
    FAILED: 'FAILED',
    REVOKED: 'REVOKED'
};
exports.DocumentStatus = exports.$Enums.DocumentStatus = {
    BACKLOG: 'BACKLOG',
    QUEUED: 'QUEUED',
    QUEUED_FOR_RESYNC: 'QUEUED_FOR_RESYNC',
    QUEUED_FOR_DELETE: 'QUEUED_FOR_DELETE',
    PRE_PROCESSING: 'PRE_PROCESSING',
    PROCESSING: 'PROCESSING',
    DELETING: 'DELETING',
    CANCELLING: 'CANCELLING',
    COMPLETED: 'COMPLETED',
    FAILED: 'FAILED',
    CANCELLED: 'CANCELLED'
};
exports.IngestJobStatus = exports.$Enums.IngestJobStatus = {
    BACKLOG: 'BACKLOG',
    QUEUED: 'QUEUED',
    QUEUED_FOR_RESYNC: 'QUEUED_FOR_RESYNC',
    QUEUED_FOR_DELETE: 'QUEUED_FOR_DELETE',
    PRE_PROCESSING: 'PRE_PROCESSING',
    PROCESSING: 'PROCESSING',
    DELETING: 'DELETING',
    CANCELLING: 'CANCELLING',
    COMPLETED: 'COMPLETED',
    FAILED: 'FAILED',
    CANCELLED: 'CANCELLED'
};
exports.OrganizationStatus = exports.$Enums.OrganizationStatus = {
    ACTIVE: 'ACTIVE',
    DELETING: 'DELETING'
};
exports.Prisma.ModelName = {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Connection: 'Connection',
    Document: 'Document',
    IngestJob: 'IngestJob',
    Namespace: 'Namespace',
    Hosting: 'Hosting',
    Domain: 'Domain',
    Organization: 'Organization',
    OrganizationApiKey: 'OrganizationApiKey',
    Member: 'Member',
    Invitation: 'Invitation'
};
/**
 * Create the Client
 */ const config = {
    "generator": {
        "name": "client",
        "provider": {
            "fromEnvVar": null,
            "value": "prisma-client-js"
        },
        "output": {
            "value": "C:\\app\\agentset\\node_modules\\@prisma\\client",
            "fromEnvVar": null
        },
        "config": {
            "engineType": "library"
        },
        "binaryTargets": [
            {
                "fromEnvVar": null,
                "value": "windows",
                "native": true
            }
        ],
        "previewFeatures": [
            "driverAdapters"
        ],
        "sourceFilePath": "C:\\app\\agentset\\packages\\db\\prisma\\schema\\schema.prisma"
    },
    "relativeEnvPaths": {
        "rootEnvPath": null
    },
    "relativePath": "../../../packages/db/prisma/schema",
    "clientVersion": "6.7.0",
    "engineVersion": "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
    "datasourceNames": [
        "db"
    ],
    "activeProvider": "postgresql",
    "postinstall": false,
    "inlineDatasources": {
        "db": {
            "url": {
                "fromEnvVar": "DATABASE_URL",
                "value": null
            }
        }
    },
    "inlineSchema": "model User {\n  id            String       @id\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n  members       Member[]\n  invitations   Invitation[]\n  role          String       @default(\"user\")\n  banned        Boolean? //\tIndicates whether the user is banned.\n  banReason     String? // The reason for the user's ban.\n  banExpires    DateTime?\n\n  // NOTE: this is used to track the domain that the user came from\n  // for e.g. if they signup from a hosted page, we don't want to send them a welcome email\n  referrerDomain String?\n\n  @@unique([email])\n  @@map(\"user\")\n}\n\nmodel Session {\n  id                   String   @id\n  expiresAt            DateTime\n  token                String\n  createdAt            DateTime\n  updatedAt            DateTime\n  ipAddress            String?\n  userAgent            String?\n  impersonatedBy       String?\n  userId               String\n  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  activeOrganizationId String?\n\n  @@unique([token])\n  @@map(\"session\")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map(\"account\")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map(\"verification\")\n}\n\nenum ConnectionType {\n  NOTION\n  GOOGLE_DRIVE\n  DROPBOX\n  ONE_DRIVE\n}\n\nenum ConnectionStatus {\n  PENDING\n  CONNECTED\n  FAILED\n  REVOKED\n}\n\nmodel Connection {\n  id   String @id @default(cuid())\n  name String\n\n  type   ConnectionType\n  status ConnectionStatus @default(PENDING)\n\n  statusDetails     String?\n  clientRedirectUrl String?\n\n  /// [ConnectionConfig]\n  config Json?\n\n  namespaceId String\n  namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"connection\")\n}\n\nenum DocumentStatus {\n  BACKLOG\n  QUEUED\n  QUEUED_FOR_RESYNC\n  QUEUED_FOR_DELETE\n  PRE_PROCESSING\n  PROCESSING\n  DELETING\n  CANCELLING\n  COMPLETED\n  FAILED\n  CANCELLED\n}\n\nmodel Document {\n  id         String  @id @default(cuid())\n  externalId String?\n  name       String?\n  tenantId   String?\n\n  status DocumentStatus @default(BACKLOG)\n  error  String?\n\n  /// [DocumentSource]\n  source Json\n\n  /// [DocumentMetadata]\n  metadata Json?\n\n  queuedAt        DateTime? @default(now())\n  preProcessingAt DateTime?\n  processingAt    DateTime?\n  completedAt     DateTime?\n  failedAt        DateTime?\n\n  ingestJobId String\n  ingestJob   IngestJob @relation(fields: [ingestJobId], references: [id], onDelete: Cascade)\n\n  workflowRunsIds String[] @default([])\n\n  /// [DocumentProperties]\n  documentProperties Json?\n\n  totalChunks     Int   @default(0)\n  totalTokens     Int   @default(0)\n  totalCharacters Int   @default(0)\n  totalPages      Float @default(0.0)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"document\")\n}\n\nenum IngestJobStatus {\n  BACKLOG\n  QUEUED\n  QUEUED_FOR_RESYNC\n  QUEUED_FOR_DELETE\n  PRE_PROCESSING\n  PROCESSING\n  DELETING\n  CANCELLING\n  COMPLETED\n  FAILED\n  CANCELLED\n}\n\nmodel IngestJob {\n  id String @id @default(cuid())\n\n  tenantId    String?\n  namespaceId String\n  namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)\n\n  status IngestJobStatus @default(BACKLOG)\n  error  String?\n\n  /// [IngestJobPayload]\n  payload Json\n\n  /// [IngestJobConfig]\n  config Json?\n\n  queuedAt        DateTime? @default(now())\n  preProcessingAt DateTime?\n  processingAt    DateTime?\n  completedAt     DateTime?\n  failedAt        DateTime?\n\n  workflowRunsIds String[] @default([])\n\n  documents Document[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([status])\n  @@index([tenantId, status])\n  @@index([namespaceId, status])\n  @@map(\"ingest_job\")\n}\n\nmodel Namespace {\n  id   String @id @default(cuid())\n  name String\n  slug String\n\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n\n  /// [NamespaceEmbeddingConfig]\n  embeddingConfig Json?\n\n  /// [NamespaceVectorStoreConfig]\n  vectorStoreConfig Json?\n\n  /// [NamespaceFileStoreConfig]\n  fileStoreConfig Json?\n\n  connections Connection[]\n  ingestJobs  IngestJob[]\n\n  totalIngestJobs      Int   @default(0) // Total number of ingest jobs in the namespace\n  totalDocuments       Int   @default(0) // Total number of documents in the namespace\n  totalPages           Float @default(0.0)\n  totalPlaygroundUsage Int   @default(0) // Total number of playground requests in the namespace\n\n  keywordEnabled Boolean @default(false) // whether keyword + hybrid search is enabled\n\n  hosting Hosting?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([organizationId, slug]) // A namespace must have a unique slug within an organization\n  @@map(\"namespace\")\n}\n\nmodel Hosting {\n  id          String    @id @default(cuid())\n  namespaceId String    @unique\n  namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)\n\n  title  String?\n  slug   String? @unique\n  logo   String?\n  domain Domain?\n\n  // chat settings\n  systemPrompt         String?  @db.Text\n  exampleQuestions     String[] @default([]) @db.Text\n  citationMetadataPath String? // Path to use for citation metadata (e.g. \"title\" or \"foo.bar\")\n  welcomeMessage       String?\n\n  // search settings\n  searchEnabled        Boolean  @default(true)\n  exampleSearchQueries String[] @default([]) @db.Text\n\n  protected           Boolean  @default(true) // Whether the namespace is protected from public access\n  allowedEmails       String[] @default([]) // relevant when protected is true\n  allowedEmailDomains String[] @default([]) // relevant when protected is true\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Domain {\n  id       String  @id @default(cuid())\n  slug     String  @unique\n  verified Boolean @default(false)\n\n  lastChecked DateTime @default(now())\n\n  hosting   Hosting @relation(fields: [hostingId], references: [id], onDelete: Cascade)\n  hostingId String  @unique\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index(lastChecked(sort: Asc))\n}\n\nenum OrganizationStatus {\n  ACTIVE\n  DELETING\n}\n\nmodel Organization {\n  id   String  @id\n  name String\n  slug String\n  logo String?\n\n  metadata String?\n\n  members     Member[]\n  invitations Invitation[]\n  namespaces  Namespace[]\n  apiKeys     OrganizationApiKey[]\n\n  totalNamespaces Int @default(0) // Total number of namespaces in the organization\n  totalDocuments  Int @default(0) // Total number of documents in the organization\n  totalIngestJobs Int @default(0) // Total number of ingest jobs in the organization\n\n  totalPages Float @default(0.0)\n  pagesLimit Int   @default(1000)\n\n  searchUsage Int @default(0)\n  searchLimit Int @default(10000)\n\n  apiRatelimit Int @default(60) // requests per second\n\n  plan              String    @default(\"free\")\n  stripeId          String?   @unique // Stripe customer ID\n  billingCycleStart Int? // day of the month when the billing cycle starts\n  paymentFailedAt   DateTime?\n\n  status OrganizationStatus @default(ACTIVE)\n\n  createdAt        DateTime @default(now())\n  usageLastChecked DateTime @default(now())\n\n  @@unique([slug])\n  @@index(usageLastChecked(sort: Asc))\n  @@map(\"organization\")\n}\n\nmodel OrganizationApiKey {\n  id             String       @id @default(cuid())\n  key            String\n  label          String\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  scope          String\n\n  @@unique([key])\n}\n\nmodel Member {\n  id             String       @id\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  userId         String\n  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)\n  role           String\n  createdAt      DateTime\n\n  @@unique([organizationId, userId])\n  @@map(\"member\")\n}\n\nmodel Invitation {\n  id             String       @id\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  email          String\n  role           String?\n  status         String\n  expiresAt      DateTime\n  inviterId      String\n  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)\n\n  @@map(\"invitation\")\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ngenerator json {\n  provider = \"prisma-json-types-generator\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n",
    "inlineSchemaHash": "6cc8aa6685676117c74c1bdd2c4814eece541a9a42cfeb8b377ec96f8cfa6367",
    "copyEngine": true
};
config.dirname = '/';
config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToUser\"},{\"name\":\"invitations\",\"kind\":\"object\",\"type\":\"Invitation\",\"relationName\":\"InvitationToUser\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"banned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"banReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"banExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"referrerDomain\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"user\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"impersonatedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"activeOrganizationId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"session\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"account\"},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification\"},\"Connection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ConnectionType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ConnectionStatus\"},{\"name\":\"statusDetails\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clientRedirectUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"namespaceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"namespace\",\"kind\":\"object\",\"type\":\"Namespace\",\"relationName\":\"ConnectionToNamespace\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"connection\"},\"Document\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"externalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DocumentStatus\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"queuedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"preProcessingAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processingAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"failedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ingestJobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ingestJob\",\"kind\":\"object\",\"type\":\"IngestJob\",\"relationName\":\"DocumentToIngestJob\"},{\"name\":\"workflowRunsIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentProperties\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"totalChunks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalCharacters\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalPages\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"document\"},\"IngestJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"namespaceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"namespace\",\"kind\":\"object\",\"type\":\"Namespace\",\"relationName\":\"IngestJobToNamespace\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"IngestJobStatus\"},{\"name\":\"error\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"queuedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"preProcessingAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"processingAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"failedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"workflowRunsIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToIngestJob\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"ingest_job\"},\"Namespace\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"NamespaceToOrganization\"},{\"name\":\"embeddingConfig\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"vectorStoreConfig\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"fileStoreConfig\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"connections\",\"kind\":\"object\",\"type\":\"Connection\",\"relationName\":\"ConnectionToNamespace\"},{\"name\":\"ingestJobs\",\"kind\":\"object\",\"type\":\"IngestJob\",\"relationName\":\"IngestJobToNamespace\"},{\"name\":\"totalIngestJobs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalDocuments\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalPages\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalPlaygroundUsage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"keywordEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hosting\",\"kind\":\"object\",\"type\":\"Hosting\",\"relationName\":\"HostingToNamespace\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"namespace\"},\"Hosting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"namespaceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"namespace\",\"kind\":\"object\",\"type\":\"Namespace\",\"relationName\":\"HostingToNamespace\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"domain\",\"kind\":\"object\",\"type\":\"Domain\",\"relationName\":\"DomainToHosting\"},{\"name\":\"systemPrompt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exampleQuestions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"citationMetadataPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"welcomeMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"searchEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"exampleSearchQueries\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"protected\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowedEmails\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allowedEmailDomains\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Domain\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastChecked\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"hosting\",\"kind\":\"object\",\"type\":\"Hosting\",\"relationName\":\"DomainToHosting\"},{\"name\":\"hostingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Organization\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToOrganization\"},{\"name\":\"invitations\",\"kind\":\"object\",\"type\":\"Invitation\",\"relationName\":\"InvitationToOrganization\"},{\"name\":\"namespaces\",\"kind\":\"object\",\"type\":\"Namespace\",\"relationName\":\"NamespaceToOrganization\"},{\"name\":\"apiKeys\",\"kind\":\"object\",\"type\":\"OrganizationApiKey\",\"relationName\":\"OrganizationToOrganizationApiKey\"},{\"name\":\"totalNamespaces\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalDocuments\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalIngestJobs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalPages\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"pagesLimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"searchUsage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"searchLimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"apiRatelimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"plan\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"billingCycleStart\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"paymentFailedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OrganizationStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"usageLastChecked\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"organization\"},\"OrganizationApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToOrganizationApiKey\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Member\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"MemberToOrganization\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MemberToUser\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"member\"},\"Invitation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"InvitationToOrganization\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"inviterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"InvitationToUser\"}],\"dbName\":\"invitation\"}},\"enums\":{},\"types\":{}}");
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
    getRuntime: async ()=>__turbopack_context__.r("[project]/node_modules/.prisma/client/query_engine_bg.js [middleware-edge] (ecmascript)"),
    getQueryEngineWasmModule: async ()=>{
        const loader = (await Promise.resolve().then(()=>__turbopack_context__.i("[project]/node_modules/.prisma/client/wasm-edge-light-loader.mjs [middleware-edge] (ecmascript)"))).default;
        const engine = (await loader).default;
        return engine;
    }
};
config.compilerWasm = undefined;
config.injectableEdgeEnv = ()=>({
        parsed: {
            DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
        }
    });
if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
    Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined);
}
const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
}}),
"[project]/node_modules/.prisma/client/default.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */ module.exports = {
    ...__turbopack_context__.r("[project]/node_modules/.prisma/client/wasm.js [middleware-edge] (ecmascript)")
};
}}),
}]);

//# sourceMappingURL=node_modules_f048a473._.js.map